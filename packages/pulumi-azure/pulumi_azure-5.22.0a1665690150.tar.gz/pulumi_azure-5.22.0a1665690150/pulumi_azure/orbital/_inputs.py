# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'SpacecraftLinkArgs',
]

@pulumi.input_type
class SpacecraftLinkArgs:
    def __init__(__self__, *,
                 bandwidth_mhz: pulumi.Input[float],
                 center_frequency_mhz: pulumi.Input[float],
                 direction: pulumi.Input[str],
                 name: pulumi.Input[str],
                 polarization: pulumi.Input[str]):
        """
        :param pulumi.Input[float] bandwidth_mhz: Bandwidth in Mhz.
        :param pulumi.Input[float] center_frequency_mhz: Center frequency in Mhz.
        :param pulumi.Input[str] direction: Direction if the communication. Possible values are `Uplink` and `Downlink`.
        :param pulumi.Input[str] name: Name of the link.
        :param pulumi.Input[str] polarization: Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
        """
        pulumi.set(__self__, "bandwidth_mhz", bandwidth_mhz)
        pulumi.set(__self__, "center_frequency_mhz", center_frequency_mhz)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "polarization", polarization)

    @property
    @pulumi.getter(name="bandwidthMhz")
    def bandwidth_mhz(self) -> pulumi.Input[float]:
        """
        Bandwidth in Mhz.
        """
        return pulumi.get(self, "bandwidth_mhz")

    @bandwidth_mhz.setter
    def bandwidth_mhz(self, value: pulumi.Input[float]):
        pulumi.set(self, "bandwidth_mhz", value)

    @property
    @pulumi.getter(name="centerFrequencyMhz")
    def center_frequency_mhz(self) -> pulumi.Input[float]:
        """
        Center frequency in Mhz.
        """
        return pulumi.get(self, "center_frequency_mhz")

    @center_frequency_mhz.setter
    def center_frequency_mhz(self, value: pulumi.Input[float]):
        pulumi.set(self, "center_frequency_mhz", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        Direction if the communication. Possible values are `Uplink` and `Downlink`.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the link.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def polarization(self) -> pulumi.Input[str]:
        """
        Polarization. Possible values are `RHCP`, `LHCP`, `linearVertical` and `linearHorizontal`.
        """
        return pulumi.get(self, "polarization")

    @polarization.setter
    def polarization(self, value: pulumi.Input[str]):
        pulumi.set(self, "polarization", value)


