"""Autogenerated API schema"""
from argus_api import session


add_analysis = {'tags': ['sampledb/v2'], 'summary': 'Adds an analysis to a sample (DEV)', 'description': '', 'operationId': 'addAnalysis', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add analysis result to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add analysis request', 'required': False, 'schema': {'type': 'object', 'required': ['analysisResult', 'customer', 'tlp', 'userAgent'], 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis as a JSON object'}, 'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of customer the analysis belongs to'}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'The shortname or IDs of users or groups that will be given explicit access', 'items': {'type': 'string'}}, 'jobID': {'type': 'str', 'position': 0, 'description': 'The ID of the job that initiated the analysis'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'confidence', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection => [a-zA-Z0-9_\\-\\.]*'}, 'confidence': {'type': 'float', 'position': 0, 'description': 'An indicator for how confident the detection is in the assessment. A value from 0 to 1 (inclusive). The number is rounded to 3 fractional digits', 'minimum': 0, 'maximum': 1}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious']}}}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'analyzerName': {'type': 'str', 'position': 0, 'description': 'Name of the analyzer that produced this result => [a-zA-Z0-9_\\-\\.]*'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Can be set to signify that the worker posting the analysis result is 100% certain that the sample is malicious or benign. The verdict engine will consider this field and use as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the analysis is for'}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'jobID': {'type': 'str', 'position': 0, 'description': 'The ID of the job that initiated the analysis'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'confidence', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection'}, 'confidence': {'type': 'float', 'position': 0, 'description': 'An indicator for how confident the detection is. A value from 0 to 1 (inclusive)'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious']}}}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'analyzerName': {'type': 'str', 'position': 0, 'description': 'Name of the analyzer that produced this result'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_evidence = {'tags': ['sampledb/v2'], 'summary': 'Adds evidence to an analysis (DEV)', 'description': '', 'operationId': 'addEvidence', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample that holds the analysis', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'UUID of analysis to add evidence to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add evidence request', 'required': False, 'schema': {'type': 'object', 'required': ['evidence', 'mimeType', 'name'], 'properties': {'evidence': {'type': 'str', 'position': 0, 'description': 'Base64 encoded evidence', 'minLength': 1, 'maxLength': 10000000}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The mimeType of the evidence'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name given to the evidence'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_link = {'tags': ['sampledb/v2'], 'summary': 'Adds an link to a sample (DEV)', 'description': '', 'operationId': 'addLink', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add link to', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add link request', 'required': False, 'schema': {'type': 'object', 'required': ['reference', 'tlp', 'type', 'userAgent'], 'properties': {'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of customer the link belongs to'}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'The shortname or IDs of users or groups that will be given explicit access', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': {'type': 'str', 'position': 0, 'description': 'The nature of the link between the two samples', 'enum': ['child', 'downloads', 'loads', 'executes']}, 'reference': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the link references'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample this link belongs to'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the link was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'white']}, 'type': 'str', 'reference': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}}}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'options': ['child', 'downloads', 'loads', 'executes']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
add_sample = {'tags': ['sampledb/v2'], 'summary': 'Upload a new sample file (INTERNAL)', 'description': '', 'operationId': 'addSample', 'consumes': ['*'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The sample file content', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'exists': {'type': 'bool', 'position': 0, 'description': 'Whether the sample already existed'}, 'sample': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}}}, 'challenge': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The challenge token'}}}}}}}}, '201': {'description': 'The sample was created', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'integer', 'format': 'int32', 'description': 'Status code returned from API'}, 'limit': {'type': 'integer', 'format': 'int64', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'integer', 'format': 'int64', 'description': 'Number of skipped results'}, 'count': {'type': 'integer', 'format': 'int64', 'description': 'Number of available results on server'}, 'size': {'type': 'integer', 'format': 'int64', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'object', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'array', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'object', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': {'type': 'string', 'enum': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}, 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'integer', 'format': 'int64'}}}}, 'data': {'type': 'object', 'properties': {'exists': {'type': 'boolean', 'position': 0, 'description': 'Whether the sample already existed'}, 'sample': {'type': 'object', 'properties': {'id': {'type': 'string', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'integer', 'format': 'int64', 'position': 0, 'description': 'The size of the sample in bytes'}}}, 'challenge': {'type': 'object', 'properties': {'id': {'type': 'string', 'format': 'uuid', 'position': 0, 'description': 'The id of the challenge'}, 'sha256': {'type': 'string', 'position': 0, 'description': 'The challenge token'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
add_submission = {'tags': ['sampledb/v2'], 'summary': 'Add a new sample submission. Requires a challenge token. A challenge token is a solution to a challenge generated by the challenge endpoint (INTERNAL)', 'description': '', 'operationId': 'addSubmission', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to add submission for', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Add submission request', 'required': False, 'schema': {'type': 'object', 'required': ['challengeToken', 'fileName', 'userAgent'], 'properties': {'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'str', 'position': 0, 'description': "The shortname or ID of customer the submission belongs to. Default value is the currernt user's customer"}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp of when the sample was observed. Defaults to the current time'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type (default application/octet-stream)'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission. Defaults to amber (default amber)', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of user IDs or shortnames that are given explicit access to the submission', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userAgent': {'type': 'dict', 'required': ['name', 'version'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}, 'challengeToken': {'type': 'dict', 'required': ['id', 'sha256'], 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge'}, 'sha256': {'type': 'str', 'position': 0, 'description': 'The challenge token'}}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed'}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
advanced_search = {'tags': ['sampledb/v2'], 'summary': 'Advanced search for samples (DEV)', 'description': '', 'operationId': 'advancedSearch', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'The search critieras', 'required': False, 'schema': {'type': 'object', 'properties': {'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords to search for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected keyword fields', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sha256', 'submission', 'analysis', 'link', 'classification']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'sha256': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected sample sha256 IDs', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'analysisCreated', 'linkCreated']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'classification': {'type': 'list', 'position': 0, 'description': 'Search criteria for classifications', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Criteria for the version field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'superType': {'type': 'list', 'position': 0, 'description': 'Criteria for the superType field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'arch': {'type': 'list', 'position': 0, 'description': 'Criteria for the arch field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'platform': {'type': 'list', 'position': 0, 'description': 'Criteria for the platform field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'meta': {'type': 'list', 'position': 0, 'description': 'Criteria for the meta field of a classification', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'submission': {'type': 'list', 'position': 0, 'description': 'Search criteria for submissions', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'fileName': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the file names defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mimeType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the mime types defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'meta': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'tlp': {'type': 'list', 'position': 0, 'description': 'A set of TLP criteria to apply to submissions, analyses, and links', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['white', 'green', 'amber', 'red']}}, 'analysis': {'type': 'list', 'position': 0, 'description': 'Search criteria for analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analysis with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'analysisResult': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'link': {'type': 'list', 'position': 0, 'description': 'Search criteria for links', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to link with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'linkType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to links of a certain type', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['child', 'downloads', 'loads', 'executes']}}, 'reference': {'type': 'list', 'position': 0, 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'verdict': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdicts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'status': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdict statuses', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['unknown', 'malicious', 'benign', 'noFindings']}}, 'minimumVerdictScore': {'type': 'float', 'position': 0, 'description': 'Restrict the search to samples where the verdict score is at least this big'}, 'maximumVerdictScore': {'type': 'float', 'position': 0, 'description': 'Restrict the search to samples where the verdict score is less than this value'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Search sub criteria', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords to search for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected keyword fields', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sha256', 'submission', 'analysis', 'link', 'classification']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'sha256': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected sample sha256 IDs', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'analysisCreated', 'linkCreated']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'classification': {'type': 'list', 'position': 0, 'description': 'Search criteria for classifications', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Criteria for the version field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'superType': {'type': 'list', 'position': 0, 'description': 'Criteria for the superType field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'arch': {'type': 'list', 'position': 0, 'description': 'Criteria for the arch field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'platform': {'type': 'list', 'position': 0, 'description': 'Criteria for the platform field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'meta': {'type': 'list', 'position': 0, 'description': 'Criteria for the meta field of a classification', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'submission': {'type': 'list', 'position': 0, 'description': 'Search criteria for submissions', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'fileName': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the file names defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mimeType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the mime types defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'meta': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'tlp': {'type': 'list', 'position': 0, 'description': 'A set of TLP criteria to apply to submissions, analyses, and links', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['white', 'green', 'amber', 'red']}}, 'analysis': {'type': 'list', 'position': 0, 'description': 'Search criteria for analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analysis with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'analysisResult': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'link': {'type': 'list', 'position': 0, 'description': 'Search criteria for links', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to link with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'linkType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to links of a certain type', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['child', 'downloads', 'loads', 'executes']}}, 'reference': {'type': 'list', 'position': 0, 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'verdict': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdicts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'status': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdict statuses', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['unknown', 'malicious', 'benign', 'noFindings']}}, 'minimumVerdictScore': {'type': 'float', 'position': 0, 'description': 'Restrict the search to samples where the verdict score is at least this big'}, 'maximumVerdictScore': {'type': 'float', 'position': 0, 'description': 'Restrict the search to samples where the verdict score is less than this value'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Search sub criteria', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'keywords': {'type': 'list', 'position': 0, 'description': 'A set of keywords to search for', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected keyword fields', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sha256', 'submission', 'analysis', 'link', 'classification']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match one or more of the keywords', 'enum': ['all', 'any']}, 'sha256': {'type': 'list', 'position': 0, 'description': 'Restrict to search only in the selected sample sha256 IDs', 'uniqueItems': True, 'items': {'type': 'string'}}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'sampleCreated', 'classificationCreated', 'submissionCreated', 'submissionObserved', 'analysisCreated', 'linkCreated']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)', 'enum': ['all', 'any']}, 'classification': {'type': 'list', 'position': 0, 'description': 'Search criteria for classifications', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'version': {'type': 'list', 'position': 0, 'description': 'Criteria for the version field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'type': 'list', 'superType': {'type': 'list', 'position': 0, 'description': 'Criteria for the superType field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'arch': {'type': 'list', 'position': 0, 'description': 'Criteria for the arch field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'platform': {'type': 'list', 'position': 0, 'description': 'Criteria for the platform field of a classification', 'uniqueItems': True, 'items': {'type': 'string'}}, 'meta': {'type': 'list', 'position': 0, 'description': 'Criteria for the meta field of a classification', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'submission': {'type': 'list', 'position': 0, 'description': 'Search criteria for submissions', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'fileName': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the file names defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'mimeType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the mime types defined', 'uniqueItems': True, 'items': {'type': 'string'}}, 'meta': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to submissions with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'user': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': "Define what resources to apply the user criteria to. Defaults to 'all'", 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['all', 'submittedByUser', 'analysedByUser', 'linkedByUser']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': ' Whether all or any (default) of the fields must match the user criteria', 'enum': ['all', 'any']}, 'customer': {'type': 'list', 'position': 0, 'description': 'Restrict the search to samples containing submissions owned by certain customers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'tlp': {'type': 'list', 'position': 0, 'description': 'A set of TLP criteria to apply to submissions, analyses, and links', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['white', 'green', 'amber', 'red']}}, 'analysis': {'type': 'list', 'position': 0, 'description': 'Search criteria for analysis', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analysis with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'analysisResult': {'type': 'list', 'position': 0, 'description': 'Restrict the search to analyses with either of the meta data properties defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'path': {'type': 'str', 'position': 0, 'description': 'The path (dot-notation) to the field to match the value against. May not contain spaces'}, 'value': {'type': 'list', 'position': 0, 'description': "Values to match against the field pointed to by 'path'", 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'link': {'type': 'list', 'position': 0, 'description': 'Search criteria for links', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'userAgent': {'type': 'list', 'position': 0, 'description': 'Restrict the search to link with either of the user agents defined', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}, 'linkType': {'type': 'list', 'position': 0, 'description': 'Restrict the search to links of a certain type', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['child', 'downloads', 'loads', 'executes']}}, 'reference': {'type': 'list', 'position': 0, 'description': 'Restrict the search by the sample sha256 ID a link is referencing', 'uniqueItems': True, 'items': {'type': 'string'}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement. Defaults to false'}}}}, 'verdict': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdicts', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'status': {'type': 'list', 'position': 0, 'description': 'Search criteria for verdict statuses', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['unknown', 'malicious', 'benign', 'noFindings']}}, 'minimumVerdictScore': {'type': 'float', 'position': 0, 'description': 'Restrict the search to samples where the verdict score is at least this big'}, 'maximumVerdictScore': {'type': 'float', 'position': 0, 'description': 'Restrict the search to samples where the verdict score is less than this value'}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria should be excluded from search results'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this criteria is a requirement'}}}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Search sub criteria', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria is a requirement. Defaults to false'}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'minimum': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'minimum': 0}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria should be excluded from search results. Defaults to false'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Whether documents matching this sub-criteria is a requirement. Defaults to false'}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'minimum': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'minimum': 0}}}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit the number of search results (default 25)', 'default': 25}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Specify sort ordering for returned samples (default -sampleCreationTimestamp)', 'items': {'type': 'str', 'enum': ['sampleCreationTimestamp', 'sampleSize', 'sampleClassificationType', 'lastAddedSubmission', 'lastAddedAnalysis', 'lastAddedLink', 'weightedScore', '-sampleCreationTimestamp', '-sampleSize', '-sampleClassificationType', '-lastAddedSubmission', '-lastAddedAnalysis', '-lastAddedLink', '-weightedScore']}}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'minimum': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'minimum': 0}, 'indexStartTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details (default now - 1 month)', 'minimum': 0}, 'indexEndTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details (default now)', 'minimum': 0}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created'}, 'classification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'meta': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
download_raw_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a raw sample file. Warning: The file returned may be malicious. Take caution (INTERNAL)', 'description': '', 'operationId': 'downloadRawSample', 'produces': ['application/octet-stream'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
download_safe_sample = {'tags': ['sampledb/v2'], 'summary': 'Download a zipped sample file, password protected with the password "infected". Warning: The zipped file may be malicious. Take caution (INTERNAL)', 'description': '', 'operationId': 'downloadSafeSample', 'produces': ['application/zip'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'Successful operation'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
get_analysis = {'tags': ['sampledb/v2'], 'summary': 'Fetches the analysis for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getAnalysis', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the analysis is for'}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'jobID': {'type': 'str', 'position': 0, 'description': 'The ID of the job that initiated the analysis'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'confidence', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection'}, 'confidence': {'type': 'float', 'position': 0, 'description': 'An indicator for how confident the detection is. A value from 0 to 1 (inclusive)'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious']}}}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'analyzerName': {'type': 'str', 'position': 0, 'description': 'Name of the analyzer that produced this result'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_evidence = {'tags': ['sampledb/v2'], 'summary': 'Fetches the evidence metadata for the analysis for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getEvidence', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'ID of the analysis the evidence is for', 'required': True, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'ID of the evidence to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_evidence_data = {'tags': ['sampledb/v2'], 'summary': 'Returns the evidence file. (DEV)', 'description': '', 'operationId': 'getEvidenceData', 'produces': ['*/*'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to fetch evidence from', 'required': True, 'type': 'str'}, {'name': 'evidenceID', 'in': 'path', 'description': 'The ID of the evidence data you want to fetch', 'required': True, 'type': 'str'}], 'responses': {'401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_link = {'tags': ['sampledb/v2'], 'summary': 'Fetches the link for the sample with the given ID (DEV)', 'description': '', 'operationId': 'getLink', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'type': 'str'}, {'name': 'linkID', 'in': 'path', 'description': 'ID of the link to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample this link belongs to'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the link was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'white']}, 'type': 'str', 'reference': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}}}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'options': ['child', 'downloads', 'loads', 'executes']}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
get_sample_meta_data = {'tags': ['sampledb/v2'], 'summary': 'Fetch meta data about a sample file (INTERNAL)', 'description': '', 'operationId': 'getSampleMetaData', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created'}, 'classification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'meta': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
get_submission = {'tags': ['sampledb/v2'], 'summary': 'Fetch a submission for the sample with the given ID (INTERNAL)', 'description': '', 'operationId': 'getSubmission', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample the submission belongs to', 'required': True, 'type': 'str'}, {'name': 'submissionID', 'in': 'path', 'description': 'The ID of the submission to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed'}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}}}
get_upload_challenge = {'tags': ['sampledb/v2'], 'summary': "Generate a new challenge for a sample. The solution of the challenge is SHA256(x) where x is 'length' bytes of data starting from 'offset' bytes into the sample file (INTERNAL)", 'description': '', 'operationId': 'getUploadChallenge', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to get submission challenge for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The id of the challenge'}, 'offset': {'type': 'int', 'position': 0, 'description': 'The offset into the sample file from where to start calculating the hash'}, 'length': {'type': 'int', 'position': 0, 'description': 'The number of bytes to process'}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}, '422': {'description': 'The sample file is too small. Upload the full sample and use the challenge token returned in that response as proof'}}}
list_analysis = {'tags': ['sampledb/v2'], 'summary': 'Lists the analysis for the sample (DEV)', 'description': '', 'operationId': 'listAnalysis', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the analysis from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'analysisResult': {'type': 'dict', 'description': 'The result of the analysis'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample the analysis is for'}, 'analysisID': {'type': 'str', 'position': 0, 'description': 'The ID of the analysis'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the analysis', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'jobID': {'type': 'str', 'position': 0, 'description': 'The ID of the job that initiated the analysis'}, 'triggeredDetections': {'type': 'list', 'position': 0, 'description': 'The triggered detections for this analysis', 'items': {'type': 'dict', 'required': ['assessment', 'confidence', 'name'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the detection'}, 'confidence': {'type': 'float', 'position': 0, 'description': 'An indicator for how confident the detection is. A value from 0 to 1 (inclusive)'}, 'assessment': {'type': 'str', 'position': 0, 'description': 'An assessment of the sample according to this detection', 'enum': ['benign', 'unknown', 'malicious']}}}}, 'possibleDetections': {'type': 'int', 'position': 0, 'description': 'The maximum number of possible detections'}, 'analyzerName': {'type': 'str', 'position': 0, 'description': 'Name of the analyzer that produced this result'}, 'verdictStatusOverride': {'type': 'str', 'position': 0, 'description': "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead", 'enum': ['malicious', 'benign']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_classifications = {'tags': ['sampledb/v2'], 'summary': 'Fetch all classifications for a sample (DEV)', 'description': '', 'operationId': 'listClassifications', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'The maximum number of classifications to return', 'required': False, 'type': 'int', 'default': 25}, {'name': 'sortBy', 'in': 'query', 'description': 'The field on which to sort the classifications', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-createdTimestamp'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'meta': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'An error occurred'}, '412': {'description': 'Validation error'}}}
list_evidence = {'tags': ['sampledb/v2'], 'summary': 'Lists the evidence metadata for the analysis (DEV)', 'description': '', 'operationId': 'listEvidence', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample the analysis is from', 'required': True, 'type': 'str'}, {'name': 'analysisID', 'in': 'path', 'description': 'The ID of the analysis you want to list evidence from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the analysis was created'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The MIME type of the evidence'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the evidence'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the evidence in bytes'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_links = {'tags': ['sampledb/v2'], 'summary': 'Lists the links for the sample (DEV)', 'description': '', 'operationId': 'listLinks', 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of sample to fetch the link from', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleID': {'type': 'str', 'position': 0, 'description': 'The ID of the sample this link belongs to'}, 'createdByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the link was created'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'The TLP level of the link', 'enum': ['red', 'amber', 'green', 'white']}, 'type': 'str', 'reference': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}}}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of users given explicit access', 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'options': ['child', 'downloads', 'loads', 'executes']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation error'}}}
list_submissions = {'tags': ['sampledb/v2'], 'summary': 'List all the submissions for a sample (INTERNAL)', 'description': '', 'operationId': 'listSubmissions', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'sha256', 'in': 'path', 'description': 'Sha256 of the sample to fetch submissions for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object.'}, 'sampleSha256': {'type': 'str', 'position': 0, 'description': 'The sample this submission belongs to'}, 'fileName': {'type': 'str', 'position': 0, 'description': 'The filename of the sample'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'observedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the sample was observed'}, 'submittedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the submission was added'}, 'mimeType': {'type': 'str', 'position': 0, 'description': 'The sample mime type'}, 'metaData': {'type': 'dict', 'position': 0, 'description': 'Meta data about the sample', 'additionalProperties': {'type': 'string'}}, 'tlp': {'type': 'str', 'position': 0, 'description': 'TLP color of the submission', 'enum': ['red', 'amber', 'green', 'white']}, 'acl': {'type': 'list', 'position': 0, 'description': 'List of access controls that describe explicit access given to users or groups for this submission', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'subject': {'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, 'grantedByUser': {'allOf': [{'type': 'dict', 'discriminator': 'type', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI SubjectInfo'}, {'type': 'dict', 'properties': {}, 'description': 'SPI UserInfo'}], 'description': 'SPI UserInfo'}, 'grantedTimestamp': {'type': 'int', 'position': 0, 'description': 'The time at which the explicit access was granted'}}}}, 'userAgent': {'type': 'dict', 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the user agent'}, 'version': {'type': 'str', 'position': 0, 'description': 'The version of the user agent'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The sample could not be found'}, '412': {'description': 'Validation error'}}}
simple_search = {'tags': ['sampledb/v2'], 'summary': 'Simple search for samples (DEV)', 'description': '', 'operationId': 'simpleSearch', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'maximum': 10000, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': "The fields to sort the results by. Prefix with '-' to sort descending", 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-sampleCreationTimestamp', 'enum': ['sampleCreationTimestamp', 'sampleSize', 'sampleClassificationType', 'lastUpdatedSubmission', 'lastUpdatedAnalysis', 'lastUpdatedLink']}, 'collectionFormat': 'multi'}, {'name': 'indexStartTimestamp', 'in': 'query', 'description': 'Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'required': False, 'type': 'str', 'default': 'now - 1 month'}, {'name': 'indexEndTimestamp', 'in': 'query', 'description': 'Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details', 'required': False, 'type': 'str', 'default': 'now'}, {'name': 'keywords', 'in': 'query', 'description': 'A set of keywords to search for', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'sha256': {'type': 'str', 'position': 0, 'description': 'The ID of the sample'}, 'sha1': {'type': 'str', 'position': 0, 'description': 'The SHA1 hash of the sample'}, 'md5': {'type': 'str', 'position': 0, 'description': 'The MD5 hash of the sample'}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes'}, 'timestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the sample was created'}, 'classification': {'type': 'dict', 'properties': {'version': {'type': 'str', 'position': 0, 'description': 'The version of the classifier used to generate this classification'}, 'type': 'str', 'superType': {'type': 'str', 'position': 0, 'description': 'The super type of file for the sample'}, 'arch': {'type': 'str', 'position': 0, 'description': 'The architecture for the sample'}, 'platform': {'type': 'str', 'position': 0, 'description': 'The platform for the sample'}, 'meta': {'type': 'dict', 'position': 0, 'description': 'Meta data for the sample', 'additionalProperties': {'type': 'object'}}}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags set for this sample', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['exceededMaxSearchableSubmissions']}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}