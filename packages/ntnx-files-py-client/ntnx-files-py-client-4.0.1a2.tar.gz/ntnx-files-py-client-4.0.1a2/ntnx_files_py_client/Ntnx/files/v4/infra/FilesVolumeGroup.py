# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.storage.v4.config.AuthenticationType import AuthenticationType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.storage.v4.config.IscsiClient import IscsiClient  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.storage.v4.config.SharingStatus import SharingStatus  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.storage.v4.config.StorageFeatures import StorageFeatures  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.storage.v4.config.VmAttachment import VmAttachment  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.storage.v4.config.VolumeDisk import VolumeDisk  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.storage.v4.config.VolumeGroup import VolumeGroup  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class FilesVolumeGroup(VolumeGroup):
    """FilesVolumeGroup - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'disks': 'list[storage.v4.config.VolumeDisk]',
        'iscsi_clients': 'list[storage.v4.config.IscsiClient]',
        'vm_attachments': 'list[storage.v4.config.VmAttachment]',
        'name': 'str',
        'description': 'str',
        'load_balance_vm_attachments': 'bool',
        'sharing_status': 'storage.v4.config.SharingStatus',
        'iscsi_target_prefix': 'str',
        'iscsi_target_name': 'str',
        'target_secret': 'str',
        'enabled_authentications': 'storage.v4.config.AuthenticationType',
        'created_by': 'str',
        'cluster_reference': 'str',
        'storage_features': 'storage.v4.config.StorageFeatures',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'disks': 'disks',
        'iscsi_clients': 'iscsiClients',
        'vm_attachments': 'vmAttachments',
        'name': 'name',
        'description': 'description',
        'load_balance_vm_attachments': 'loadBalanceVmAttachments',
        'sharing_status': 'sharingStatus',
        'iscsi_target_prefix': 'iscsiTargetPrefix',
        'iscsi_target_name': 'iscsiTargetName',
        'target_secret': 'targetSecret',
        'enabled_authentications': 'enabledAuthentications',
        'created_by': 'createdBy',
        'cluster_reference': 'clusterReference',
        'storage_features': 'storageFeatures',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, disks=None, iscsi_clients=None, vm_attachments=None, name=None, description=None, load_balance_vm_attachments=None, sharing_status=None, iscsi_target_prefix=None, iscsi_target_name=None, target_secret=None, enabled_authentications=None, created_by=None, cluster_reference=None, storage_features=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """FilesVolumeGroup - a model defined in Swagger
            \nFile server storage object representing volume group resource.
        """
        VolumeGroup.__init__(self, name, description, load_balance_vm_attachments, sharing_status, iscsi_target_prefix, iscsi_target_name, target_secret, enabled_authentications, created_by, cluster_reference, storage_features, ext_id, links, tenant_id, *args, **kwargs)
        self.__disks = None
        self.__iscsi_clients = None
        self.__vm_attachments = None
        self.discriminator = None
        if disks is not None:
            self.__disks = disks
        if iscsi_clients is not None:
            self.__iscsi_clients = iscsi_clients
        if vm_attachments is not None:
            self.__vm_attachments = vm_attachments

    def _initialize_object_type(self):
        return 'files.v4.infra.FilesVolumeGroup'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.infra.FilesVolumeGroup'


    @property
    def disks(self):
        """`{ list[storage.v4.config.VolumeDisk] }`
            \nList of volume disk objects.
        """ # noqa: E501
        return self.__disks

    @disks.setter
    def disks(self, disks):

        self.__disks = disks

    @property
    def iscsi_clients(self):
        """`{ list[storage.v4.config.IscsiClient] }`
            \nList of ISCSI client objects.
        """ # noqa: E501
        return self.__iscsi_clients

    @iscsi_clients.setter
    def iscsi_clients(self, iscsi_clients):

        self.__iscsi_clients = iscsi_clients

    @property
    def vm_attachments(self):
        """`{ list[storage.v4.config.VmAttachment] }`
            \nList of file server VMs associated with the file server. This is a read-only field.
        """ # noqa: E501
        return self.__vm_attachments

    @vm_attachments.setter
    def vm_attachments(self, vm_attachments):

        self.__vm_attachments = vm_attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesVolumeGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesVolumeGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

