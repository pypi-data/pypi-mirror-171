{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://truefoundry.com/v1/component.schema.json",
  "title": "Open Application Model Containerized Workload JSON Schema",
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string",
      "description": "The specific version of the Open Application Model specification in use. This version of the specification covers apiVersions in core.oam.dev/v1alpha2."
    },
    "kind": {
      "type": "string",
      "description": "must be ContainerizedWorkload.",
      "enum": [
        "Component"
      ]
    },
    "metadata": {
      "type": "object",
      "description": "ContainerizedWorkload metadata.",
      "properties": {
        "name": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "description": "A set of string key/value pairs used as arbitrary labels on this workload.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "annotations": {
          "type": "object",
          "description": "A set of string key/value pairs used as arbitrary annotations on this workload.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "spec": {
      "type": "object",
      "properties": {
        "workloadType": {
          "type": "string",
          "description": "A succinct, semantically meaningful descriptor of the component's runtime profile.",
          "enum": [
            "Server"
          ]
        },
        "name": {
          "type": "string",
          "description": "The container's name. Must be unique per component.",
          "pattern": "^[a-zA-Z0-9-]{5,30}$",
          "errorMessage": "Name should be a string of length 5-60 and can contain alphanumerics and - only."
        },
        "workspace": {
          "type": "string",
          "description": "The container's name. Must be unique per component."
        },
        "osType": {
          "type": "string",
          "description": "The OS required to host (all of) the component's containers (since containers share a kernel with the underlying host).",
          "enum": [
            "linux"
          ]
        },
        "arch": {
          "type": "string",
          "description": "The CPU architecture required to host (all of) the component's containers (since containers share physical hardware with the underlying host).",
          "enum": [
            "amd64"
          ]
        },
        "container": {
          "type": "object",
          "description": "The runtime configuration necessary to run a containerized workload for this component.",
          "properties": {
            "resources": {
              "type": "object",
              "description": "Resources required by the container.",
              "properties": {
                "cpu": {
                  "description": "Specifies the attributes of the cpu resource required for the container.",
                  "type": "object",
                  "properties": {
                    "required": {
                      "type": "number",
                      "description": "The minimum number of logical cpus required for running this container."
                    }
                  }
                },
                "gpu": {
                  "description": "Specifies the attributes of the gpu resource required for the container.",
                  "type": "object",
                  "properties": {
                    "limit": {
                      "type": "number",
                      "description": "The number of gpus required for running this container."
                    }
                  }
                },
                "memory": {
                  "description": "Specifies the attributes of the memory resource required for the container.",
                  "type": "object",
                  "properties": {
                    "required": {
                      "type": "number",
                      "description": "The minimum amount of memory in MB required for running this container. The value should be a positive integer, greater than zero."
                    }
                  }
                }
              },
              "required": [
                "cpu",
                "memory"
              ]
            },
            "cmd": {
              "type": "string",
              "items": {
                "type": "string"
              }
            },
            "args": {
              "type": "string",
              "items": {
                "type": "string"
              }
            },
            "env": {
              "description": "Environment variables",
              "type": "array",
              "items": {
                "type": "object",
                "description": "a name/value pair",
                "properties": {
                  "name": {
                    "description": "The environment variable name. Must be unique per container.",
                    "type": "string",
                    "maxLength": 256,
                    "pattern": "^[a-zA-Z_][a-zA-Z0-9_]{0,256}$",
                    "errorMessage": "Env name can have a max length of 256, can contain alphanumerics and _ only and cannot start with a number."
                  },
                  "value": {
                    "description": "The environment variable value. If this is not supplied, fromParam must be supplied",
                    "type": "string",
                    "$comment": "POSIX may dictate a max length on this",
                    "maxLength": 2048
                  }
                },
                "required": [
                  "name",
                  "value"
                ],
                "additionalProperties": false
              }
            },
            "ports": {
              "description": "Ports exposed by the container.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "containerPort": {
                    "description": "The port number. Must be unique per container.",
                    "type": "integer"
                  },
                  "protocol": {
                    "description": "Indicates the transport layer protocol used by the server listening on the port.",
                    "type": "string",
                    "enum": [
                      "TCP",
                      "UDP"
                    ]
                  }
                },
                "required": [
                  "containerPort",
                  "protocol"
                ],
                "additionalProperties": false
              }
            },
            "livenessProbe": {
              "description": "Instructions for assessing whether the container is alive.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/healthProbe"
              }
            },
            "readinessProbe": {
              "description": "Instructions for assessing whether the container is in a suitable state to serve traffic.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/healthProbe"
              }
            },
            "injectApiKeyInEnv": {
              "description": "Boolean to indicate if TrueFoundry API key needs to be inserted to service env",
              "type": "boolean"
            }
          },
          "required": [
            "resources",
            "ports",
            "env"
          ],
          "additionalProperties": false
        },
        "traits": {
          "description": "Traits of the component.",
          "type": "object",
          "properties": {
            "scale": {
              "type": "object",
              "properties": {
                "replicas": {
                  "type": "number"
                }
              }
            }
          },
          "required": [
            "scale"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "workloadType",
        "name",
        "workspace",
        "osType",
        "arch",
        "container",
        "traits"
      ],
      "additionalProperties": false
    }
  },
  "required": [
    "apiVersion",
    "kind",
    "spec"
  ],
  "additionalProperties": false,
  "definitions": {
    "healthProbe": {
      "description": "Health Probe describes how a probing operation is to be executed as a way of determining the health of a component.",
      "type": "object",
      "properties": {
        "exec": {
          "description": "Instructions for assessing container health by executing a command. Either this attribute or the httpGet attribute or the tcpSocket attribute MUST be specified. This attribute is mutually exclusive with both the httpGet attribute and the tcpSocket attribute.",
          "type": "object",
          "properties": {
            "command": {
              "description": "A command to be executed inside the container to assess its health. Each space delimited token of the command is a separate array element. Commands exiting 0 are considered to be successful probes, whilst all other exit codes are considered failures.",
              "type": "string",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "httpGet": {
          "description": "Instructions for assessing container health by executing an HTTP GET request. Either this attribute or the exec attribute or the tcpSocket attribute MUST be specified. This attribute is mutually exclusive with both the exec attribute and the tcpSocket attribute.",
          "type": "object",
          "properties": {
            "path": {
              "description": "The endpoint, relative to the port, to which the HTTP GET request should be directed.",
              "type": "string"
            },
            "port": {
              "description": "The TCP socket within the container to which the HTTP GET request should be directed.",
              "type": "integer"
            },
            "httpHeaders": {
              "type": "object",
              "description": "Optional HTTP headers.",
              "properties": {
                "name": {
                  "description": "An HTTP header name. This must be unique per HTTP GET-based probe.",
                  "type": "string"
                },
                "value": {
                  "description": "An HTTP header value.",
                  "type": "string"
                }
              },
              "required": [
                "value",
                "name"
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "path",
            "port"
          ],
          "additionalProperties": false
        },
        "tcpSocket": {
          "description": "Instructions for assessing container health by probing a TCP socket. Either this attribute or the exec attribute or the httpGet attribute MUST be specified. This attribute is mutually exclusive with both the exec attribute and the httpGet attribute.",
          "type": "object",
          "properties": {
            "port": {
              "description": "The TCP socket within the container that should be probed to assess container health.",
              "type": "integer"
            }
          },
          "required": [
            "port"
          ],
          "additionalProperties": false
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container is started before the first probe is initiated.",
          "type": "integer",
          "default": 0
        },
        "periodSeconds": {
          "description": "How often, in seconds, to execute the probe.",
          "type": "integer",
          "default": 10
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out.",
          "type": "integer",
          "default": 1
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
          "type": "integer",
          "default": 1
        },
        "failureThreshold": {
          "description": "Number of consecutive failures required to determine the container is not alive (liveness probe) or not ready (readiness probe).",
          "type": "integer",
          "default": 3
        }
      }
    }
  }
}
