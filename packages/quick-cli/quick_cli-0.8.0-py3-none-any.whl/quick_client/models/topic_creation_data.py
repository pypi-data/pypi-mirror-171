# coding: utf-8

"""
    Quick Manager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from quick_client.configuration import Configuration


class TopicCreationData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'write_type': 'TopicWriteType',
        'value_schema': 'GatewaySchema',
        'key_schema': 'GatewaySchema',
        'retention_time': 'str',
        'range_field': 'str'
    }

    attribute_map = {
        'write_type': 'writeType',
        'value_schema': 'valueSchema',
        'key_schema': 'keySchema',
        'retention_time': 'retentionTime',
        'range_field': 'rangeField'
    }

    def __init__(self, write_type=None, value_schema=None, key_schema=None, retention_time=None, range_field=None, local_vars_configuration=None):  # noqa: E501
        """TopicCreationData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._write_type = None
        self._value_schema = None
        self._key_schema = None
        self._retention_time = None
        self._range_field = None
        self.discriminator = None

        if write_type is not None:
            self.write_type = write_type
        if value_schema is not None:
            self.value_schema = value_schema
        if key_schema is not None:
            self.key_schema = key_schema
        if retention_time is not None:
            self.retention_time = retention_time
        if range_field is not None:
            self.range_field = range_field

    @property
    def write_type(self):
        """Gets the write_type of this TopicCreationData.  # noqa: E501


        :return: The write_type of this TopicCreationData.  # noqa: E501
        :rtype: TopicWriteType
        """
        return self._write_type

    @write_type.setter
    def write_type(self, write_type):
        """Sets the write_type of this TopicCreationData.


        :param write_type: The write_type of this TopicCreationData.  # noqa: E501
        :type: TopicWriteType
        """

        self._write_type = write_type

    @property
    def value_schema(self):
        """Gets the value_schema of this TopicCreationData.  # noqa: E501


        :return: The value_schema of this TopicCreationData.  # noqa: E501
        :rtype: GatewaySchema
        """
        return self._value_schema

    @value_schema.setter
    def value_schema(self, value_schema):
        """Sets the value_schema of this TopicCreationData.


        :param value_schema: The value_schema of this TopicCreationData.  # noqa: E501
        :type: GatewaySchema
        """

        self._value_schema = value_schema

    @property
    def key_schema(self):
        """Gets the key_schema of this TopicCreationData.  # noqa: E501


        :return: The key_schema of this TopicCreationData.  # noqa: E501
        :rtype: GatewaySchema
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this TopicCreationData.


        :param key_schema: The key_schema of this TopicCreationData.  # noqa: E501
        :type: GatewaySchema
        """

        self._key_schema = key_schema

    @property
    def retention_time(self):
        """Gets the retention_time of this TopicCreationData.  # noqa: E501


        :return: The retention_time of this TopicCreationData.  # noqa: E501
        :rtype: str
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this TopicCreationData.


        :param retention_time: The retention_time of this TopicCreationData.  # noqa: E501
        :type: str
        """

        self._retention_time = retention_time

    @property
    def range_field(self):
        """Gets the range_field of this TopicCreationData.  # noqa: E501


        :return: The range_field of this TopicCreationData.  # noqa: E501
        :rtype: str
        """
        return self._range_field

    @range_field.setter
    def range_field(self, range_field):
        """Sets the range_field of this TopicCreationData.


        :param range_field: The range_field of this TopicCreationData.  # noqa: E501
        :type: str
        """

        self._range_field = range_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicCreationData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TopicCreationData):
            return True

        return self.to_dict() != other.to_dict()
