# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.groups.Attribute import Attribute  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class GroupsQueryRequest(object):
    """GroupsQueryRequest - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'entity_type': 'str',
        'group_member_sort_attribute': 'str',
        'group_member_sort_order': 'str',
        'group_member_count': 'int',
        'group_member_offset': 'int',
        'filter_criteria': 'str',
        'group_member_attributes': 'list[files.v4.groups.Attribute]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_type': 'entityType',
        'group_member_sort_attribute': 'groupMemberSortAttribute',
        'group_member_sort_order': 'groupMemberSortOrder',
        'group_member_count': 'groupMemberCount',
        'group_member_offset': 'groupMemberOffset',
        'filter_criteria': 'filterCriteria',
        'group_member_attributes': 'groupMemberAttributes',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_type=None, group_member_sort_attribute=None, group_member_sort_order=None, group_member_count=None, group_member_offset=None, filter_criteria=None, group_member_attributes=None, *args, **kwargs):  # noqa: E501
        """GroupsQueryRequest - a model defined in Swagger
            \nAlerts group request
        """
        self.__entity_type = None
        self.__group_member_sort_attribute = None
        self.__group_member_sort_order = None
        self.__group_member_count = None
        self.__group_member_offset = None
        self.__filter_criteria = None
        self.__group_member_attributes = None
        self.discriminator = None
        if entity_type is not None:
            self.__entity_type = entity_type
        if group_member_sort_attribute is not None:
            self.__group_member_sort_attribute = group_member_sort_attribute
        if group_member_sort_order is not None:
            self.__group_member_sort_order = group_member_sort_order
        if group_member_count is not None:
            self.__group_member_count = group_member_count
        if group_member_offset is not None:
            self.__group_member_offset = group_member_offset
        if filter_criteria is not None:
            self.__filter_criteria = filter_criteria
        if group_member_attributes is not None:
            self.__group_member_attributes = group_member_attributes
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.groups.GroupsQueryRequest'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.groups.GroupsQueryRequest'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def entity_type(self):
        """`{ str }`
            \nEntity type to get the alerts.
        """ # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def group_member_sort_attribute(self):
        """`{ str }`
            \nAttribute name for sorting the results in group query response.
        """ # noqa: E501
        return self.__group_member_sort_attribute

    @group_member_sort_attribute.setter
    def group_member_sort_attribute(self, group_member_sort_attribute):

        self.__group_member_sort_attribute = group_member_sort_attribute

    @property
    def group_member_sort_order(self):
        """`{ str }`
            \nAttribute name for ordering the results in group query response.
        """ # noqa: E501
        return self.__group_member_sort_order

    @group_member_sort_order.setter
    def group_member_sort_order(self, group_member_sort_order):

        self.__group_member_sort_order = group_member_sort_order

    @property
    def group_member_count(self):
        """`{ int }`
            \nCount of the entries requested in response.
        """ # noqa: E501
        return self.__group_member_count

    @group_member_count.setter
    def group_member_count(self, group_member_count):
        if group_member_count is not None and group_member_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `group_member_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__group_member_count = group_member_count

    @property
    def group_member_offset(self):
        """`{ int }`
            \nOffset of the entries returned in group query response.
        """ # noqa: E501
        return self.__group_member_offset

    @group_member_offset.setter
    def group_member_offset(self, group_member_offset):
        if group_member_offset is not None and group_member_offset < 0:  # noqa: E501
            raise ValueError("Invalid value for `group_member_offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__group_member_offset = group_member_offset

    @property
    def filter_criteria(self):
        """`{ str }`
            \nFilter criteria for entries in group query response.
        """ # noqa: E501
        return self.__filter_criteria

    @filter_criteria.setter
    def filter_criteria(self, filter_criteria):

        self.__filter_criteria = filter_criteria

    @property
    def group_member_attributes(self):
        """`{ list[files.v4.groups.Attribute] }`
            \nAttributes of entries returned in group query response.
        """ # noqa: E501
        return self.__group_member_attributes

    @group_member_attributes.setter
    def group_member_attributes(self, group_member_attributes):

        self.__group_member_attributes = group_member_attributes

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupsQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

