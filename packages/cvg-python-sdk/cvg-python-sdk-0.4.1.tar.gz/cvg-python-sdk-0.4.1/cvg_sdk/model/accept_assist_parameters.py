# coding: utf-8

"""
    VIER Cognitive Voice Assist API

    With the CVG Assist API you can use live transcriptions of customers to provide in-call agent assistance.  CVG Assist API requires some integration with contact center software to link ACD phone number, dialogID und agentID. The call has to be bridged to the contact center head number of e.g. a hotline plus an extension. The contact center then has to invoke `/assist/accept` with the phone number.  Integration with VIER Engage is available. Ask us if you are interested in integrating other contact center software.  CVG Assist API is part of the VIER Cognitive Voice Gateway.  For more details, see [our documentation](/docs/Essential-Use-Cases.html#agent-assistance).  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class AcceptAssistParameters(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "phoneNumber",
            "resellerToken",
            "callbackUrl",
        }
        
        class properties:
            resellerToken = schemas.StrSchema
            phoneNumber = schemas.StrSchema
            callbackUrl = schemas.StrSchema
            authToken = schemas.StrSchema
            __annotations__ = {
                "resellerToken": resellerToken,
                "phoneNumber": phoneNumber,
                "callbackUrl": callbackUrl,
                "authToken": authToken,
            }
    
    phoneNumber: MetaOapg.properties.phoneNumber
    resellerToken: MetaOapg.properties.resellerToken
    callbackUrl: MetaOapg.properties.callbackUrl
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resellerToken"]) -> MetaOapg.properties.resellerToken: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authToken"]) -> MetaOapg.properties.authToken: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["resellerToken", "phoneNumber", "callbackUrl", "authToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resellerToken"]) -> MetaOapg.properties.resellerToken: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callbackUrl"]) -> MetaOapg.properties.callbackUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authToken"]) -> typing.Union[MetaOapg.properties.authToken, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resellerToken", "phoneNumber", "callbackUrl", "authToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, ],
        resellerToken: typing.Union[MetaOapg.properties.resellerToken, str, ],
        callbackUrl: typing.Union[MetaOapg.properties.callbackUrl, str, ],
        authToken: typing.Union[MetaOapg.properties.authToken, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AcceptAssistParameters':
        return super().__new__(
            cls,
            *args,
            phoneNumber=phoneNumber,
            resellerToken=resellerToken,
            callbackUrl=callbackUrl,
            authToken=authToken,
            _configuration=_configuration,
            **kwargs,
        )
