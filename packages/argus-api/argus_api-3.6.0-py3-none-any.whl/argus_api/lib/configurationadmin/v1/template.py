"""Autogenerated API"""
from argus_api.session import get_session
from typing import TYPE_CHECKING, Optional
if TYPE_CHECKING:
    from argus_api.session import ArgusAPISession
from argus_api.utils import deprecated_alias


def add_template_comment(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Add a comment to a configuration template (INTERNAL)
    
    :param int id: ID of template to add comment to
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}/comment".format(id=id)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        data=body or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def create_template(
    name: str = None,
    shortName: str = None,
    mnemonic: str = None,
    configuration: str = None,
    properties: dict = None,
    information: str = None,
    dependsOnID: int = None,
    codeProfile: str = None,
    startupIndex: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Create new configuration template (INTERNAL)
    
    :param str name: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param str shortName: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param str mnemonic: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param str configuration: format\:xml
    :param dict properties: 
    :param str information: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param int dependsOnID: 
    :param str codeProfile: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param int startupIndex: Specify the startup order of this component \(default 0\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send mnemonic if the argument was provided, dont send null values
    if mnemonic is not None:
        body.update({"mnemonic": mnemonic})
    # Only send configuration if the argument was provided, dont send null values
    if configuration is not None:
        body.update({"configuration": configuration})
    # Only send properties if the argument was provided, dont send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send information if the argument was provided, dont send null values
    if information is not None:
        body.update({"information": information})
    # Only send dependsOnID if the argument was provided, dont send null values
    if dependsOnID is not None:
        body.update({"dependsOnID": dependsOnID})
    # Only send codeProfile if the argument was provided, dont send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send startupIndex if the argument was provided, dont send null values
    if startupIndex is not None:
        body.update({"startupIndex": startupIndex})

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def delete_template(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Delete configuration template (INTERNAL)
    
    :param int id: ID of template to delete
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}".format(id=id)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.delete(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def duplicate_template(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Create a duplicate of a configuration template (INTERNAL)
    
    :param int id: ID of template to duplicate
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}/duplicate".format(id=id)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def list_templates(
    search: str = None,
    orderDesc: bool = None,
    limit: int = 25,
    orderBy: str = "name",
    includeComments: bool = None,
    includeDeleted: bool = None,
    offset: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """List configuration templates (INTERNAL)
    
    :param str search: 
    :param bool orderDesc: Sort results descending
    :param int limit: 
    :param str orderBy: Sort results
    :param bool includeComments: 
    :param bool includeDeleted: 
    :param int offset: 
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template".format(limit=limit,
        orderBy=orderBy,
        search=search,
        includeComments=includeComments,
        includeDeleted=includeDeleted,
        offset=offset,
        orderDesc=orderDesc)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    
    # Only send orderBy if the argument was provided, dont send null values
    if orderBy is not None:
        query_parameters.update({"orderBy": orderBy})
    
    # Only send search if the argument was provided, dont send null values
    if search is not None:
        query_parameters.update({"search": search})
    
    # Only send includeComments if the argument was provided, dont send null values
    if includeComments is not None:
        query_parameters.update({"includeComments": includeComments})
    
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        query_parameters.update({"includeDeleted": includeDeleted})
    
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({"offset": offset})
    
    # Only send orderDesc if the argument was provided, dont send null values
    if orderDesc is not None:
        query_parameters.update({"orderDesc": orderDesc})
    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def search_templates(
    limit: int = None,
    offset: int = None,
    includeDeleted: bool = None,
    includeFlags: int = None,
    excludeFlags: int = None,
    subCriteria: dict = None,
    exclude: bool = None,
    required: bool = None,
    codeProfile: str = None,
    keywords: str = None,
    template: str = None,
    dependingOnID: int = None,
    sortBy: str = None,
    includeComments: bool = None,
    includeConfiguration: bool = True,
    includeProperties: bool = True,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Search configuration templates (INTERNAL)
    
    :param int limit: Max number of results.
    :param int offset: Skip the first \(offset\) objects. By default\, return result from first object.
    :param bool includeDeleted: Set to true to include deleted objects. By default\, exclude deleted objects.
    :param int includeFlags: Only include objects which have includeFlags set.
    :param int excludeFlags: Exclude objects which have excludeFlags set.
    :param list subCriteria: Set additional criterias which are applied using a logical OR.
    :param bool exclude: Only relevant for subcriteria. If set to true\, objects matching this subcriteria object will be excluded.
    :param bool required: Only relevant for subcriteria. If set to true\, objects matching this subcriteria are required \(AND\-ed together with parent criteria\).
    :param list codeProfile: If true\, filter on templates having any of these code profiles.
    :param list keywords: If true\, filter on templates where name matches these keywords.
    :param list template: If set\, filter on templates by ID or shortname.
    :param list dependingOnID: If set\, filter on templates set to depend on any of the given template IDs.
    :param list sortBy: List of properties to sort by \(prefix with \"\-\" to sort descending\).
    :param bool includeComments: If true\, also include comments on output. \(default false\)
    :param bool includeConfiguration: If true\, also include configuration on output. \(default true\)
    :param bool includeProperties: If true\, also include properties on output. \(default true\)
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/search".format()

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        body.update({"limit": limit})
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        body.update({"offset": offset})
    # Only send includeDeleted if the argument was provided, dont send null values
    if includeDeleted is not None:
        body.update({"includeDeleted": includeDeleted})
    # Only send includeFlags if the argument was provided, dont send null values
    if includeFlags is not None:
        body.update({"includeFlags": includeFlags})
    # Only send excludeFlags if the argument was provided, dont send null values
    if excludeFlags is not None:
        body.update({"excludeFlags": excludeFlags})
    # Only send subCriteria if the argument was provided, dont send null values
    if subCriteria is not None:
        body.update({"subCriteria": subCriteria})
    # Only send exclude if the argument was provided, dont send null values
    if exclude is not None:
        body.update({"exclude": exclude})
    # Only send required if the argument was provided, dont send null values
    if required is not None:
        body.update({"required": required})
    # Only send codeProfile if the argument was provided, dont send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send keywords if the argument was provided, dont send null values
    if keywords is not None:
        body.update({"keywords": keywords})
    # Only send template if the argument was provided, dont send null values
    if template is not None:
        body.update({"template": template})
    # Only send dependingOnID if the argument was provided, dont send null values
    if dependingOnID is not None:
        body.update({"dependingOnID": dependingOnID})
    # Only send includeComments if the argument was provided, dont send null values
    if includeComments is not None:
        body.update({"includeComments": includeComments})
    # Only send includeConfiguration if the argument was provided, dont send null values
    if includeConfiguration is not None:
        body.update({"includeConfiguration": includeConfiguration})
    # Only send includeProperties if the argument was provided, dont send null values
    if includeProperties is not None:
        body.update({"includeProperties": includeProperties})
    # Only send sortBy if the argument was provided, dont send null values
    if sortBy is not None:
        body.update({"sortBy": sortBy})

    query_parameters = {}

    response = session.post(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def template_revisions(
    id: int,
    limit: int = 25,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """List revisions of configuration template (INTERNAL)
    
    :param int id: ID of template
    :param int limit: Max number of revisions to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}/revisions".format(limit=limit,
        id=id)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({"limit": limit})
    

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def update_template(
    id: int,
    name: str = None,
    mnemonic: str = None,
    shortName: str = None,
    configuration: str = None,
    properties: dict = None,
    information: str = None,
    dependsOnID: int = None,
    codeProfile: str = None,
    startupIndex: int = None,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Update configuration template (INTERNAL)
    
    :param int id: ID of template to update
    :param str name: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param str mnemonic: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param str shortName: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param str configuration: format\:xml
    :param dict properties: 
    :param str information: \[\\s\\w\\\{\\\}\\\$\\\-\\\(\\\)\\.\\\[\\\]\"\\\'\_\/\\\\\,\\\*\\\+\\\#\:\@\!\?\;\=\]\*
    :param int dependsOnID: 
    :param str codeProfile: \[a\-zA\-Z0\-9\_\\\-\\.\]\*
    :param int startupIndex: If set\, change the startup order of this component
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}".format(id=id)

    session = api_session or get_session()
    headers = {}

    body = body or {}
    # Only send id if the argument was provided, dont send null values
    if id is not None:
        body.update({"id": id})
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({"name": name})
    # Only send mnemonic if the argument was provided, dont send null values
    if mnemonic is not None:
        body.update({"mnemonic": mnemonic})
    # Only send shortName if the argument was provided, dont send null values
    if shortName is not None:
        body.update({"shortName": shortName})
    # Only send configuration if the argument was provided, dont send null values
    if configuration is not None:
        body.update({"configuration": configuration})
    # Only send properties if the argument was provided, dont send null values
    if properties is not None:
        body.update({"properties": properties})
    # Only send information if the argument was provided, dont send null values
    if information is not None:
        body.update({"information": information})
    # Only send dependsOnID if the argument was provided, dont send null values
    if dependsOnID is not None:
        body.update({"dependsOnID": dependsOnID})
    # Only send codeProfile if the argument was provided, dont send null values
    if codeProfile is not None:
        body.update({"codeProfile": codeProfile})
    # Only send startupIndex if the argument was provided, dont send null values
    if startupIndex is not None:
        body.update({"startupIndex": startupIndex})

    query_parameters = {}

    response = session.put(
        route,
        params=query_parameters or None,
        json=body,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response


def view_template(
    id: int,
    json: bool = True,
    verify: Optional[bool] = None,
    proxies: Optional[dict] = None,
    apiKey: Optional[str] = None,
    authentication: Optional[dict] = None,
    server_url: Optional[str] = None,
    body: Optional[dict] = None,
    api_session: Optional["ArgusAPISession"] = None,
) -> dict:
    """Fetch configuration template (INTERNAL)
    
    :param int id: ID of template to fetch
    :param json: return the response's body as a ``dict`` parsed from json. ``True`` by
      default. If set to false, the raw ``requests.Response`` object will be returned.
    :param verify: path to a certificate bundle or boolean indicating whether SSL
      verification should be performed.
    :param apiKey: Argus API key.
    :param authentication: authentication override
    :param server_url: API base URL override
    :param body: body of the request. other parameters will override keys defined in the body.
    :param api_session: session to use for this request. If not set, the global session will be used.
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationErrorException: on 412
    :raises ArgusException: on other status codes
    
    :returns: dictionary translated from JSON
    """

    route = "/configurationadmin/v1/template/{id}".format(id=id)

    session = api_session or get_session()
    headers = {}

    body = body or {}

    query_parameters = {}

    response = session.get(
        route,
        params=query_parameters or None,
        verify=verify,
        apiKey=apiKey,
        authentication=authentication,
        server_url=server_url,
        headers=headers,
        proxies=proxies,
    )
    return response.json() if json else response

#: **DEPRECATED** : ``add_comment_2`` is an alias for ``add_template_comment``. Exists
#: only for backward compatibility - **do not use** - use ``add_template_comment`` instead.
add_comment_2 = deprecated_alias("add_comment_2")(add_template_comment)
#: **DEPRECATED** : ``create_4`` is an alias for ``create_template``. Exists
#: only for backward compatibility - **do not use** - use ``create_template`` instead.
create_4 = deprecated_alias("create_4")(create_template)
#: **DEPRECATED** : ``delete_3`` is an alias for ``delete_template``. Exists
#: only for backward compatibility - **do not use** - use ``delete_template`` instead.
delete_3 = deprecated_alias("delete_3")(delete_template)
#: **DEPRECATED** : ``duplicate_3`` is an alias for ``duplicate_template``. Exists
#: only for backward compatibility - **do not use** - use ``duplicate_template`` instead.
duplicate_3 = deprecated_alias("duplicate_3")(duplicate_template)
#: **DEPRECATED** : ``list_4`` is an alias for ``list_templates``. Exists
#: only for backward compatibility - **do not use** - use ``list_templates`` instead.
list_4 = deprecated_alias("list_4")(list_templates)
#: **DEPRECATED** : ``search_4`` is an alias for ``search_templates``. Exists
#: only for backward compatibility - **do not use** - use ``search_templates`` instead.
search_4 = deprecated_alias("search_4")(search_templates)
#: **DEPRECATED** : ``revisions_1`` is an alias for ``template_revisions``. Exists
#: only for backward compatibility - **do not use** - use ``template_revisions`` instead.
revisions_1 = deprecated_alias("revisions_1")(template_revisions)
#: **DEPRECATED** : ``update_3`` is an alias for ``update_template``. Exists
#: only for backward compatibility - **do not use** - use ``update_template`` instead.
update_3 = deprecated_alias("update_3")(update_template)
#: **DEPRECATED** : ``view_2`` is an alias for ``view_template``. Exists
#: only for backward compatibility - **do not use** - use ``view_template`` instead.
view_2 = deprecated_alias("view_2")(view_template)