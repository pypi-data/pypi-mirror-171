# coding: utf-8

"""
    VIER Cognitive Voice Health API

    CVG health  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class ProjectHealthEvent(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "count",
            "type",
            "status",
        }
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'AudioPlaybackFailed': AudioPlaybackFailed,
                    'EndpointCall': EndpointCall,
                    'EndpointCallFailed': EndpointCallFailed,
                    'InternalError': InternalError,
                    'ProvisioningTimedOut': ProvisioningTimedOut,
                    'Synthesis': Synthesis,
                    'SynthesisFailed': SynthesisFailed,
                    'Transcription': Transcription,
                    'TranscriptionFailed': TranscriptionFailed,
                }
            }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Transcription": "TRANSCRIPTION",
                        "Synthesis": "SYNTHESIS",
                        "TranscriptionFailed": "TRANSCRIPTION_FAILED",
                        "SynthesisFailed": "SYNTHESIS_FAILED",
                        "AudioPlaybackFailed": "AUDIO_PLAYBACK_FAILED",
                        "EndpointCall": "ENDPOINT_CALL",
                        "EndpointCallFailed": "ENDPOINT_CALL_FAILED",
                        "ProvisioningTimedOut": "PROVISIONING_TIMED_OUT",
                        "InternalError": "INTERNAL_ERROR",
                    }
                
                @schemas.classproperty
                def TRANSCRIPTION(cls):
                    return cls("Transcription")
                
                @schemas.classproperty
                def SYNTHESIS(cls):
                    return cls("Synthesis")
                
                @schemas.classproperty
                def TRANSCRIPTION_FAILED(cls):
                    return cls("TranscriptionFailed")
                
                @schemas.classproperty
                def SYNTHESIS_FAILED(cls):
                    return cls("SynthesisFailed")
                
                @schemas.classproperty
                def AUDIO_PLAYBACK_FAILED(cls):
                    return cls("AudioPlaybackFailed")
                
                @schemas.classproperty
                def ENDPOINT_CALL(cls):
                    return cls("EndpointCall")
                
                @schemas.classproperty
                def ENDPOINT_CALL_FAILED(cls):
                    return cls("EndpointCallFailed")
                
                @schemas.classproperty
                def PROVISIONING_TIMED_OUT(cls):
                    return cls("ProvisioningTimedOut")
                
                @schemas.classproperty
                def INTERNAL_ERROR(cls):
                    return cls("InternalError")
            count = schemas.IntSchema
        
            @staticmethod
            def status() -> typing.Type['HealthEventStatus']:
                return HealthEventStatus
            __annotations__ = {
                "type": type,
                "count": count,
                "status": status,
            }
    
    count: MetaOapg.properties.count
    type: MetaOapg.properties.type
    status: 'HealthEventStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'HealthEventStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "count", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'HealthEventStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "count", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        status: 'HealthEventStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectHealthEvent':
        return super().__new__(
            cls,
            *args,
            count=count,
            type=type,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.audio_playback_failed import AudioPlaybackFailed
from cvg_sdk.model.endpoint_call import EndpointCall
from cvg_sdk.model.endpoint_call_failed import EndpointCallFailed
from cvg_sdk.model.health_event_status import HealthEventStatus
from cvg_sdk.model.internal_error import InternalError
from cvg_sdk.model.provisioning_timed_out import ProvisioningTimedOut
from cvg_sdk.model.synthesis import Synthesis
from cvg_sdk.model.synthesis_failed import SynthesisFailed
from cvg_sdk.model.transcription import Transcription
from cvg_sdk.model.transcription_failed import TranscriptionFailed
