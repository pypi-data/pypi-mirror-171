# coding: utf-8

"""
    VIER Cognitive Voice Recording API

    With the Recording API, client applications can manage recordings that have previously been created using the Call or Assist APIs.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class TranscriptV1(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'version': {
                    '1': TranscriptV1,
                }
            }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "entries",
                    "dialogId",
                }
                
                class properties:
                    dialogId = schemas.StrSchema
                    
                    
                    class entries(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['TranscriptEntry']:
                                return TranscriptEntry
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['TranscriptEntry'], typing.List['TranscriptEntry']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'entries':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'TranscriptEntry':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "dialogId": dialogId,
                        "entries": entries,
                    }
            
            entries: MetaOapg.properties.entries
            dialogId: MetaOapg.properties.dialogId
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["dialogId"]) -> MetaOapg.properties.dialogId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["dialogId", "entries", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["dialogId"]) -> MetaOapg.properties.dialogId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dialogId", "entries", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                entries: typing.Union[MetaOapg.properties.entries, list, tuple, ],
                dialogId: typing.Union[MetaOapg.properties.dialogId, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    entries=entries,
                    dialogId=dialogId,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Transcript,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TranscriptV1':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.transcript import Transcript
from cvg_sdk.model.transcript_entry import TranscriptEntry
from cvg_sdk.model.transcript_v1 import TranscriptV1
