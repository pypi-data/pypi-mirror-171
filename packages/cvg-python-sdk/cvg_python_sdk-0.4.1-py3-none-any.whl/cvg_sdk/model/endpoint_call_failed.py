# coding: utf-8

"""
    VIER Cognitive Voice Health API

    CVG health  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class EndpointCallFailed(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    There was an error while calling an endpoint.

Note that in some cases, error responses don't produce a health event because they can't be linked to
a project / dialog.
    """


    class MetaOapg:
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'AudioPlaybackFailed': AudioPlaybackFailed,
                    'EndpointCall': EndpointCall,
                    'EndpointCallFailed': EndpointCallFailed,
                    'InternalError': InternalError,
                    'ProvisioningTimedOut': ProvisioningTimedOut,
                    'Synthesis': Synthesis,
                    'SynthesisFailed': SynthesisFailed,
                    'Transcription': Transcription,
                    'TranscriptionFailed': TranscriptionFailed,
                }
            }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "api",
                    "url",
                }
                
                class properties:
                    url = schemas.StrSchema
                    
                    
                    class api(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "CALL": "CALL",
                                "BOT": "BOT",
                                "DIALOG": "DIALOG",
                                "PROVISIONING": "PROVISIONING",
                                "ASSIST": "ASSIST",
                                "ASSIST_CLIENT": "ASSIST_CLIENT",
                                "HEALTH": "HEALTH",
                                "RECORDING": "RECORDING",
                                "WEBHOOK": "WEBHOOK",
                            }
                        
                        @schemas.classproperty
                        def CALL(cls):
                            return cls("CALL")
                        
                        @schemas.classproperty
                        def BOT(cls):
                            return cls("BOT")
                        
                        @schemas.classproperty
                        def DIALOG(cls):
                            return cls("DIALOG")
                        
                        @schemas.classproperty
                        def PROVISIONING(cls):
                            return cls("PROVISIONING")
                        
                        @schemas.classproperty
                        def ASSIST(cls):
                            return cls("ASSIST")
                        
                        @schemas.classproperty
                        def ASSIST_CLIENT(cls):
                            return cls("ASSIST_CLIENT")
                        
                        @schemas.classproperty
                        def HEALTH(cls):
                            return cls("HEALTH")
                        
                        @schemas.classproperty
                        def RECORDING(cls):
                            return cls("RECORDING")
                        
                        @schemas.classproperty
                        def WEBHOOK(cls):
                            return cls("WEBHOOK")
                    message = schemas.StrSchema
                    __annotations__ = {
                        "url": url,
                        "api": api,
                        "message": message,
                    }
            
            api: MetaOapg.properties.api
            url: MetaOapg.properties.url
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["api"]) -> MetaOapg.properties.api: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "api", "message", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["api"]) -> MetaOapg.properties.api: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "api", "message", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                api: typing.Union[MetaOapg.properties.api, str, ],
                url: typing.Union[MetaOapg.properties.url, str, ],
                message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    api=api,
                    url=url,
                    message=message,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                ProjectHealthEvent,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EndpointCallFailed':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.audio_playback_failed import AudioPlaybackFailed
from cvg_sdk.model.endpoint_call import EndpointCall
from cvg_sdk.model.endpoint_call_failed import EndpointCallFailed
from cvg_sdk.model.internal_error import InternalError
from cvg_sdk.model.project_health_event import ProjectHealthEvent
from cvg_sdk.model.provisioning_timed_out import ProvisioningTimedOut
from cvg_sdk.model.synthesis import Synthesis
from cvg_sdk.model.synthesis_failed import SynthesisFailed
from cvg_sdk.model.transcription import Transcription
from cvg_sdk.model.transcription_failed import TranscriptionFailed
