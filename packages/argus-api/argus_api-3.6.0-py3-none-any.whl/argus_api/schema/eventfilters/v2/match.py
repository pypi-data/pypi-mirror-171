"""Autogenerated API schema"""
from argus_api import session


add_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Adds an match filter (DEV)', 'description': '', 'operationId': 'addMatchFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Add match filter request', 'required': False, 'schema': {'type': 'object', 'required': ['description', 'destinationIPAddresses', 'labels', 'name', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'index': {'type': 'int', 'position': 0, 'description': 'The index of the filter. Filters with lower index will be ran first. (default 5)', 'minimum': 0, 'maximum': 10, 'default': 5}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of the customer the filter belongs to. If customer is not set, this will create a global filter'}, 'matchCode': {'type': 'str', 'position': 0, 'description': 'Custom esper code for when the filter should match an event. Will be validated in the backend'}, 'minSeverity': {'type': 'str', 'position': 0, 'description': 'Only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'position': 0, 'description': 'Only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Only match events that have these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Only match events that does not have any of these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'protocol': {'type': 'str', 'position': 0, 'description': 'Only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'position': 0, 'description': 'Only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'position': 0, 'description': 'Only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'position': 0, 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourcePorts': {'type': 'list', 'position': 0, 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'destinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'destinationPorts': {'type': 'list', 'position': 0, 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourceOrDestinationPorts': {'type': 'list', 'position': 0, 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'location': {'type': 'list', 'position': 0, 'description': 'Only match events from the these locations, given by shortname or id', 'uniqueItems': True, 'items': {'type': 'string'}}, 'attackIdentifier': {'type': 'list', 'position': 0, 'description': 'Only match events with these attack identifiers, given by shortname or id', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Only match events connected to these alarms, given by id', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategory': {'type': 'list', 'position': 0, 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Only match events from these sensors, given by id', 'uniqueItems': True, 'items': {'type': 'int'}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Only match events which have these properties', 'additionalProperties': {'type': 'string'}}, 'transformCode': {'type': 'str', 'position': 0, 'description': 'Custom esper code for how the event will be transformed. Will be validated in the backend'}, 'newAggregationKey': {'type': 'str', 'position': 0, 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newSeverity': {'type': 'str', 'position': 0, 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'associatedCaseID': {'type': 'int', 'position': 0, 'description': 'Adds an associated case ID'}, 'newSourceAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'newDestinationAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'drop': {'type': 'bool', 'position': 0, 'description': 'If true, this event will be dropped (default false)', 'default': False}, 'noTransform': {'type': 'bool', 'position': 0, 'description': 'If true, this event will not be transformed (default false)', 'default': False}, 'continueAfterTransform': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will continue to look for new events after transform (default false)', 'default': False}, 'stopAfterNoMatch': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will stop looking for new matches after not matching (default false)', 'default': False}, 'changeAggregationKey': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey (default false)', 'default': False}, 'invertIp': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will switch the source and destination ip in the event (default false)', 'default': False}, 'labels': {'type': 'list', 'position': 0, 'description': 'A set of labels which can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'enabled': {'type': 'bool', 'position': 0, 'description': 'Whether or not the filter is enabled (default false)', 'default': False}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses'], 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'index': {'type': 'int', 'position': 0, 'description': 'The execution index'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number of this filter instance'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'filterType': {'type': 'str', 'position': 0, 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'matchCode': {'type': 'str', 'position': 0, 'description': 'The custom esper code for when the filter should match an event. Will only be included if requested'}, 'minSeverity': {'type': 'str', 'position': 0, 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'position': 0, 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Will only match events that have these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Will only match events that does not have any of these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'protocol': {'type': 'str', 'position': 0, 'description': 'Will only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'position': 0, 'description': 'Will only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'position': 0, 'description': 'Will only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'position': 0, 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourcePorts': {'type': 'list', 'position': 0, 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'destinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'destinationPorts': {'type': 'list', 'position': 0, 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourceOrDestinationPorts': {'type': 'list', 'position': 0, 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'locationID': {'type': 'list', 'position': 0, 'description': 'Will only match events from the these locations', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackIdentifier': {'type': 'list', 'position': 0, 'description': 'Will only match events with these attack identifiers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Will only match events connected to these alarms', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategoryID': {'type': 'list', 'position': 0, 'description': 'Will only match events belonging to these attack categories', 'uniqueItems': True, 'items': {'type': 'int'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Will only match events from these sensors', 'uniqueItems': True, 'items': {'type': 'int'}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Will only match events which have these properties', 'additionalProperties': {'type': 'string'}}, 'transformCode': {'type': 'str', 'position': 0, 'description': 'The custom esper code for how the event will be transformed. Will only be included if requested'}, 'newAggregationKey': {'type': 'str', 'position': 0, 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newSeverity': {'type': 'str', 'position': 0, 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'associatedCaseID': {'type': 'int', 'position': 0, 'description': 'The case this filter is associated with'}, 'newSourceAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'newDestinationAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'drop', 'noTransform', 'continueAfterTransform', 'stopAfterNoMatch', 'changeAggregationKey', 'invertIp']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was modified'}}}}}}, '201': {'description': 'Filter created'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
debug_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Shows the result of running a match filter against a set of events (DEV)', 'description': '', 'operationId': 'debugMatchFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Debug filter request', 'required': False, 'schema': {'type': 'object', 'required': ['eventIDs'], 'properties': {'eventIDs': {'type': 'list', 'position': 0, 'description': 'The list of event ids for the events to debug against. Can be given in the form of AGGR/1/123456789/{UUID} or simply UUID.', 'items': {'type': 'string'}, 'maxItems': 2147483647, 'minItems': 1}}}}], 'responses': {'200': {'description': 'Debug results returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
delete_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Deletes a match filter (DEV)', 'description': '', 'operationId': 'deleteMatchFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to delete', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'Match filter deleted'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
duplicate_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Duplicates a match filter (DEV)', 'description': '', 'operationId': 'duplicateMatchFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Match filter duplication request', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'required': ['destinationIPAddresses', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses'], 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'index': {'type': 'int', 'position': 0, 'description': 'The execution index'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number of this filter instance'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied'}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'filterType': {'type': 'str', 'position': 0, 'description': 'The type of the match filter', 'enum': ['AggregatedAttackEventMatchFilter', 'AggregatedIPAttackEventMatchFilter', 'IPAttackEventMatchFilter', 'NIDSEventMatchFilter', 'AttackEventMatchFilter']}, 'matchCode': {'type': 'str', 'position': 0, 'description': 'The custom esper code for when the filter should match an event. Will only be included if requested'}, 'minSeverity': {'type': 'str', 'position': 0, 'description': 'Will only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'position': 0, 'description': 'Will only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Will only match events that have these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Will only match events that does not have any of these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'protocol': {'type': 'str', 'position': 0, 'description': 'Will only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'position': 0, 'description': 'Will only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'position': 0, 'description': 'Will only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'position': 0, 'description': 'Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourcePorts': {'type': 'list', 'position': 0, 'description': 'Will only match events where the source port is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'destinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'destinationPorts': {'type': 'list', 'position': 0, 'description': 'Will only match events where the destination port is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourceOrDestinationPorts': {'type': 'list', 'position': 0, 'description': 'Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'locationID': {'type': 'list', 'position': 0, 'description': 'Will only match events from the these locations', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackIdentifier': {'type': 'list', 'position': 0, 'description': 'Will only match events with these attack identifiers', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Will only match events connected to these alarms', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategoryID': {'type': 'list', 'position': 0, 'description': 'Will only match events belonging to these attack categories', 'uniqueItems': True, 'items': {'type': 'int'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Will only match events from these sensors', 'uniqueItems': True, 'items': {'type': 'int'}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Will only match events which have these properties', 'additionalProperties': {'type': 'string'}}, 'transformCode': {'type': 'str', 'position': 0, 'description': 'The custom esper code for how the event will be transformed. Will only be included if requested'}, 'newAggregationKey': {'type': 'str', 'position': 0, 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newSeverity': {'type': 'str', 'position': 0, 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'associatedCaseID': {'type': 'int', 'position': 0, 'description': 'The case this filter is associated with'}, 'newSourceAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'newDestinationAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'drop', 'noTransform', 'continueAfterTransform', 'stopAfterNoMatch', 'changeAggregationKey', 'invertIp']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was modified'}}}}}}, '201': {'description': 'Duplicated Match filter'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Gets an match filter (DEV)', 'description': '', 'operationId': 'getMatchFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in MatchFilter', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'Match filter returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_match_filter_status = {'tags': ['eventfilters/v2'], 'summary': 'Gets the status of a match filter (DEV)', 'description': '', 'operationId': 'listMatchFilterStatus', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Match filter status returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
list_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Simple search for match filters (DEV)', 'description': '', 'operationId': 'listMatchFilter', 'produces': ['application/json'], 'parameters': [{'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Set match strategy for keyword search', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordField', 'in': 'query', 'description': 'Set field strategy for keyword search', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'propertyKey', 'propertyValue', 'all']}, 'collectionFormat': 'multi'}, {'name': 'timestampMatch', 'in': 'query', 'description': 'Set match strategy for timestamp filtering', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampField', 'in': 'query', 'description': 'Set field strategy for timestamp filtering', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'lastUpdated', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'collectionFormat': 'multi'}, {'name': 'start', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'end', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in results', 'required': False, 'type': 'bool', 'default': False}, {'name': 'sortBy', 'in': 'query', 'description': 'Field to sort by', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Search performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
list_match_filter_revisions = {'tags': ['eventfilters/v2'], 'summary': 'Gets a match filters earlier revisions (DEV)', 'description': '', 'operationId': 'getMatchFilterRevisions', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to fetch revisions for', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'limit', 'in': 'query', 'description': 'The max amount of revisions to return', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'The number of revisions to skip before returning', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Match filter revisions returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
revive_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Revives a deleted a match filter (DEV)', 'description': '', 'operationId': 'reviveMatchFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'Revived match filter'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
search_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Searches for match filters (DEV)', 'description': '', 'operationId': 'searchMatchFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search match filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'order': {'type': 'list', 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'validFrom', 'validTo', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-validFrom', '-validTo', '-created', '-lastUpdated', '-deleted']}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'propertyKey', 'propertyValue', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which have the following flags set', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude filters which have the following flags set', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which include the given event flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which exclude the given event flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'location': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following locations, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following alarms', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategory': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following attack categories, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following sensors', 'uniqueItems': True, 'items': {'type': 'int'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'propertyKey', 'propertyValue', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which have the following flags set', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude filters which have the following flags set', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which include the given event flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which exclude the given event flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'location': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following locations, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following alarms', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategory': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following attack categories, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following sensors', 'uniqueItems': True, 'items': {'type': 'int'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['description', 'name', 'matchCode', 'transformCode', 'protocol', 'domainPattern', 'uriPattern', 'newAggregationKey', 'label', 'attackIdentifier', 'propertyKey', 'propertyValue', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which have the following flags set', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Exclude filters which have the following flags set', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which include the given event flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Limit to filters which exclude the given event flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'location': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following locations, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following alarms', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategory': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following attack categories, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Limit to filters which target the following sensors', 'uniqueItems': True, 'items': {'type': 'int'}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search', 'uniqueItems': True, 'items': []}}}}}}}, 'includeCode': {'type': 'bool', 'position': 0, 'description': 'Whether or not to include code in the result object. The code is only returned if set to true (default false)', 'default': False}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit maximum amount of results (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip specified amount of results (default 0)', 'minimum': 0, 'default': 0}}}}], 'responses': {'200': {'description': 'Search performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
set_match_filter_log_level = {'tags': ['eventfilters/v2'], 'summary': 'Sets the log level of a match filter (DEV)', 'description': '', 'operationId': 'setMatchFilterLogLevel', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Update match filter log level request', 'required': False, 'schema': {'type': 'object', 'required': ['logLevel'], 'properties': {'logLevel': {'type': 'str', 'position': 0, 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}}}], 'responses': {'200': {'description': 'Match filter updated'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_match_filter = {'tags': ['eventfilters/v2'], 'summary': 'Updates a match filter (DEV)', 'description': '', 'operationId': 'updateMatchFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Update match filter request', 'required': False, 'schema': {'type': 'object', 'required': ['addLabels', 'comment', 'destinationIPAddresses', 'removeLabels', 'setLabels', 'sourceIPAddresses', 'sourceOrDestinationIPAddresses'], 'properties': {'enabled': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'index': {'type': 'int', 'position': 0, 'description': 'The index of the filter. Filters with lower index will be ran first.', 'minimum': 0, 'maximum': 10}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'matchCode': {'type': 'str', 'position': 0, 'description': 'Custom esper code for when the filter should match an event. Will be validated in the backend'}, 'minSeverity': {'type': 'str', 'position': 0, 'description': 'Only match events with severity at least this value', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'maxSeverity': {'type': 'str', 'position': 0, 'description': 'Only match events with severity this value or lower', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'includeEventFlags': {'type': 'list', 'position': 0, 'description': 'Only match events that have these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'excludeEventFlags': {'type': 'list', 'position': 0, 'description': 'Only match events that does not have any of these flags', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['ESTABLISHED', 'BLOCKED', 'SNAPSHOT', 'FINALIZED', 'SOURCE_IS_CUSTOMERNET', 'DESTINATION_IS_CUSTOMERNET', 'SOURCE_IS_PARTIAL_CUSTOMERNET', 'DESTINATION_IS_PARTIAL_CUSTOMERNET', 'PARTIALLY_BLOCKED', 'FALSE_POSITIVE', 'NOT_A_THREAT', 'TUNING_CANDIDATE', 'NOTIFIED', 'PARTIALLY_NOTIFIED', 'FOLLOWUP', 'IDENTIFIED_THREAT', 'THREAT_CANDIDATE', 'ACKNOWLEDGED', 'PARTIALLY_ACKNOWLEDGED', 'SEVERITY_ADJUSTED', 'COMMENTED', 'FILTERED', 'CHECKED', 'INCOMPLETE_DETAILS', 'AGGREGATED_BASE_EVENT', 'REMOTE_STORAGE', 'CUSTOM_SOURCE_AGGREGATION', 'CUSTOM_DESTINATION_AGGREGATION', 'ASSOCIATED_TO_CASE_BY_FILTER', 'SEVERITY_INCREASED_BY_FILTER', 'SEVERITY_REDUCED_BY_FILTER', 'CREATED_BY_ANALYSIS_FILTER', 'IP_INVERTED_BY_FILTER', 'HAS_PAYLOAD', 'HAS_PCAP', 'EXTEND_EVENT_TTL', 'INITIAL_TUNING', 'PARTIAL_INITIAL_TUNING', 'POST_ANALYSIS', 'SSL_TERMINATED', 'PARTIAL_SSL_TERMINATED', 'AUTO_REPORT', 'MISSING_TIMESTAMP', 'CLOCK_OUT_OF_SYNC', 'DROP_ANALYSIS', 'ESCALATED_BY_REPUTATION', 'HAS_SAMPLE', 'STORE_EVENT', 'STORE_AGGREGATED']}}, 'protocol': {'type': 'str', 'position': 0, 'description': 'Only match events with the provided protocol'}, 'domainPattern': {'type': 'str', 'position': 0, 'description': 'Only match events where the domain matches this regex'}, 'uriPattern': {'type': 'str', 'position': 0, 'description': 'Only match events where the uri matches this regex'}, 'sourceIPAddresses': {'type': 'list', 'position': 0, 'description': 'Only match events where the source ip address is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourcePorts': {'type': 'list', 'position': 0, 'description': 'Only match events where the source port is in this set. This corresponds to intruder in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'destinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Only match events where the destination ip address is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'destinationPorts': {'type': 'list', 'position': 0, 'description': 'Only match events where the destination port is in this set. This corresponds to victim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'sourceOrDestinationIPAddresses': {'type': 'list', 'position': 0, 'description': 'Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sourceOrDestinationPorts': {'type': 'list', 'position': 0, 'description': 'Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution', 'uniqueItems': True, 'items': {'type': 'int'}}, 'location': {'type': 'list', 'position': 0, 'description': 'Only match events from the these locations, given by shortname or id', 'uniqueItems': True, 'items': {'type': 'string'}}, 'attackIdentifier': {'type': 'list', 'position': 0, 'description': 'Only match events with these attack identifiers, given by shortname or id', 'uniqueItems': True, 'items': {'type': 'string'}}, 'alarmID': {'type': 'list', 'position': 0, 'description': 'Only match events connected to these alarms, given by id', 'uniqueItems': True, 'items': {'type': 'int'}}, 'attackCategory': {'type': 'list', 'position': 0, 'description': 'Only match events belonging to these attack categories, given by shortname or id', 'uniqueItems': True, 'items': {'type': 'string'}}, 'sensorID': {'type': 'list', 'position': 0, 'description': 'Only match events from these sensors, given by id', 'uniqueItems': True, 'items': {'type': 'int'}}, 'properties': {'type': 'dict', 'position': 0, 'description': 'Only match events which have these properties', 'additionalProperties': {'type': 'string'}}, 'transformCode': {'type': 'str', 'position': 0, 'description': 'Custom esper code for how the event will be transformed. Will be validated in the backend'}, 'newAggregationKey': {'type': 'str', 'position': 0, 'description': 'If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true'}, 'newSeverity': {'type': 'str', 'position': 0, 'description': 'The new severity of events that are matched by the filter', 'enum': ['lowStatistics', 'lowAggregated', 'low', 'medium', 'high', 'critical']}, 'associatedCaseID': {'type': 'int', 'position': 0, 'description': 'Adds an associated case ID'}, 'newSourceAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder'}, 'newDestinationAggregationBits': {'type': 'int', 'position': 0, 'description': 'Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim'}, 'drop': {'type': 'bool', 'position': 0, 'description': 'If true, this event will be dropped'}, 'noTransform': {'type': 'bool', 'position': 0, 'description': 'If true, this event will not be transformed'}, 'continueAfterTransform': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will continue to look for new events after transform'}, 'stopAfterNoMatch': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will stop looking for new matches after not matching'}, 'changeAggregationKey': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will change the aggregation key to the value of newAggregationKey'}, 'invertIp': {'type': 'bool', 'position': 0, 'description': 'If true, this filter will switch the source and destination ip in the event'}, 'removeLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'addLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'setLabels': {'type': 'list', 'position': 0, 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels', 'uniqueItems': True, 'items': {'type': 'string'}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was created'}}}}], 'responses': {'200': {'description': 'Match filter updated'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}