# coding: utf-8

"""
    VIER Cognitive Voice Health API

    CVG health  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class ProjectHealth(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "callCount",
            "events",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['HealthStatus']:
                return HealthStatus
            callCount = schemas.IntSchema
            
            
            class events(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProjectHealthEvent']:
                        return ProjectHealthEvent
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ProjectHealthEvent'], typing.List['ProjectHealthEvent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'events':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProjectHealthEvent':
                    return super().__getitem__(i)
            __annotations__ = {
                "status": status,
                "callCount": callCount,
                "events": events,
            }
    
    callCount: MetaOapg.properties.callCount
    events: MetaOapg.properties.events
    status: 'HealthStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'HealthStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callCount"]) -> MetaOapg.properties.callCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "callCount", "events", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'HealthStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callCount"]) -> MetaOapg.properties.callCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["events"]) -> MetaOapg.properties.events: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "callCount", "events", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        callCount: typing.Union[MetaOapg.properties.callCount, decimal.Decimal, int, ],
        events: typing.Union[MetaOapg.properties.events, list, tuple, ],
        status: 'HealthStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectHealth':
        return super().__new__(
            cls,
            *args,
            callCount=callCount,
            events=events,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.health_status import HealthStatus
from cvg_sdk.model.project_health_event import ProjectHealthEvent
