#### black ####################################################################
[tool.black]
line-length = 80
skip-magic-trailing-comma = true
target-version = ["py310"]

#### coverage #################################################################
[tool.coverage.run]
branch = true
data_file = ".coverage/data"
parallel = true

[tool.coverage.report]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.html]
directory = ".coverage/html"

#### hatch ####################################################################
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/utilities"]

[tool.hatch.version]
path = "src/utilities/__init__.py"

#### isort ####################################################################
[tool.isort]
atomic = true
case_sensitive = true
float_to_top = true
force_single_line = true
line_length = 80
lines_after_imports = 2
profile = "black"
remove_redundant_aliases = true
skip_gitignore = true

#### nitpick ##################################################################
[tool.nitpick]
style = [
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.10.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/pip-compile-generate-hashes.toml",
]

#### project ##################################################################
[project]
name = "dycw-utilities"
dynamic = ["version"]
readme = "README.md"
requires-python = ">= 3.10"
authors = [{ name = "Derek Wan", email = "d.wan@icloud.com" }]
dependencies = ["beartype >= 0.11.0"]

[project.optional-dependencies]
atomicwrites = ["atomicwrites >= 1.4.1"]
click = ["click >= 8.1.3"]
fastapi = ["fastapi >= 0.85.1"]
hypothesis = ["hypothesis >= 6.56.2"]
loguru = ["loguru >= 0.6.0"]
memory-profiler = ["memory-profiler >= 0.60.0"]
numpy = ["numpy >= 1.23.4"]
pandas = ["pandas >= 1.5.0"]
pqdm = ["pqdm >= 0.2.0"]
pyinstrument = ["pyinstrument >= 4.3.0"]
tqdm = ["tqdm >= 4.64.1"]
sqlalchemy = ["sqlalchemy >= 1.4.41", "sqlalchemy2-stubs"]
tempenv = ["tempenv >= 2.0.0"]
typed-settings = ["typed-settings >= 1.1.1"]
dev = [
  # atomicwrites
  "atomicwrites >= 1.4.1",
  # click
  "click >= 8.1.3",
  # fastapi
  "fastapi >= 0.85.1",
  # hypothesis
  "hypothesis >= 6.56.2",
  # loguru
  "loguru >= 0.6.0",
  # memory-profiler
  "memory-profiler >= 0.60.0",
  # numpy
  "numpy >= 1.23.4",
  # pandas
  "pandas >= 1.5.0",
  # pqdm
  "pqdm >= 0.2.0",
  # pyinstrument
  "pyinstrument >= 4.3.0",
  # tqdm
  "tqdm >= 4.64.1",
  # sqlalchemy
  "sqlalchemy >= 1.4.41",
  "sqlalchemy2-stubs",
  # tempenv
  "tempenv >= 2.0.0",
  # typed-settings
  "typed-settings >= 1.1.1",
  #
  "black",
  "bump2version",
  "flake8",
  "flake8-absolute-import",
  "flake8-annotations",
  "flake8-bandit",
  "flake8-bugbear",
  "flake8-comprehensions",
  "flake8-debugger",
  "flake8-eradicate",
  "flake8-executable",
  "flake8-no-pep420",
  "flake8-pie",
  "flake8-print",
  "flake8-simplify",
  "flake8-unused-arguments",
  "hatch",
  "isort",
  "pip-tools",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
]

#### pyright ##################################################################
[tool.pyright]
include = ["src"]
pythonVersion = "3.10"
executionEnvironments = [{ root = "src" }]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportMissingTypeArgument = false
reportPrivateUsage = false
reportPrivateImportUsage = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUntypedBaseClass = false
reportImplicitStringConcatenation = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"

#### pytest ###################################################################
[tool.pytest.ini_options]
addopts = [
  "-rsxX",
  "--color=auto",
  "--cov=utilities",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--strict-markers",
  "--tb=native",
]
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "ignore:Implicitly cleaning up <TemporaryDirectory '.*'>:ResourceWarning",
]
looponfailroots = ["src"]
minversion = "7.0"
testpaths = ["src/tests"]
xfail_strict = true
