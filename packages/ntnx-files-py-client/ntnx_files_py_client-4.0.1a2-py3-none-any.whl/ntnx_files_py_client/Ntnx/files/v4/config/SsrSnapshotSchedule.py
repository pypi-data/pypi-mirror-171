# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.SnapshotScheduleType import SnapshotScheduleType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class SsrSnapshotSchedule(ExternalizableAbstractModel):
    """SsrSnapshotSchedule - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'snapshot_schedule_type': 'files.v4.config.SnapshotScheduleType',
        'snapshot_schedule_frequency': 'int',
        'days_of_week': 'list[int]',
        'days_of_month': 'list[int]',
        'local_max_snapshots': 'int',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'snapshot_schedule_type': 'snapshotScheduleType',
        'snapshot_schedule_frequency': 'snapshotScheduleFrequency',
        'days_of_week': 'daysOfWeek',
        'days_of_month': 'daysOfMonth',
        'local_max_snapshots': 'localMaxSnapshots',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, snapshot_schedule_type=None, snapshot_schedule_frequency=None, days_of_week=None, days_of_month=None, local_max_snapshots=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """SsrSnapshotSchedule - a model defined in Swagger
            \nSSR snapshot schedule model
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__snapshot_schedule_type = None
        self.__snapshot_schedule_frequency = None
        self.__days_of_week = None
        self.__days_of_month = None
        self.__local_max_snapshots = None
        self.discriminator = None
        self.__snapshot_schedule_type = snapshot_schedule_type
        self.__snapshot_schedule_frequency = snapshot_schedule_frequency
        if days_of_week is not None:
            self.__days_of_week = days_of_week
        if days_of_month is not None:
            self.__days_of_month = days_of_month
        self.__local_max_snapshots = local_max_snapshots

    def _initialize_object_type(self):
        return 'files.v4.config.SsrSnapshotSchedule'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.SsrSnapshotSchedule'


    @property
    def snapshot_schedule_type(self):
        """`{ files.v4.config.SnapshotScheduleType }`
            
        """ # noqa: E501
        return self.__snapshot_schedule_type

    @snapshot_schedule_type.setter
    def snapshot_schedule_type(self, snapshot_schedule_type):
        if snapshot_schedule_type is None:
            raise ValueError("Invalid value for `snapshot_schedule_type`, must not be `None`")  # noqa: E501

        self.__snapshot_schedule_type = snapshot_schedule_type

    @property
    def snapshot_schedule_frequency(self):
        """`{ int }`
            \nFrequency of snapshots.
        """ # noqa: E501
        return self.__snapshot_schedule_frequency

    @snapshot_schedule_frequency.setter
    def snapshot_schedule_frequency(self, snapshot_schedule_frequency):
        if snapshot_schedule_frequency is None:
            raise ValueError("Invalid value for `snapshot_schedule_frequency`, must not be `None`")  # noqa: E501
        if snapshot_schedule_frequency is not None and snapshot_schedule_frequency > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_schedule_frequency`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if snapshot_schedule_frequency is not None and snapshot_schedule_frequency < 1:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_schedule_frequency`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__snapshot_schedule_frequency = snapshot_schedule_frequency

    @property
    def days_of_week(self):
        """`{ list[int] }`
            \nNumber of days of week for snapshot to be taken.
        """ # noqa: E501
        return self.__days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):

        self.__days_of_week = days_of_week

    @property
    def days_of_month(self):
        """`{ list[int] }`
            \nNumber of days of month for snapshot to be taken.
        """ # noqa: E501
        return self.__days_of_month

    @days_of_month.setter
    def days_of_month(self, days_of_month):

        self.__days_of_month = days_of_month

    @property
    def local_max_snapshots(self):
        """`{ int }`
            \nThe maximum number of snapshots to be kept locally.
        """ # noqa: E501
        return self.__local_max_snapshots

    @local_max_snapshots.setter
    def local_max_snapshots(self, local_max_snapshots):
        if local_max_snapshots is None:
            raise ValueError("Invalid value for `local_max_snapshots`, must not be `None`")  # noqa: E501
        if local_max_snapshots is not None and local_max_snapshots > 50:  # noqa: E501
            raise ValueError("Invalid value for `local_max_snapshots`, must be a value less than or equal to `50`")  # noqa: E501
        if local_max_snapshots is not None and local_max_snapshots < 1:  # noqa: E501
            raise ValueError("Invalid value for `local_max_snapshots`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__local_max_snapshots = local_max_snapshots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SsrSnapshotSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SsrSnapshotSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

