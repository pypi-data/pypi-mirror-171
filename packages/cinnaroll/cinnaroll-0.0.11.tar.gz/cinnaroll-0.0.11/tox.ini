[tox]
envlist = pep8,mypy-py{36,37,38,39,310},py{36,37,38,39,310},coverage,docs
minversion = 2.3.2
skipsdist = True


# Note that there is no particular reason for the below assignment of PEP8/coverage/docs checks to Python version
# (other than Python 3.6 being EOLed and hence not supporting the versions of packages used for the checks).
# Each of these needs to be run against just one Python version
# (since there's very little chance that they pass under one version but fail under another),
# so let's spread these checks evenly across versions to reduce CI latency
# (when compared to the scenario where all checks are executed under the same Python version).

[gh-actions]
python =
    3.6:  py36,  mypy-py36
    3.7:  py37,  mypy-py37
    3.8:  py38,  mypy-py38, pep8
    3.9:  py39,  mypy-py39, coverage
    3.10: py310, mypy-py310, docs

[testenv]
setenv =
  VIRTUAL_ENV={envdir}
  PYTHONWARNINGS=default::DeprecationWarning,ignore:The distutils package is deprecated,ignore:The distutils.sysconfig module is deprecated,ignore:the imp module is deprecated,ignore:SelectableGroups dict interface is deprecated
usedevelop = False
install_command =
  pip install {opts} {packages}
deps =
  -r{toxinidir}/requirements.testenv.txt
allowlist_externals = mkdir
commands =
  mkdir -p test-results/
  pytest --numprocesses=auto --junitxml=test-results/testenv-{envname}.xml {posargs}

[testenv:py36]
deps =
  -r{toxinidir}/requirements.testenv.py36-txt

[testenv:pep8]
deps =
  -r{toxinidir}/requirements.pep8.txt
commands = flake8

# Set flake8 configuration options which are used by the `flake8` command in [testenv:pep8]
[flake8]
# W504 ignore wrap line after binary operator
ignore = W504
per-file-ignores =
    # "exports" for nicer imports
    ./cinnaroll/__init__.py
    # tests that check if import fails or doesn't concisely
    ./tests/test_cinnaroll_module_init.py:F401
show-source = True
max-line-length = 140
exclude = ./.*,build,dist,*egg,venv
import-order-style = pep8

[testenv:venv]
commands = {posargs}

[testenv:coverage]
description = "Check the test coverage of the code"
deps =
  -r{toxinidir}/requirements.coverage.txt
commands =
  coverage erase
  # Generates .coverage binary file, used as the source of truth for the subsequent reports
  coverage run --branch --include='cinnaroll/*' --omit='cinnaroll/tests/*' -m pytest --junitxml=test-results/testenv-{envname}.xml
  # Prints a report to console
  coverage report
  # Saves a report to htmlcov/
  coverage html
  # Saves a report to coverage.xml (can be uploaded to Codecov from CI, as Codecov apparently does not accept .coverage binary files)
  coverage xml

[testenv:docs]
description = "Build documentation"
usedevelop=true
deps =
  -r{toxinidir}/requirements.docs.txt
commands =
  sphinx-build -W --keep-going -b html docs/source docs/html

[testenv:mypy]
allowlist_externals = tox
commands = tox -e "mypy-py{36,37,38,39,310}"
# No need to inherit deps from [testenv]
deps =

[testenv:mypy-py36]
deps =
  -r{toxinidir}/requirements.mypy.py36-txt
commands =
  mypy --config-file mypy.ini cinnaroll cli tests

[testenv:mypy-py{37,38,39,310}]
deps =
  -r{toxinidir}/requirements.mypy.txt
commands =
  mypy --config-file mypy.ini cinnaroll cli tests
