from TurbineGeneratorOverLimitDiagnosis.tools.v2.Method_WhichUpperGuideBearingPadAbnormalStressDiagnosis import WhichUpperGuideBearingPadAbnormalStressDiagnosis
# from tools.v2.Method_WhichUpperGuideBearingPadAbnormalStressDiagnosis import WhichUpperGuideBearingPadAbnormalStressDiagnosis

import numpy as np

def main():
    """
    output:
        {'dfem_evidence': ['[第1号上导轴瓦受力]温度偏差计算值(0.78)异常,阈值0.04', '[第2号上导轴瓦受力]温度偏差计算值(0.05)异常,阈值0.04',
                           '[第3号上导轴瓦受力]温度偏差计算值(0.56)异常,阈值0.04', '[第4号上导轴瓦受力]温度偏差计算值(0.96)异常,阈值0.04',
                           '[第5号上导轴瓦受力]温度偏差计算值(0.69)异常,阈值0.04', '[第6号上导轴瓦受力]温度偏差计算值(1.32)异常,阈值0.04', '[第7号上导轴瓦受力]正常',
                           '[第8号上导轴瓦受力]正常', '[第9号上导轴瓦受力]温度偏差计算值(0.08)异常,阈值0.04', '[第10号上导轴瓦受力]温度偏差计算值(0.79)异常,阈值0.04',
                           '[第11号上导轴瓦受力]温度偏差计算值(0.39)异常,阈值0.04', '[第12号上导轴瓦受力]温度偏差计算值(0.37)异常,阈值0.04',
                           '[第13号上导轴瓦受力]温度偏差计算值(0.23)异常,阈值0.04', '[第14号上导轴瓦受力]温度偏差计算值(0.60)异常,阈值0.04',
                           '[第15号上导轴瓦受力]温度偏差计算值(0.54)异常,阈值0.04', '[第16号上导轴瓦受力]温度偏差计算值(0.05)异常,阈值0.04',
                           '[第17号上导轴瓦受力]温度偏差计算值(0.91)异常,阈值0.04', '[第18号上导轴瓦受力]温度偏差计算值(0.34)异常,阈值0.04',
                           '[第19号上导轴瓦受力]温度偏差计算值(0.11)异常,阈值0.04', '[第20号上导轴瓦受力]温度偏差计算值(0.30)异常,阈值0.04',
                           '[第21号上导轴瓦受力]温度偏差计算值(0.41)异常,阈值0.04', '[第22号上导轴瓦受力]温度偏差计算值(0.73)异常,阈值0.04',
                           '[第23号上导轴瓦受力]温度偏差计算值(0.44)异常,阈值0.04', '[第24号上导轴瓦受力]温度偏差计算值(0.58)异常,阈值0.04',
                           '[第25号上导轴瓦受力]温度偏差计算值(0.22)异常,阈值0.04', '[第26号上导轴瓦受力]温度偏差计算值(0.62)异常,阈值0.04',
                           '[第27号上导轴瓦受力]温度偏差计算值(1.22)异常,阈值0.04', '[第28号上导轴瓦受力]温度偏差计算值(1.38)异常,阈值0.04',
                           '[第29号上导轴瓦受力]温度偏差计算值(0.90)异常,阈值0.04', '[第30号上导轴瓦受力]温度偏差计算值(0.09)异常,阈值0.04',
                           '[第31号上导轴瓦受力]温度偏差计算值(0.50)异常,阈值0.04', '[第32号上导轴瓦受力]温度偏差计算值(0.85)异常,阈值0.04'],
        'dfem_code': ['SP000601', 'SP000602', 'SP000603', 'SP000604', 'SP000605', 'SP000606', '', '', 'SP000609',
                   'SP000610', 'SP000611', 'SP000612', 'SP000613', 'SP000614', 'SP000615', 'SP000616', 'SP000617',
                   'SP000618', 'SP000619', 'SP000620', 'SP000621', 'SP000622', 'SP000623', 'SP000624', 'SP000625',
                   'SP000626', 'SP000627', 'SP000628', 'SP000629', 'SP000630', 'SP000631', 'SP000632']}
    """
    obj = WhichUpperGuideBearingPadAbnormalStressDiagnosis()
    for item in range(1):
        print(
            obj.diagnosis({"tempers": (np.multiply(np.abs(np.random.randn(32)), 115)).flatten().tolist(),
                           "seq": np.arange(1, 33)})
        )

if __name__ == '__main__':
    main()