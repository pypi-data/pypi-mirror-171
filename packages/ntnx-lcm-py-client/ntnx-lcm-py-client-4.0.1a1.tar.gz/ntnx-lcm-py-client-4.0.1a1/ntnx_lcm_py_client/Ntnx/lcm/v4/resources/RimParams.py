# coding: utf-8


"""
IGNORE:
    Nutanix Lcm Versioned APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class RimParams(object):
    """RimParams - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'url': 'str',
        'path': 'str',
        'component': 'str',
        'tags': 'list[str]',
        'flags': 'list[str]',
        'description': 'str',
        'url_set_by_user': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'url': 'url',
        'path': 'path',
        'component': 'component',
        'tags': 'tags',
        'flags': 'flags',
        'description': 'description',
        'url_set_by_user': 'urlSetByUser',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, url=None, path=None, component=None, tags=None, flags=None, description=None, url_set_by_user=None, *args, **kwargs):  # noqa: E501
        """RimParams - a model defined in Swagger
            \nRIM parameters for one component
        """
        self.__url = None
        self.__path = None
        self.__component = None
        self.__tags = None
        self.__flags = None
        self.__description = None
        self.__url_set_by_user = None
        self.discriminator = None
        if url is not None:
            self.__url = url
        if path is not None:
            self.__path = path
        if component is not None:
            self.__component = component
        if tags is not None:
            self.__tags = tags
        if flags is not None:
            self.__flags = flags
        if description is not None:
            self.__description = description
        if url_set_by_user is not None:
            self.__url_set_by_user = url_set_by_user
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lcm.v4.resources.RimParams'

    def _initialize_fq_object_type(self):
        return 'lcm.v4.r0.a1.resources.RimParams'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def url(self):
        """`{ str }`
            \nURL of the RIM.
        """ # noqa: E501
        return self.__url

    @url.setter
    def url(self, url):
        if url is not None and not re.search('^((http[s]?):\/)?\/?([^:\/\\s]+)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', url):  # noqa: E501
            raise ValueError(r"Invalid value for `url`, must be a follow pattern or equal to `/^((http[s]?):\/)?\/?([^:\/\\s]+)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__url = url

    @property
    def path(self):
        """`{ str }`
            \nPath of the RIM
        """ # noqa: E501
        return self.__path

    @path.setter
    def path(self, path):

        self.__path = path

    @property
    def component(self):
        """`{ str }`
            \nComponent name of the RIM
        """ # noqa: E501
        return self.__component

    @component.setter
    def component(self, component):

        self.__component = component

    @property
    def tags(self):
        """`{ list[str] }`
            \nTag list of the RIM
        """ # noqa: E501
        return self.__tags

    @tags.setter
    def tags(self, tags):

        self.__tags = tags

    @property
    def flags(self):
        """`{ list[str] }`
            \nFlag list of the RIM
        """ # noqa: E501
        return self.__flags

    @flags.setter
    def flags(self, flags):

        self.__flags = flags

    @property
    def description(self):
        """`{ str }`
            \nDescription of the RIM
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):

        self.__description = description

    @property
    def url_set_by_user(self):
        """`{ bool }`
            \nIndicates if the RIM URL is set by the user
        """ # noqa: E501
        return self.__url_set_by_user

    @url_set_by_user.setter
    def url_set_by_user(self, url_set_by_user):

        self.__url_set_by_user = url_set_by_user

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

