# coding: utf-8

"""
    Quick Manager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from quick_client.configuration import Configuration


class TopicData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'write_type': 'str',
        'key_type': 'str',
        'value_type': 'str',
        'schema': 'str'
    }

    attribute_map = {
        'name': 'name',
        'write_type': 'writeType',
        'key_type': 'keyType',
        'value_type': 'valueType',
        'schema': 'schema'
    }

    def __init__(self, name=None, write_type=None, key_type=None, value_type=None, schema=None, local_vars_configuration=None):  # noqa: E501
        """TopicData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._write_type = None
        self._key_type = None
        self._value_type = None
        self._schema = None
        self.discriminator = None

        self.name = name
        self.write_type = write_type
        self.key_type = key_type
        self.value_type = value_type
        if schema is not None:
            self.schema = schema

    @property
    def name(self):
        """Gets the name of this TopicData.  # noqa: E501


        :return: The name of this TopicData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TopicData.


        :param name: The name of this TopicData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def write_type(self):
        """Gets the write_type of this TopicData.  # noqa: E501


        :return: The write_type of this TopicData.  # noqa: E501
        :rtype: str
        """
        return self._write_type

    @write_type.setter
    def write_type(self, write_type):
        """Sets the write_type of this TopicData.


        :param write_type: The write_type of this TopicData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and write_type is None:  # noqa: E501
            raise ValueError("Invalid value for `write_type`, must not be `None`")  # noqa: E501

        self._write_type = write_type

    @property
    def key_type(self):
        """Gets the key_type of this TopicData.  # noqa: E501


        :return: The key_type of this TopicData.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this TopicData.


        :param key_type: The key_type of this TopicData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key_type is None:  # noqa: E501
            raise ValueError("Invalid value for `key_type`, must not be `None`")  # noqa: E501

        self._key_type = key_type

    @property
    def value_type(self):
        """Gets the value_type of this TopicData.  # noqa: E501


        :return: The value_type of this TopicData.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this TopicData.


        :param value_type: The value_type of this TopicData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value_type is None:  # noqa: E501
            raise ValueError("Invalid value for `value_type`, must not be `None`")  # noqa: E501

        self._value_type = value_type

    @property
    def schema(self):
        """Gets the schema of this TopicData.  # noqa: E501


        :return: The schema of this TopicData.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this TopicData.


        :param schema: The schema of this TopicData.  # noqa: E501
        :type: str
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TopicData):
            return True

        return self.to_dict() != other.to_dict()
