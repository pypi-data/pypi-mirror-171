
#THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DO NOT CHANGE MANUALLY

from aipha.webservice_api import AiphaClient, command_request, running_services_request, check_services_completed
import time

def list_running_services(client):

  return running_services_request(
        client.get_username(),
        client.get_token(),
        client.get_server_address())


def wait_for_completion(client,
  services):
  
  completed = False
  while not completed:
    time.sleep(10)
    completed =  check_services_completed(
        client.get_username(),
        client.get_token(),
        client.get_server_address(),
        services)


def download_data_to_cloud(client,
   url='',
   protocol='',
   username='',
   password='',
   port=21,
   download_type=0,
   destination='/data'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "download data to cloud",
    all_parameters,
    client.get_server_address())


def upload_data_from_cloud(client,
   url='',
   protocol='',
   username='',
   password='',
   port=21,
   target='/data'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "upload data from cloud",
    all_parameters,
    client.get_server_address())


def remove_files_from_cloud(client,
   target='/files'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "remove files from cloud",
    all_parameters,
    client.get_server_address())


def create_directory_in_cloud(client,
   destination='/files'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "create directory in cloud",
    all_parameters,
    client.get_server_address())


def classify_each_file_in_folder(client,
   command='classify 3D',
   command_instance_type='nano',
   adjustable_in_parameter_name='input_data_path',
   adjustable_out_parameter_name='output_data_path',
   input_data_path='/3D_data',
   in_model_path='/3D_classification_model',
   output_path='/3D_classification'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "classify each file in folder",
    all_parameters,
    client.get_server_address())


def classify_3D(client,
   input_data_path='/3D_data',
   in_model_path='/3D_classification_model',
   output_path='/3D_classification'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "classify 3D",
    all_parameters,
    client.get_server_address())


def train_classify_3D(client,
   in_training_data_path='/3D_data',
   out_model_path='/3D_classification_model'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "train classify 3D",
    all_parameters,
    client.get_server_address())


def qc_classification(client,
   project_id='',
   year='2022',
   lidar_new_data_folder='in/',
   out_folder='out/'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "qc classification",
    all_parameters,
    client.get_server_address())


def lidar_completeness(client,
   project_id='',
   year='2022',
   lidar_new_data_folder='in/',
   out_folder='out/',
   lidar_new_shp_file='out/'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "lidar completeness",
    all_parameters,
    client.get_server_address())


def ortho_completeness(client,
   project_id='',
   year='2022',
   orthophoto_folder='in/',
   out_folder='out/',
   orthophoto_new_shp_file='out/'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "ortho completeness",
    all_parameters,
    client.get_server_address())


def vegetation_consistency(client,
   project_id='',
   year='2022',
   lidar_old_data_reduced_folder='in/',
   lidar_new_data_reduced_folder='in/',
   out_folder='out/'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "vegetation consistency",
    all_parameters,
    client.get_server_address())


def generate_orthophoto_subset(client,
   trasse_id='',
   mapping_file='in/',
   orthophoto_path='in/',
   subset_path='out/'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "generate orthophoto subset",
    all_parameters,
    client.get_server_address())


def sg_qc_data_processing_init(client,
   ftp_server='',
   ftp_user='',
   ftp_password='',
   ftp_port=21,
   ftp_folder='/QC-AIPHA',
   processing_folder='/processing'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sg qc data processing init",
    all_parameters,
    client.get_server_address())


def sg_qc_data_processing(client,
   ftp_server='',
   ftp_user='',
   ftp_password='',
   ftp_port=21,
   ftp_data_folder='',
   ftp_ortho_folders='',
   processing_folder='/processing'):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sg qc data processing",
    all_parameters,
    client.get_server_address())


def sleep_infinity(client):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "sleep infinity",
    all_parameters,
    client.get_server_address())


def hello_world(client):

  all_parameters = locals().copy()
  del all_parameters['client']
  return command_request(
    client.get_username(),
    client.get_token(),
    "hello world",
    all_parameters,
    client.get_server_address())
