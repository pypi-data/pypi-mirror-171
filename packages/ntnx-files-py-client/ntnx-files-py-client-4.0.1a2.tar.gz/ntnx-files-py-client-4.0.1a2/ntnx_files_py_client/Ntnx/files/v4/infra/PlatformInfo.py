# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.config.IPAddress import IPAddress  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.infra.PlatformFilesVirtualNetworkInfo import PlatformFilesVirtualNetworkInfo  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class PlatformInfo(object):
    """PlatformInfo - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'is_version_info': 'bool',
        'is_network_info': 'bool',
        'is_storage_provider_info': 'bool',
        'is_virtual_network_info': 'bool',
        'virtual_network_uuids': 'list[str]',
        'is_vcenter_status': 'bool',
        'manager_version': 'str',
        'manager_platform_version': 'str',
        'manager_virtual_ip_address': 'common.v1.config.IPAddress',
        'manager_fqdn': 'str',
        'manager_node_ips': 'list[common.v1.config.IPAddress]',
        'storage_provider_node_ips': 'list[common.v1.config.IPAddress]',
        'storage_provider_ds_ip': 'common.v1.config.IPAddress',
        'virtual_network_information': 'list[files.v4.infra.PlatformFilesVirtualNetworkInfo]',
        'v_center_connected': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_version_info': 'isVersionInfo',
        'is_network_info': 'isNetworkInfo',
        'is_storage_provider_info': 'isStorageProviderInfo',
        'is_virtual_network_info': 'isVirtualNetworkInfo',
        'virtual_network_uuids': 'virtualNetworkUuids',
        'is_vcenter_status': 'isVcenterStatus',
        'manager_version': 'managerVersion',
        'manager_platform_version': 'managerPlatformVersion',
        'manager_virtual_ip_address': 'managerVirtualIpAddress',
        'manager_fqdn': 'managerFqdn',
        'manager_node_ips': 'managerNodeIps',
        'storage_provider_node_ips': 'storageProviderNodeIps',
        'storage_provider_ds_ip': 'storageProviderDsIp',
        'virtual_network_information': 'virtualNetworkInformation',
        'v_center_connected': 'vCenterConnected',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_version_info=None, is_network_info=None, is_storage_provider_info=None, is_virtual_network_info=None, virtual_network_uuids=None, is_vcenter_status=None, manager_version=None, manager_platform_version=None, manager_virtual_ip_address=None, manager_fqdn=None, manager_node_ips=None, storage_provider_node_ips=None, storage_provider_ds_ip=None, virtual_network_information=None, v_center_connected=None, *args, **kwargs):  # noqa: E501
        """PlatformInfo - a model defined in Swagger
            \nA model that represents the platform and files storage provider information. 
        """
        self.__is_version_info = None
        self.__is_network_info = None
        self.__is_storage_provider_info = None
        self.__is_virtual_network_info = None
        self.__virtual_network_uuids = None
        self.__is_vcenter_status = None
        self.__manager_version = None
        self.__manager_platform_version = None
        self.__manager_virtual_ip_address = None
        self.__manager_fqdn = None
        self.__manager_node_ips = None
        self.__storage_provider_node_ips = None
        self.__storage_provider_ds_ip = None
        self.__virtual_network_information = None
        self.__v_center_connected = None
        self.discriminator = None
        if is_version_info is not None:
            self.__is_version_info = is_version_info
        if is_network_info is not None:
            self.__is_network_info = is_network_info
        if is_storage_provider_info is not None:
            self.__is_storage_provider_info = is_storage_provider_info
        if is_virtual_network_info is not None:
            self.__is_virtual_network_info = is_virtual_network_info
        if virtual_network_uuids is not None:
            self.__virtual_network_uuids = virtual_network_uuids
        if is_vcenter_status is not None:
            self.__is_vcenter_status = is_vcenter_status
        if manager_version is not None:
            self.__manager_version = manager_version
        if manager_platform_version is not None:
            self.__manager_platform_version = manager_platform_version
        if manager_virtual_ip_address is not None:
            self.__manager_virtual_ip_address = manager_virtual_ip_address
        if manager_fqdn is not None:
            self.__manager_fqdn = manager_fqdn
        if manager_node_ips is not None:
            self.__manager_node_ips = manager_node_ips
        if storage_provider_node_ips is not None:
            self.__storage_provider_node_ips = storage_provider_node_ips
        if storage_provider_ds_ip is not None:
            self.__storage_provider_ds_ip = storage_provider_ds_ip
        if virtual_network_information is not None:
            self.__virtual_network_information = virtual_network_information
        if v_center_connected is not None:
            self.__v_center_connected = v_center_connected
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.infra.PlatformInfo'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.infra.PlatformInfo'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def is_version_info(self):
        """`{ bool }`
            \nGet request flag for files manager and the corresponding platform version. 
        """ # noqa: E501
        return self.__is_version_info

    @is_version_info.setter
    def is_version_info(self, is_version_info):

        self.__is_version_info = is_version_info

    @property
    def is_network_info(self):
        """`{ bool }`
            \nGet request flag for platform network information of the files manager. 
        """ # noqa: E501
        return self.__is_network_info

    @is_network_info.setter
    def is_network_info(self, is_network_info):

        self.__is_network_info = is_network_info

    @property
    def is_storage_provider_info(self):
        """`{ bool }`
            \nGet request flag for files storage provider information. 
        """ # noqa: E501
        return self.__is_storage_provider_info

    @is_storage_provider_info.setter
    def is_storage_provider_info(self, is_storage_provider_info):

        self.__is_storage_provider_info = is_storage_provider_info

    @property
    def is_virtual_network_info(self):
        """`{ bool }`
            \nGet request flag for virtual network information. 
        """ # noqa: E501
        return self.__is_virtual_network_info

    @is_virtual_network_info.setter
    def is_virtual_network_info(self, is_virtual_network_info):

        self.__is_virtual_network_info = is_virtual_network_info

    @property
    def virtual_network_uuids(self):
        """`{ list[str] }`
            \nList of virtual network UUIDs. 
        """ # noqa: E501
        return self.__virtual_network_uuids

    @virtual_network_uuids.setter
    def virtual_network_uuids(self, virtual_network_uuids):

        self.__virtual_network_uuids = virtual_network_uuids

    @property
    def is_vcenter_status(self):
        """`{ bool }`
            \nGet request flag for vCenter connection status. 
        """ # noqa: E501
        return self.__is_vcenter_status

    @is_vcenter_status.setter
    def is_vcenter_status(self, is_vcenter_status):

        self.__is_vcenter_status = is_vcenter_status

    @property
    def manager_version(self):
        """`{ str }`
            \nFiles manager version. 
        """ # noqa: E501
        return self.__manager_version

    @manager_version.setter
    def manager_version(self, manager_version):

        self.__manager_version = manager_version

    @property
    def manager_platform_version(self):
        """`{ str }`
            \nPlatform version for the files manager. 
        """ # noqa: E501
        return self.__manager_platform_version

    @manager_platform_version.setter
    def manager_platform_version(self, manager_platform_version):

        self.__manager_platform_version = manager_platform_version

    @property
    def manager_virtual_ip_address(self):
        """`{ common.v1.config.IPAddress }`
            
        """ # noqa: E501
        return self.__manager_virtual_ip_address

    @manager_virtual_ip_address.setter
    def manager_virtual_ip_address(self, manager_virtual_ip_address):

        self.__manager_virtual_ip_address = manager_virtual_ip_address

    @property
    def manager_fqdn(self):
        """`{ str }`
            \nPlatform FQDN for the files manager. 
        """ # noqa: E501
        return self.__manager_fqdn

    @manager_fqdn.setter
    def manager_fqdn(self, manager_fqdn):

        self.__manager_fqdn = manager_fqdn

    @property
    def manager_node_ips(self):
        """`{ list[common.v1.config.IPAddress] }`
            \nPlatform cluster node IPs for the files manager. 
        """ # noqa: E501
        return self.__manager_node_ips

    @manager_node_ips.setter
    def manager_node_ips(self, manager_node_ips):

        self.__manager_node_ips = manager_node_ips

    @property
    def storage_provider_node_ips(self):
        """`{ list[common.v1.config.IPAddress] }`
            \nFiles storage provider cluster node IPs. 
        """ # noqa: E501
        return self.__storage_provider_node_ips

    @storage_provider_node_ips.setter
    def storage_provider_node_ips(self, storage_provider_node_ips):

        self.__storage_provider_node_ips = storage_provider_node_ips

    @property
    def storage_provider_ds_ip(self):
        """`{ common.v1.config.IPAddress }`
            
        """ # noqa: E501
        return self.__storage_provider_ds_ip

    @storage_provider_ds_ip.setter
    def storage_provider_ds_ip(self, storage_provider_ds_ip):

        self.__storage_provider_ds_ip = storage_provider_ds_ip

    @property
    def virtual_network_information(self):
        """`{ list[files.v4.infra.PlatformFilesVirtualNetworkInfo] }`
            \nList of virtual network information. 
        """ # noqa: E501
        return self.__virtual_network_information

    @virtual_network_information.setter
    def virtual_network_information(self, virtual_network_information):

        self.__virtual_network_information = virtual_network_information

    @property
    def v_center_connected(self):
        """`{ bool }`
            \nFlag to represent if the vCenter is connected to the cluster. 
        """ # noqa: E501
        return self.__v_center_connected

    @v_center_connected.setter
    def v_center_connected(self, v_center_connected):

        self.__v_center_connected = v_center_connected

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlatformInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlatformInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

