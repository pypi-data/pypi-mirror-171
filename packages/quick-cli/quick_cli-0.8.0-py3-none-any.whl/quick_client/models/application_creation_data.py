# coding: utf-8

"""
    Quick Manager

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from quick_client.configuration import Configuration


class ApplicationCreationData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'registry': 'str',
        'image_name': 'str',
        'tag': 'str',
        'replicas': 'int',
        'port': 'int',
        'image_pull_secret': 'str',
        'arguments': 'ApplicationCreationDataArguments'
    }

    attribute_map = {
        'name': 'name',
        'registry': 'registry',
        'image_name': 'imageName',
        'tag': 'tag',
        'replicas': 'replicas',
        'port': 'port',
        'image_pull_secret': 'imagePullSecret',
        'arguments': 'arguments'
    }

    def __init__(self, name=None, registry=None, image_name=None, tag=None, replicas=None, port=None, image_pull_secret=None, arguments=None, local_vars_configuration=None):  # noqa: E501
        """ApplicationCreationData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._registry = None
        self._image_name = None
        self._tag = None
        self._replicas = None
        self._port = None
        self._image_pull_secret = None
        self._arguments = None
        self.discriminator = None

        self.name = name
        self.registry = registry
        self.image_name = image_name
        self.tag = tag
        if replicas is not None:
            self.replicas = replicas
        if port is not None:
            self.port = port
        if image_pull_secret is not None:
            self.image_pull_secret = image_pull_secret
        if arguments is not None:
            self.arguments = arguments

    @property
    def name(self):
        """Gets the name of this ApplicationCreationData.  # noqa: E501


        :return: The name of this ApplicationCreationData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationCreationData.


        :param name: The name of this ApplicationCreationData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def registry(self):
        """Gets the registry of this ApplicationCreationData.  # noqa: E501


        :return: The registry of this ApplicationCreationData.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this ApplicationCreationData.


        :param registry: The registry of this ApplicationCreationData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and registry is None:  # noqa: E501
            raise ValueError("Invalid value for `registry`, must not be `None`")  # noqa: E501

        self._registry = registry

    @property
    def image_name(self):
        """Gets the image_name of this ApplicationCreationData.  # noqa: E501


        :return: The image_name of this ApplicationCreationData.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this ApplicationCreationData.


        :param image_name: The image_name of this ApplicationCreationData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and image_name is None:  # noqa: E501
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name

    @property
    def tag(self):
        """Gets the tag of this ApplicationCreationData.  # noqa: E501


        :return: The tag of this ApplicationCreationData.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ApplicationCreationData.


        :param tag: The tag of this ApplicationCreationData.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tag is None:  # noqa: E501
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def replicas(self):
        """Gets the replicas of this ApplicationCreationData.  # noqa: E501


        :return: The replicas of this ApplicationCreationData.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this ApplicationCreationData.


        :param replicas: The replicas of this ApplicationCreationData.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def port(self):
        """Gets the port of this ApplicationCreationData.  # noqa: E501


        :return: The port of this ApplicationCreationData.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ApplicationCreationData.


        :param port: The port of this ApplicationCreationData.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def image_pull_secret(self):
        """Gets the image_pull_secret of this ApplicationCreationData.  # noqa: E501


        :return: The image_pull_secret of this ApplicationCreationData.  # noqa: E501
        :rtype: str
        """
        return self._image_pull_secret

    @image_pull_secret.setter
    def image_pull_secret(self, image_pull_secret):
        """Sets the image_pull_secret of this ApplicationCreationData.


        :param image_pull_secret: The image_pull_secret of this ApplicationCreationData.  # noqa: E501
        :type: str
        """

        self._image_pull_secret = image_pull_secret

    @property
    def arguments(self):
        """Gets the arguments of this ApplicationCreationData.  # noqa: E501


        :return: The arguments of this ApplicationCreationData.  # noqa: E501
        :rtype: ApplicationCreationDataArguments
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this ApplicationCreationData.


        :param arguments: The arguments of this ApplicationCreationData.  # noqa: E501
        :type: ApplicationCreationDataArguments
        """

        self._arguments = arguments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationCreationData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplicationCreationData):
            return True

        return self.to_dict() != other.to_dict()
