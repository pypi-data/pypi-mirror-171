{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "/configurationadmin"
    },
    {
      "name": "configurationadmin"
    }
  ],
  "paths": {
    "/configurationadmin/v1/artifact/search": {
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Search code artifacts (INTERNAL)",
        "description": "",
        "operationId": "searchCodeArtifacts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeArtifactSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/artifact": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "List code artifacts (INTERNAL)",
        "description": "",
        "operationId": "listCodeArtifacts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Limit result to artifacts matching this search string",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order result",
            "required": false,
            "type": "string",
            "default": "groupID",
            "enum": [
              "id",
              "groupID",
              "artifactID",
              "version",
              "created",
              "lastUpdated",
              "status",
              "length"
            ]
          },
          {
            "name": "orderDesc",
            "in": "query",
            "description": "Sort results descending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Add new code artifact (INTERNAL)",
        "description": "",
        "operationId": "createArtifact",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeArtifactAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/artifact/{id}": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Fetch code artifact by hash ID (INTERNAL)",
        "description": "",
        "operationId": "getCodeArtifcatByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of artifact to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "If true, include encoded artifact binary data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/artifact/{groupID}/{artifactID}/{version}": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Fetch code artifact by groupID, artifactID and version (GAV) (INTERNAL)",
        "description": "",
        "operationId": "getCodeArtifactByGAV",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "GroupID of artifact to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "ArtifactID of artifact to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of artifact to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "If true, include encoded artifact binary data",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Add new code artifact (INTERNAL)",
        "description": "",
        "operationId": "createArtifactFromOctetStream",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "Artifact ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Artifact data",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/artifact/{groupID}/{artifactID}/{version}/download": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Download artifact by groupID, artifactID and version (GAV) (INTERNAL)",
        "description": "",
        "operationId": "downloadCodeArtifactByGAV",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "groupID",
            "in": "path",
            "description": "GroupID of artifact to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "ArtifactID of artifact to fetch",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of artifact to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/artifact/{id}/download": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Download artifact by ID (INTERNAL)",
        "description": "",
        "operationId": "downloadCodeArtifactByID",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of artifact to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/artifact/unused": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "List unused artifact (INTERNAL)",
        "description": "",
        "operationId": "listUnusedCodeArtifacts",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Mark unused artifacts as deleted (INTERNAL)",
        "description": "",
        "operationId": "deleteUnusedArtifacts",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeArtifact-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/search": {
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Search code profiles (INTERNAL)",
        "description": "",
        "operationId": "searchCodeProfiles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeProfileSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "List code profiles (INTERNAL)",
        "description": "",
        "operationId": "listCodeProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Sort results",
            "required": false,
            "type": "string",
            "default": "name",
            "enum": [
              "id",
              "name",
              "created",
              "lastUpdated"
            ]
          },
          {
            "name": "orderDesc",
            "in": "query",
            "description": "Sort results descending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Add new code profile (INTERNAL)",
        "description": "",
        "operationId": "createCodeProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeProfileAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{id}": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Get code profile by ID (INTERNAL)",
        "description": "",
        "operationId": "getCodeProfileByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of profile to fetch",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Update code profile (INTERNAL)",
        "description": "",
        "operationId": "updateCodeProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of profile to update",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeProfileUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Mark code profile as deleted (INTERNAL)",
        "description": "",
        "operationId": "deleteCodeProfile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of profile to delete",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{name}": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Get code profile by name (INTERNAL)",
        "description": "",
        "operationId": "getCodeProfileByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of profile to fetch",
            "required": true,
            "type": "string",
            "pattern": ".*[^0-9].*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{profileID}/artifacts/{artifactID}": {
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Attach artifact to profile (INTERNAL)",
        "description": "",
        "operationId": "attachArtifact",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileID",
            "in": "path",
            "description": "ID of profile to attach to",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "Hash ID of artifacts to attach",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Detach artifact to profile (INTERNAL)",
        "description": "",
        "operationId": "detachArtifact",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileID",
            "in": "path",
            "description": "ID of profile to detach from",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "Hash ID of artifact to detach",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{id}/duplicate/{name}": {
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Duplicate existing code profile (INTERNAL)",
        "description": "",
        "operationId": "duplicateCodeProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of profile to duplicate",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of new profile",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{profileName}/artifacts/{groupID}/{artifactID}/{version}": {
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Attach artifact to profile by profile name and artifact GAV (INTERNAL)",
        "description": "",
        "operationId": "attachArtifactByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileName",
            "in": "path",
            "description": "Name of profile to attach to",
            "required": true,
            "type": "string",
            "pattern": ".*[^0-9].*"
          },
          {
            "name": "groupID",
            "in": "path",
            "description": "GroupID of artifact to attach",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "ArtifactID of artifact to attach",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of artifact to attach",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Detach artifact from profile by profile name and artifact GAV (INTERNAL)",
        "description": "",
        "operationId": "detachArtifactByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileName",
            "in": "path",
            "description": "Name of profile to detach from",
            "required": true,
            "type": "string",
            "pattern": ".*[^0-9].*"
          },
          {
            "name": "groupID",
            "in": "path",
            "description": "GroupID of artifact to detach",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "ArtifactID of artifact to detach",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of artifact to detach",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{profileName}/artifacts/{groupID}/{artifactID}": {
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Detach artifact from profile by profile name and artifact GAV (INTERNAL)",
        "description": "Will detach all artifacts with given group ID artifact ID, regardless of version",
        "operationId": "detachArtifactByGA",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileName",
            "in": "path",
            "description": "Name of profile to detach from",
            "required": true,
            "type": "string",
            "pattern": ".*[^0-9].*"
          },
          {
            "name": "groupID",
            "in": "path",
            "description": "GroupID of artifact to detach",
            "required": true,
            "type": "string"
          },
          {
            "name": "artifactID",
            "in": "path",
            "description": "ArtifactID of artifact to detach",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/profile/{profileID}/artifacts": {
      "put": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Attach and detach artifact to given profile (INTERNAL)",
        "description": "",
        "operationId": "attachDetachArtifacts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileID",
            "in": "path",
            "description": "ID of profile to detach from",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Attach/Detach request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeProfileAttachArtifactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-CodeProfile-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/vacuum": {
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Vacuum code profiles and artifacts (INTERNAL)",
        "description": "Will delete all objects marked as deleted, which are older than historyLimit. Returns the number of deleted objects.",
        "operationId": "vacuum",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "historyLimit",
            "in": "query",
            "description": "Delete all delete-flagged objects older than this timestamp",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "List primary property mappers matching the provided criteria (INTERNAL)",
        "description": "",
        "operationId": "listPropertyMappers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of hits to return",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of hits to skip in the result set - useful for pagination",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Include deleted",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeConfig",
            "in": "query",
            "description": "Whether to include the property mapper config too",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Search by keywords",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywordMatch",
            "in": "query",
            "description": "Set match strategy for keyword search",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "keywordField",
            "in": "query",
            "description": "Set field strategy for keyword search",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "name",
                "shortName",
                "description",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "timestampMatch",
            "in": "query",
            "description": "Set match strategy for timestamp filtering",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "timestampField",
            "in": "query",
            "description": "Set field strategy for timestamp filtering",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "createdTimestamp",
                "lastUpdatedTimestamp",
                "deletedTimestamp"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Lower bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Upper bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field(s) to sort by - refer to the search POST endpoint to see which fields are permitted",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Create new property mapper (INTERNAL)",
        "description": "",
        "operationId": "createPropertyMapper",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Property mapper add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PropertyMapperAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper/{idOrShortName}": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Get a property mapper by its id or shortname.Fetching by short name will always return the master revision.Fetching by ID will return the specifically requested property mapper revision. (INTERNAL)",
        "description": "",
        "operationId": "getPropertyMapper",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortName of a property mapper",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeConfig",
            "in": "query",
            "description": "Whether to include the property mapper config too",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Update a property mapper. This creates a revision based on the contents of the primary version at the time the request is made.The new primary property mapper's contents reflects the update request. (INTERNAL)",
        "description": "",
        "operationId": "updatePropertyMapper",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortname of a property mapper",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Property mapper update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PropertyMapperUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Delete a property mapper by its id or shortname. This creates a revision with the same contents as the primary version at the time the request is made.The new primary is, however, flagged as deleted. NB: You can only delete the current primary and only if it is not already deleted. (INTERNAL)",
        "description": "",
        "operationId": "deletePropertyMapper",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortname of a property mapper",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper/{idOrShortName}/restore": {
      "put": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Restore a property mapper by its id or shortname. This creates a revision with the same contents as the primary version at the time the request is made.The new primary is, however, no longer flagged as deleted. NB: You can only restore the current primary and only if it is already deleted. (INTERNAL)",
        "description": "",
        "operationId": "restorePropertyMapper",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortname of a property mapper",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper/{idOrShortName}/revisions/{revision}": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Get a property mapper by its id or shortname and revision number (INTERNAL)",
        "description": "",
        "operationId": "getPropertyMapperRevision",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortName of a property mapper",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision",
            "in": "path",
            "description": "Property mapper revision number",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "includeConfig",
            "in": "query",
            "description": "Whether to include the property mapper config too",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper/{idOrShortName}/revisions": {
      "get": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "List a property mapper's - retrieved by its id or shortname - revisions. (INTERNAL)",
        "description": "",
        "operationId": "listPropertyMapperRevisions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortname of a property mapper",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapperInfo-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper/search": {
      "post": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Search for primary property mappers (INTERNAL)",
        "description": "",
        "operationId": "searchPropertyMappers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Property mapper search request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PropertyMapperSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/propertymapper/{idOrShortName}/revisions/{revision}/rollback": {
      "put": {
        "tags": [
          "/configurationadmin"
        ],
        "summary": "Rollback a property mapper to the requested revision. Similar to updating a property mapper, this creates a revision based on the contents of the primary version at the time the request is made. The new primary property mapper will contain the same values as the rollback target version.NB: You cannot rollback to a deleted version or to the current primary. (INTERNAL)",
        "description": "",
        "operationId": "rollbackPropertyMapper",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or shortname of a property mapper",
            "required": true,
            "type": "string"
          },
          {
            "name": "revision",
            "in": "path",
            "description": "Revision to rollback to",
            "required": true,
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-PropertyMapper-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{id}/comment": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Add a comment to configuration host (INTERNAL)",
        "description": "",
        "operationId": "addHostComment",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of host to comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "List configuration hosts (INTERNAL)",
        "description": "",
        "operationId": "listHosts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to hosts matching this searchstring",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeComments",
            "in": "query",
            "description": "Include comments in output",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Include deleted hosts in results",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Sort results",
            "required": false,
            "type": "string",
            "default": "name",
            "enum": [
              "id",
              "name"
            ]
          },
          {
            "name": "orderDesc",
            "in": "query",
            "description": "Sort results descending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Create new configuration host (INTERNAL)",
        "description": "",
        "operationId": "createHost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationHostAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{id}": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Fetch configuration host (INTERNAL)",
        "description": "",
        "operationId": "viewHost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of host to fetch",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Delete configuration host (INTERNAL)",
        "description": "",
        "operationId": "deleteHost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of host to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deleteInstances",
            "in": "query",
            "description": "If true, force deletion of instances for this host first",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{sourceID}/duplicate": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Duplicate a configuration host (INTERNAL)",
        "description": "",
        "operationId": "duplicateHost",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "path",
            "description": "ID of host to duplicate",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "newHostName",
            "in": "formData",
            "description": "New name of duplicate host",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/agent/{user}/host": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Fetch configuration host by agent user (INTERNAL)",
        "description": "",
        "operationId": "getHostByAgentUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "description": "Username or ID of agent user to fetch host for",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "ID or name of domain to lookup user in. Defaults to current users domain",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/search": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Search configuration hosts (INTERNAL)",
        "description": "",
        "operationId": "searchHosts",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationHostSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{hostID}/setupdefault": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Create default instances on configuration host (INTERNAL)",
        "description": "",
        "operationId": "setupDefaultConfiguration",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "hostID",
            "in": "path",
            "description": "ID of host to add instances to",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "packagename",
            "in": "formData",
            "description": "Instance package names",
            "required": false,
            "type": "string",
            "enum": [
              "processingStack"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{hostID}": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Update configuration host (INTERNAL)",
        "description": "",
        "operationId": "updateHost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationHostUpdateRequest"
            }
          },
          {
            "name": "hostID",
            "in": "path",
            "description": "ID of host to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{id}/monitoring/disable": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Disable monitoring of configuration host (INTERNAL)",
        "description": "",
        "operationId": "disableHostMonitoring",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of host to disable monitoring on",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Reason for disabling monitoring",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{id}/monitoring/enable": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Enable monitoring of configuration host (INTERNAL)",
        "description": "",
        "operationId": "enableHostMonitoring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of host to enable monitoring on",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/host/{id}/monitoring/schedule": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Schedule downtime for configuration host (INTERNAL)",
        "description": "",
        "operationId": "scheduleHostMonitoring",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of host to schedule downtime for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "formData",
            "description": "Timestamp to schedule downtime from",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "formData",
            "description": "Timestamp to schedule downtime to",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Reason for scheduling downtime",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationHost-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "List configuration instances (INTERNAL)",
        "description": "",
        "operationId": "listInstances",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit results to instances matching this searchstring",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeComments",
            "in": "query",
            "description": "Include comments in output",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Include deleted instances",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "templateID",
            "in": "query",
            "description": "Limit results to instances with these templates",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "hostID",
            "in": "query",
            "description": "Limit results to instances on these hosts",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Create new configuration instance (INTERNAL)",
        "description": "",
        "operationId": "createInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationInstanceAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{id}/comment": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Add a comment to configuration instance (INTERNAL)",
        "description": "",
        "operationId": "addInstanceComment",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to comment",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{id}": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Fetch configuration instance (INTERNAL)",
        "description": "",
        "operationId": "viewInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to fetch",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Update configuration instance (INTERNAL)",
        "description": "",
        "operationId": "updateInstance",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationInstanceUpdateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Delete configuration instance (INTERNAL)",
        "description": "",
        "operationId": "deleteInstance",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{instanceID}/duplicate": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Duplicate a configuration instance (INTERNAL)",
        "description": "",
        "operationId": "duplicateInstance",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "instanceID",
            "in": "path",
            "description": "ID of instance to duplicate",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/search": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Search configuration instances (INTERNAL)",
        "description": "",
        "operationId": "searchInstances",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationInstanceSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{id}/revisions": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "List configuration instance revisions (INTERNAL)",
        "description": "",
        "operationId": "instanceRevisions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to fetch revisions for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{id}/monitoring/enable": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Enable monitoring of configuration instance (INTERNAL)",
        "description": "",
        "operationId": "enableInstanceMonitoring",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to enable monitoring on",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{id}/monitoring/disable": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Disable monitoring of configuration instance (INTERNAL)",
        "description": "",
        "operationId": "disableInstanceMonitoring",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to disable monitoring on",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Reason for disabling monitoring",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/instance/{id}/monitoring/schedule": {
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Schedule downtime for configuration instance (INTERNAL)",
        "description": "",
        "operationId": "scheduleInstanceMonitoring",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of instance to schedule downtime for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "formData",
            "description": "Timestamp to schedule downtime from",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "to",
            "in": "formData",
            "description": "Timestamp to schedule downtime to",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "comment",
            "in": "formData",
            "description": "Reason for scheduling downtime",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/template": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "List configuration templates (INTERNAL)",
        "description": "",
        "operationId": "listTemplates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeComments",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Sort results",
            "required": false,
            "type": "string",
            "default": "name",
            "enum": [
              "id",
              "name"
            ]
          },
          {
            "name": "orderDesc",
            "in": "query",
            "description": "Sort results descending",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Create new configuration template (INTERNAL)",
        "description": "",
        "operationId": "createTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationTemplateAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/template/{id}/duplicate": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Create a duplicate of a configuration template (INTERNAL)",
        "description": "",
        "operationId": "duplicateTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of template to duplicate",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/template/{id}/comment": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Add a comment to a configuration template (INTERNAL)",
        "description": "",
        "operationId": "addTemplateComment",
        "consumes": [
          "text/plain"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of template to add comment to",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/template/{id}": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Fetch configuration template (INTERNAL)",
        "description": "",
        "operationId": "viewTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of template to fetch",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationInstance-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Update configuration template (INTERNAL)",
        "description": "",
        "operationId": "updateTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationTemplateUpdateRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of template to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Delete configuration template (INTERNAL)",
        "description": "",
        "operationId": "deleteTemplate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of template to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/template/search": {
      "post": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "Search configuration templates (INTERNAL)",
        "description": "",
        "operationId": "searchTemplates",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationTemplateSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/configurationadmin/v1/template/{id}/revisions": {
      "get": {
        "tags": [
          "configurationadmin"
        ],
        "summary": "List revisions of configuration template (INTERNAL)",
        "description": "",
        "operationId": "templateRevisions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of template",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of revisions to fetch",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ConfigurationTemplate-list"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CodeProfileUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "finalized": {
          "type": "boolean"
        },
        "useForUnknown": {
          "type": "boolean"
        },
        "setAsDefault": {
          "type": "boolean"
        }
      }
    },
    "ConfigurationInstanceUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "configurationID": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "hostID": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "If set, assign instance to given configuration host.",
          "minimum": 0
        },
        "parentID": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "If set, set parent instance for this instance (on same configuration host)."
        },
        "information": {
          "type": "string",
          "position": 0,
          "description": "If set, change information field for instance. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "properties": {
          "type": "object",
          "position": 0,
          "description": "If set, set these properties for instance. Property with null value will delete existing property.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identifiers": {
          "type": "object",
          "position": 0,
          "description": "If set, set these identifiers for instance. Identifier with null value will delete existing identifier.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "codeProfile": {
          "type": "string",
          "position": 0,
          "description": "Name of code profile to use. If null, do not change. If blank, reset to template profile. => [a-zA-Z0-9_\\-\\.]*"
        }
      }
    },
    "ResultStash-ConfigurationInstance-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/ConfigurationInstance"
          }
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "ResultStash-CodeArtifact-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/CodeArtifact"
          }
        }
      }
    },
    "CodeArtifact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "groupID": {
          "type": "string"
        },
        "artifactID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string",
          "enum": [
            "UNUSED",
            "ACTIVE",
            "DELETED"
          ]
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "createdByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "length": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "string"
        }
      }
    },
    "PropertyMapperInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the property mapper configuration"
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Unique short name of the property mapper configuration"
        },
        "masterID": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of current version"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Property mapper version number"
        }
      }
    },
    "ConfigurationInstanceInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "revision": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "template": {
          "readOnly": true,
          "$ref": "#/definitions/ConfigurationTemplateInfo"
        },
        "host": {
          "readOnly": true,
          "$ref": "#/definitions/ConfigurationHostInfo"
        },
        "parent": {
          "readOnly": true,
          "$ref": "#/definitions/ConfigurationInstanceInfo"
        }
      }
    },
    "ResultStash-ConfigurationInstance-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/ConfigurationInstance"
        }
      }
    },
    "CodeProfileAddRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "artifactsToAttach": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "finalize": {
          "type": "boolean"
        }
      }
    },
    "ResultStash-CodeProfile-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/CodeProfile"
        }
      }
    },
    "ConfigurationInstanceAddRequest": {
      "type": "object",
      "properties": {
        "templateID": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "hostID": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "parentID": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "information": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identifiers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "codeProfile": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        }
      }
    },
    "ResultStash-ConfigurationTemplate-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/ConfigurationTemplate"
          }
        }
      }
    },
    "ConfigurationTemplateAddRequest": {
      "type": "object",
      "required": [
        "codeProfile",
        "configuration",
        "name",
        "shortName"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "shortName": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "mnemonic": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "configuration": {
          "type": "string",
          "description": "format:xml"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "information": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "dependsOnID": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "codeProfile": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "startupIndex": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Specify the startup order of this component (default 0)",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "PropertyMapperSearchSubCriteria": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "shortName",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps fields will be filtered with start/endTimestamp (default lastUpdatedTimestamp)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "deletedTimestamp"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to include deleted property mappers (default false)",
          "default": false
        },
        "includeConfig": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to include the property mapper JSON config in the result set (default false)",
          "default": false
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criteria which are applied with logical OR by default",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PropertyMapperSearchSubCriteria"
          }
        },
        "idOrShortName": {
          "type": "array",
          "position": 0,
          "description": "Filter by specific property mapper IDs or shortName.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true, objects matching this criteria will be excluded (default false)",
          "default": false
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true, objects matching this criteria are required (logical AND-ed together with parent criteria) (default false)",
          "default": false
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ConfigurationHostUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "information": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agentUser": {
          "type": "string",
          "position": 0,
          "description": "Name or ID of the agent user to associate to this host. If not set, do not change."
        },
        "preprod": {
          "type": "boolean",
          "position": 0,
          "description": "If set, change the PREPROD flag on this host"
        },
        "setLabels": {
          "type": "array",
          "position": 0,
          "description": "Labels to set on this host (overwrite existing)",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "addLabels": {
          "type": "array",
          "position": 0,
          "description": "Labels to add to this host (in addition to existing, will ignore existing labels)",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "removeLabels": {
          "type": "array",
          "position": 0,
          "description": "Labels to remove from this host (will ignore labels not set)",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConfigurationInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "scheduledDowntimeFrom": {
          "type": "integer",
          "format": "int64"
        },
        "scheduledDowntimeTo": {
          "type": "integer",
          "format": "int64"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "masterID": {
          "type": "integer",
          "format": "int32"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "information": {
          "type": "string"
        },
        "codeProfile": {
          "$ref": "#/definitions/CodeProfile"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "identifiers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "parent": {
          "$ref": "#/definitions/ConfigurationInstanceInfo"
        },
        "host": {
          "$ref": "#/definitions/ConfigurationHostInfo"
        },
        "template": {
          "$ref": "#/definitions/ConfigurationTemplateInfo"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "CONTROLLED_VERSION",
              "DISABLED_MONITORING"
            ]
          }
        }
      }
    },
    "ConfigurationTemplateInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "revision": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "mnemonic": {
          "type": "string"
        }
      }
    },
    "ResultStash-ConfigurationHost-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/ConfigurationHost"
          }
        }
      }
    },
    "PropertyMapperAddRequest": {
      "type": "object",
      "required": [
        "configuration",
        "name",
        "shortName"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the property mapper configuration => [a-zA-Z0-9_\\-\\.]*"
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Unique short name of the property mapper configuration => [a-zA-Z0-9_\\-\\.]*"
        },
        "configuration": {
          "type": "string",
          "position": 0,
          "description": "The JSON configuration"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "The property mapper description (default null) => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "ResultStash-ConfigurationTemplate-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/ConfigurationTemplate"
        }
      }
    },
    "ConfigurationHostAddRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "information": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agentUser": {
          "type": "string",
          "position": 0,
          "description": "Name or ID of the agent user to associate to this host."
        },
        "preprod": {
          "type": "boolean",
          "position": 0,
          "description": "If true, mark this host as a PREPROD host. (default false)",
          "default": false
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "Labels to add to this host",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "ID or shortname of customer to bind this host to. If not set, this host will not be bound to a customer."
        }
      }
    },
    "ResultStash-PropertyMapper-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/PropertyMapper"
        }
      }
    },
    "ConfigurationInstanceSearchCriteria": {
      "type": "object",
      "properties": {
        "instanceID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "templateID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "hostID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConfigurationInstanceSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "includeComments": {
          "type": "boolean",
          "position": 0,
          "description": "If true, include comments in output. (default false)",
          "default": false
        },
        "includeProperties": {
          "type": "boolean",
          "position": 0,
          "description": "If true, include properties in output. (default true)",
          "default": true
        },
        "template": {
          "type": "array",
          "position": 0,
          "description": "If set, filter instances by template ID or shortname.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "instance": {
          "type": "array",
          "position": 0,
          "description": "If set, filter instances by ID.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "host": {
          "type": "array",
          "position": 0,
          "description": "If set, filter instances by host ID or hostname.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "parentID": {
          "type": "array",
          "position": 0,
          "description": "If set, filter instances by parent instance ID.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "codeProfile": {
          "type": "array",
          "position": 0,
          "description": "If set, filter instances by active code profile.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "If set, filter instances matching these keywords.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "masterID": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "If set, only include instance revisions of given master. If not set, revisions are excluded."
        },
        "codeProfileOverride": {
          "type": "boolean",
          "position": 0,
          "description": "If true, only return instances with overridden code profile. If false, exclude. If not set, do not filter."
        },
        "inDowntime": {
          "type": "boolean",
          "position": 0,
          "description": "If true, only return instances which are in scheduled downtime, or whose host is in downtime. If false, exclude. If not set, do not filter."
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "startupIndex",
              "hostID",
              "hostName",
              "templateID",
              "templateShortName",
              "created",
              "lastUpdated",
              "-id",
              "-startupIndex",
              "-hostID",
              "-hostName",
              "-templateID",
              "-templateShortName",
              "-created",
              "-lastUpdated"
            ]
          }
        }
      }
    },
    "CodeArtifactAddRequest": {
      "type": "object",
      "required": [
        "artifactID",
        "data",
        "groupID",
        "version"
      ],
      "properties": {
        "groupID": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "artifactID": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "version": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "data": {
          "type": "string",
          "minLength": 10,
          "maxLength": 2147483647
        }
      }
    },
    "ConfigurationTemplateUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "mnemonic": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "shortName": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "configuration": {
          "type": "string",
          "description": "format:xml"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "information": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "dependsOnID": {
          "type": "integer",
          "format": "int32"
        },
        "codeProfile": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "startupIndex": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "If set, change the startup order of this component",
          "minimum": 0
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        }
      }
    },
    "GAV": {
      "type": "object",
      "properties": {
        "groupID": {
          "type": "string"
        },
        "artifactID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "ResultStash-ConfigurationHost-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/ConfigurationHost"
        }
      }
    },
    "CodeArtifactSearchCriteria": {
      "type": "object",
      "properties": {
        "searchString": {
          "type": "string"
        },
        "id": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "groupID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "artifactID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "UNUSED",
              "ACTIVE",
              "DELETED"
            ]
          }
        },
        "gav": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/GAV"
          }
        },
        "includeData": {
          "type": "boolean"
        },
        "includeCreatedTimestamp": {
          "type": "boolean"
        },
        "includeLastUpdatedTimestamp": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CodeArtifactSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "groupID",
              "artifactID",
              "version",
              "created",
              "lastUpdated",
              "status",
              "length",
              "-id",
              "-groupID",
              "-artifactID",
              "-version",
              "-created",
              "-lastUpdated",
              "-status",
              "-length"
            ]
          }
        }
      }
    },
    "ConfigurationTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "mnemonic": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "configurationData": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "startupIndex": {
          "type": "integer",
          "format": "int32"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "masterID": {
          "type": "integer",
          "format": "int32"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "codeProfile": {
          "$ref": "#/definitions/CodeProfile"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "information": {
          "type": "string"
        },
        "dependsOn": {
          "$ref": "#/definitions/ConfigurationTemplate"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "encodedFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "CONTROLLED_VERSION",
              "DISABLED_MONITORING"
            ]
          }
        }
      }
    },
    "ResultStash-PropertyMapperInfo-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/PropertyMapperInfo"
          }
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConfigurationHostSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConfigurationHostSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "If set, filter hosts matching these keywords.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeComments": {
          "type": "boolean",
          "position": 0,
          "description": "If true, include comments on returned host configuration objects (default false)",
          "default": false
        },
        "includeProperties": {
          "type": "boolean",
          "position": 0,
          "description": "If true, include properties on returned host configuration objects (default true)",
          "default": true
        },
        "agentUser": {
          "type": "array",
          "position": 0,
          "description": "If set, limit the search result to hosts which are bound to these agents (id or username)",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "If set, limit the search result to hosts which are bound to these customers (id or username)",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "If set, limit the search result to hosts having any of these labels",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "host": {
          "type": "array",
          "position": 0,
          "description": "If set, filter hosts by ID or hostname.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "inDowntime": {
          "type": "boolean",
          "position": 0,
          "description": "If true, only return hosts which are in scheduled downtime. If false, exclude. If not set, do not filter."
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "name",
              "-id",
              "-name"
            ]
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Only include objects which have includeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "DISABLED_MONITORING",
              "PREPROD"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "DISABLED_MONITORING",
              "PREPROD"
            ]
          }
        }
      }
    },
    "CodeProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "integer",
          "format": "int64"
        },
        "createdByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "artifacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeArtifact"
          }
        },
        "deleted": {
          "type": "boolean"
        },
        "finalized": {
          "type": "boolean"
        }
      }
    },
    "CodeProfileAttachArtifactRequest": {
      "type": "object",
      "properties": {
        "artifactsToAttach": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "artifactsToDetach": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConfigurationHost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "scheduledDowntimeFrom": {
          "type": "integer",
          "format": "int64"
        },
        "scheduledDowntimeTo": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "information": {
          "type": "string"
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "agentUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "labels": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "encodedFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "DISABLED_MONITORING",
              "PREPROD"
            ]
          }
        }
      }
    },
    "PropertyMapperSearchRequest": {
      "type": "object",
      "properties": {
        "sortBy": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "shortName",
              "name",
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "deletedTimestamp",
              "-id",
              "-shortName",
              "-name",
              "-createdTimestamp",
              "-lastUpdatedTimestamp",
              "-deletedTimestamp"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "shortName",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps fields will be filtered with start/endTimestamp (default lastUpdatedTimestamp)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdTimestamp",
              "lastUpdatedTimestamp",
              "deletedTimestamp"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to include deleted property mappers (default false)",
          "default": false
        },
        "includeConfig": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to include the property mapper JSON config in the result set (default false)",
          "default": false
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criteria which are applied with logical OR by default",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PropertyMapperSearchSubCriteria"
          }
        },
        "idOrShortName": {
          "type": "array",
          "position": 0,
          "description": "Filter by specific property mapper IDs or shortName.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit maximum amount of results (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip specified amount of results (default 0)",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "CodeProfileSearchCriteria": {
      "type": "object",
      "properties": {
        "searchString": {
          "type": "string"
        },
        "usingArtifact": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "includeArtifacts": {
          "type": "boolean"
        },
        "includeCreatedTimestamp": {
          "type": "boolean"
        },
        "includeLastUpdatedTimestamp": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/CodeProfileSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "name",
              "created",
              "lastUpdated",
              "-id",
              "-name",
              "-created",
              "-lastUpdated"
            ]
          }
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the comment was added."
        },
        "user": {
          "position": 0,
          "description": "Who added the comment.",
          "$ref": "#/definitions/UserInfo"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment's text."
        }
      }
    },
    "ConfigurationHostInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "agentUserID": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "ConfigurationTemplateSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ConfigurationTemplateSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "codeProfile": {
          "type": "array",
          "position": 0,
          "description": "If true, filter on templates having any of these code profiles.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "If true, filter on templates where name matches these keywords.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "template": {
          "type": "array",
          "position": 0,
          "description": "If set, filter on templates by ID or shortname.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "dependingOnID": {
          "type": "array",
          "position": 0,
          "description": "If set, filter on templates set to depend on any of the given template IDs.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "includeComments": {
          "type": "boolean",
          "position": 0,
          "description": "If true, also include comments on output. (default false)",
          "default": false
        },
        "includeConfiguration": {
          "type": "boolean",
          "position": 0,
          "description": "If true, also include configuration on output. (default true)",
          "default": true
        },
        "includeProperties": {
          "type": "boolean",
          "position": 0,
          "description": "If true, also include properties on output. (default true)",
          "default": true
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "name",
              "-id",
              "-name"
            ]
          }
        }
      }
    },
    "PropertyMapper": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the property mapper configuration"
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Unique short name of the property mapper configuration"
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Property mapper version number"
        },
        "master": {
          "position": 0,
          "description": "Meta data of the current version; null if this is the current version (default null)",
          "$ref": "#/definitions/PropertyMapperInfo"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags including deleted and controlledVersion",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "controlledVersion"
            ]
          }
        },
        "configuration": {
          "type": "string",
          "position": 0,
          "description": "The JSON configuration"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "The property mapper description (default null)"
        },
        "createdByUser": {
          "position": 0,
          "description": "Metadata i.e. id, shortName, name, domain, and customer of the user who created the property mapper (default null)",
          "$ref": "#/definitions/UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the property mapper was created in milliseconds since epoch (default 0)",
          "default": 0
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "Metadata i.e. id, shortName, name, domain, and customer of the user who most recently updated the property mapper (default null)",
          "$ref": "#/definitions/UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the property mapper was last updated in milliseconds since epoch (default 0)",
          "default": 0
        },
        "deletedByUser": {
          "position": 0,
          "description": "Metadata i.e. id, shortName, name, domain, and customer of the user who deleted the property mapper (default null)",
          "$ref": "#/definitions/UserInfo"
        },
        "deletedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the property mapper was deleted in milliseconds since epoch (default 0)",
          "default": 0
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResultStash-CodeProfile-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/CodeProfile"
          }
        }
      }
    },
    "ResultStash-PropertyMapper-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/PropertyMapper"
          }
        }
      }
    },
    "ResultStash-CodeArtifact-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/CodeArtifact"
        }
      }
    },
    "PropertyMapperUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the property mapper configuration => [a-zA-Z0-9_\\-\\.]*"
        },
        "configuration": {
          "type": "string",
          "position": 0,
          "description": "The JSON configuration"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "The property mapper description => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    }
  }
}