{"version":3,"file":"7eefade7.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;;;;;;;;;;;;;;;;;;ACrBA;;AC8CA;;AAKA;;AAaA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAEA;AAEA;AAIA;AACA;AAIA;;AAEA;AACA;;AAGA;;AAMA;AACA;;;AAGA;;AAIA;AACA;;;AAGA;;AAKA;AACA;;;AAGA;AAmBA;;AAGA;;AAIA;AAEA;AAGA;AACA;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9IA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-generic-entity-row.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { DOMAINS_INPUT_ROW } from \"../../../common/const\";\nimport { toggleAttribute } from \"../../../common/dom/toggle_attribute\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-relative-time\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { createEntityNotFoundWarning } from \"./hui-warning\";\n\nclass HuiGenericEntityRow extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public config?: EntitiesCardEntityConfig;\n\n  @property() public secondaryText?: string;\n\n  @property({ type: Boolean }) public hideName = false;\n\n  // Allows to control if this row should capture the user interaction, e.g. with its\n  // toggle switch, button or input field. Some domains dynamically decide what to show\n  // => static determination will not work => the caller has to pass the desired value in.\n  // Same applies for custom components that want to override the default behavior.\n  // Default behavior is controlled by DOMAINS_INPUT_ROW.\n  @property({ type: Boolean }) public catchInteraction?;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.config) {\n      return html``;\n    }\n    const stateObj = this.config.entity\n      ? this.hass.states[this.config.entity]\n      : undefined;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this.config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const domain = computeDomain(this.config.entity);\n    // By default, we always show a pointer, since if there is no explicit configuration provided,\n    // the frontend always assumes \"more-info\" in the action handler. We only need to hide the pointer\n    // if the tap action is explicitly set to \"none\".\n    const pointer = !(\n      this.config.tap_action && this.config.tap_action.action === \"none\"\n    );\n\n    const hasSecondary = this.secondaryText || this.config.secondary_info;\n    const name = this.config.name ?? computeStateName(stateObj);\n\n    return html`\n      <state-badge\n        class=${classMap({\n          pointer,\n        })}\n        .hass=${this.hass}\n        .stateObj=${stateObj}\n        .overrideIcon=${this.config.icon}\n        .overrideImage=${this.config.image}\n        .stateColor=${this.config.state_color}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this.config!.hold_action),\n          hasDoubleClick: hasAction(this.config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(pointer ? \"0\" : undefined)}\n      ></state-badge>\n      ${!this.hideName\n        ? html` <div\n            class=\"info ${classMap({\n              pointer,\n              \"text-content\": !hasSecondary,\n            })}\"\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(this.config!.hold_action),\n              hasDoubleClick: hasAction(this.config!.double_tap_action),\n            })}\n            .title=${name}\n          >\n            ${this.config.name || computeStateName(stateObj)}\n            ${hasSecondary\n              ? html`\n                  <div class=\"secondary\">\n                    ${this.secondaryText ||\n                    (this.config.secondary_info === \"entity-id\"\n                      ? stateObj.entity_id\n                      : this.config.secondary_info === \"last-changed\"\n                      ? html`\n                          <ha-relative-time\n                            .hass=${this.hass}\n                            .datetime=${stateObj.last_changed}\n                            capitalize\n                          ></ha-relative-time>\n                        `\n                      : this.config.secondary_info === \"last-updated\"\n                      ? html`\n                          <ha-relative-time\n                            .hass=${this.hass}\n                            .datetime=${stateObj.last_updated}\n                            capitalize\n                          ></ha-relative-time>\n                        `\n                      : this.config.secondary_info === \"last-triggered\"\n                      ? stateObj.attributes.last_triggered\n                        ? html`\n                            <ha-relative-time\n                              .hass=${this.hass}\n                              .datetime=${stateObj.attributes.last_triggered}\n                              capitalize\n                            ></ha-relative-time>\n                          `\n                        : this.hass.localize(\n                            \"ui.panel.lovelace.cards.entities.never_triggered\"\n                          )\n                      : this.config.secondary_info === \"position\" &&\n                        stateObj.attributes.current_position !== undefined\n                      ? `${this.hass.localize(\"ui.card.cover.position\")}: ${\n                          stateObj.attributes.current_position\n                        }`\n                      : this.config.secondary_info === \"tilt-position\" &&\n                        stateObj.attributes.current_tilt_position !== undefined\n                      ? `${this.hass.localize(\n                          \"ui.card.cover.tilt_position\"\n                        )}: ${stateObj.attributes.current_tilt_position}`\n                      : this.config.secondary_info === \"brightness\" &&\n                        stateObj.attributes.brightness\n                      ? html`${Math.round(\n                          (stateObj.attributes.brightness / 255) * 100\n                        )}\n                        %`\n                      : \"\")}\n                  </div>\n                `\n              : \"\"}\n          </div>`\n        : html``}\n      ${this.catchInteraction ?? !DOMAINS_INPUT_ROW.includes(domain)\n        ? html`<div\n            class=\"text-content value ${classMap({\n              pointer,\n            })}\"\n            @action=${this._handleAction}\n            .actionHandler=${actionHandler({\n              hasHold: hasAction(this.config!.hold_action),\n              hasDoubleClick: hasAction(this.config!.double_tap_action),\n            })}\n          >\n            <div class=\"state\"><slot></slot></div>\n          </div>`\n        : html`<slot></slot>`}\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    toggleAttribute(\n      this,\n      \"no-secondary\",\n      !this.secondaryText && !this.config?.secondary_info\n    );\n    if (changedProps.has(\"hass\")) {\n      toggleAttribute(this, \"rtl\", computeRTL(this.hass!));\n    }\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this.config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n        flex-direction: row;\n      }\n      .info {\n        margin-left: 16px;\n        margin-right: 8px;\n        flex: 1 1 30%;\n      }\n      .info,\n      .info > * {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .flex ::slotted(*) {\n        margin-left: 8px;\n        min-width: 0;\n      }\n      .flex ::slotted([slot=\"secondary\"]) {\n        margin-left: 0;\n      }\n      .secondary,\n      ha-relative-time {\n        color: var(--secondary-text-color);\n      }\n      state-badge {\n        flex: 0 0 40px;\n      }\n      :host([rtl]) .flex {\n        margin-left: 0;\n        margin-right: 16px;\n      }\n      :host([rtl]) .flex ::slotted(*) {\n        margin-left: 0;\n        margin-right: 8px;\n      }\n      .pointer {\n        cursor: pointer;\n      }\n      .state {\n        text-align: right;\n      }\n      .state.rtl {\n        text-align: left;\n      }\n      .value {\n        direction: ltr;\n      }\n    `;\n  }\n}\ncustomElements.define(\"hui-generic-entity-row\", HuiGenericEntityRow);\n"],"names":[],"sourceRoot":""}