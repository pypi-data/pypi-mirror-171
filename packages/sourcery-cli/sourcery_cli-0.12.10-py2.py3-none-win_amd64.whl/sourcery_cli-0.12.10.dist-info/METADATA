Metadata-Version: 2.1
Name: sourcery-cli
Version: 0.12.10
Summary: Magically refactor Python
Home-page: https://github.com/sourcery-ai/sourcery
Author: Sourcery AI
Author-email: hello@sourcery.ai
License: Proprietary
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Environment :: Plugins
Classifier: Intended Audience :: Developers
Classifier: License :: Other/Proprietary License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Text Editors :: Integrated Development Environments (IDE)
Description-Content-Type: text/markdown

![Sourcery Logo](https://sourcery.ai/sourcery-dark.svg)

# _Sourcery_ Command Line Interface

## Installation and usage

### Installation

_Sourcery_ command line interface can be installed by running:

```
pip install sourcery-cli
```

### Login

Once installed you need to log in with:

```
sourcery login
```

which will open up a browser tab and ask for confirmation. This is only needed
once per computer.

You can also log in via providing your token:

```
sourcery login --token YOUR_TOKEN
```

## Usage

To review a file or a directory (recursively) with Sourcery, use the
`sourcery review` command:

```
sourcery review example_file.py
```

To apply the changes suggested by Sourcery, use the `--in-place` option:

```
sourcery review --in-place {file_or_directory}
```

## Command Line Options

_Sourcery_ provides a few options for running. You can list them by running
`sourcery review --help`

```
sourcery review --help


Usage: sourcery review [OPTIONS] [SRC]...

  Review SRC files/directories. Reads from stdin when SRC is -

Options:
  -c, --code TEXT     Refactor the code passed in as a string.
  --diff TEXT         Run only on changed code returned by a diff command (e.g. "git diff")
  -i, --include TEXT  Only run the specified rule. This option can be used
                      multiple times.
  --exclude TEXT      Do not run the specified rule. This option can be used
                      multiple times.
  --check             Return exit code 1 if unsolved issues found.
  --in-place          Make changes to files in place
  --config-path FILE  Path of the custom project config YAML file
  --csv               Output in CSV format
  --verbose           Verbose output with explanation and code snippets.
  -h, --help          Show this message and exit.
```

## Configuration

_Sourcery_ reads configuration settings from `.sourcery.yaml` in the project
directory. Full details are described
[here](https://docs.sourcery.ai/Configuration/).

## Precommit Hook

_Sourcery_ works great with [pre-commit](https://pre-commit.com). Once you
[have it installed](https://pre-commit.com/#install), add this to the
`.pre-commit-config.yaml` in your repository:

```yaml
repos:
  - repo: https://github.com/sourcery-ai/sourcery
    rev: v0.12.10
    hooks:
      - id: sourcery
        # If you want Sourcery to automatically apply the suggested changes,
        # add the `--in-place` option:
        args: [--in-place]
```

If Sourcery is the first pre-commit hook that you've added to your project,
you'll also need to run `pre-commit install`.

## Continuous Integration

Here's a script to run _Sourcery_ in CI that will fail the job if any
refactorings are found:

```sh
# Install sourcery
pip install sourcery-cli
# Login - store SOURCERY_TOKEN in a secret/masked environment variable
sourcery login --token $SOURCERY_TOKEN
# Review only changed code by passing in a diff command to filter Sourcery output
sourcery refactor --check --diff="git diff main" .
```
