# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.infra.PlatformFilesNvmInfo import PlatformFilesNvmInfo  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.infra.PlatformInfo import PlatformInfo  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class PlatformFiles(object):
    """PlatformFiles - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'file_server_ext_id': 'str',
        'nvm_info': 'files.v4.infra.PlatformFilesNvmInfo',
        'platform_info': 'files.v4.infra.PlatformInfo',
        'generate_num_uuids': 'int',
        'generated_uuids': 'list[str]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'file_server_ext_id': 'fileServerExtId',
        'nvm_info': 'nvmInfo',
        'platform_info': 'platformInfo',
        'generate_num_uuids': 'generateNumUuids',
        'generated_uuids': 'generatedUuids',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, file_server_ext_id=None, nvm_info=None, platform_info=None, generate_num_uuids=None, generated_uuids=None, *args, **kwargs):  # noqa: E501
        """PlatformFiles - a model defined in Swagger
            \nA model that represents the platform files information for request and response. 
        """
        self.__file_server_ext_id = None
        self.__nvm_info = None
        self.__platform_info = None
        self.__generate_num_uuids = None
        self.__generated_uuids = None
        self.discriminator = None
        if file_server_ext_id is not None:
            self.__file_server_ext_id = file_server_ext_id
        if nvm_info is not None:
            self.__nvm_info = nvm_info
        if platform_info is not None:
            self.__platform_info = platform_info
        if generate_num_uuids is not None:
            self.__generate_num_uuids = generate_num_uuids
        if generated_uuids is not None:
            self.__generated_uuids = generated_uuids
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.infra.PlatformFiles'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.infra.PlatformFiles'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def file_server_ext_id(self):
        """`{ str }`
            \nThe {extId} of the file server. This is a read-only field.
        """ # noqa: E501
        return self.__file_server_ext_id

    @file_server_ext_id.setter
    def file_server_ext_id(self, file_server_ext_id):
        if file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__file_server_ext_id = file_server_ext_id

    @property
    def nvm_info(self):
        """`{ files.v4.infra.PlatformFilesNvmInfo }`
            
        """ # noqa: E501
        return self.__nvm_info

    @nvm_info.setter
    def nvm_info(self, nvm_info):

        self.__nvm_info = nvm_info

    @property
    def platform_info(self):
        """`{ files.v4.infra.PlatformInfo }`
            
        """ # noqa: E501
        return self.__platform_info

    @platform_info.setter
    def platform_info(self, platform_info):

        self.__platform_info = platform_info

    @property
    def generate_num_uuids(self):
        """`{ int }`
            \nNumber of generate UUID requests. 
        """ # noqa: E501
        return self.__generate_num_uuids

    @generate_num_uuids.setter
    def generate_num_uuids(self, generate_num_uuids):
        if generate_num_uuids is not None and generate_num_uuids < 0:  # noqa: E501
            raise ValueError("Invalid value for `generate_num_uuids`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__generate_num_uuids = generate_num_uuids

    @property
    def generated_uuids(self):
        """`{ list[str] }`
            \nList of generated UUIDs. 
        """ # noqa: E501
        return self.__generated_uuids

    @generated_uuids.setter
    def generated_uuids(self, generated_uuids):

        self.__generated_uuids = generated_uuids

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlatformFiles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlatformFiles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

