# coding: utf-8

"""
    VIER Cognitive Voice Dialog API

    CVG dialog history  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class Dialog(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "data",
            "dialogId",
        }
        
        class properties:
            dialogId = schemas.StrSchema
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Entry']:
                        return Entry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Entry'], typing.List['Entry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Entry':
                    return super().__getitem__(i)
        
            @staticmethod
            def callId() -> typing.Type['ExternalCallId']:
                return ExternalCallId
            __annotations__ = {
                "dialogId": dialogId,
                "data": data,
                "callId": callId,
            }
    
    data: MetaOapg.properties.data
    dialogId: MetaOapg.properties.dialogId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dialogId"]) -> MetaOapg.properties.dialogId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callId"]) -> 'ExternalCallId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dialogId", "data", "callId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dialogId"]) -> MetaOapg.properties.dialogId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callId"]) -> typing.Union['ExternalCallId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dialogId", "data", "callId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        data: typing.Union[MetaOapg.properties.data, list, tuple, ],
        dialogId: typing.Union[MetaOapg.properties.dialogId, str, ],
        callId: typing.Union['ExternalCallId', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Dialog':
        return super().__new__(
            cls,
            *args,
            data=data,
            dialogId=dialogId,
            callId=callId,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.entry import Entry
from cvg_sdk.model.external_call_id import ExternalCallId
