{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "reputation/v1"
    }
  ],
  "paths": {
    "/reputation/v1/calculated/ip/{ip}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up the calculated reputation value for the given IP (INTERNAL)",
        "description": "",
        "operationId": "calculateReputationForIP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "path",
            "description": "IP address to look up",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressReputation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/calculated/ip": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List up calculated IP reputation values (INTERNAL)",
        "description": "",
        "operationId": "listAddressReputation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromAddress",
            "in": "query",
            "description": "List observed domains after this domain, including (sorted by reverse domain)",
            "required": false,
            "type": "string"
          },
          {
            "name": "afterAddress",
            "in": "query",
            "description": "List observed domains after this domain, excluding (sorted by reverse domain)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceID",
            "in": "query",
            "description": "Limit to domains observed in this source",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minimumValue",
            "in": "query",
            "description": "Limit to domains which have a reputation score at lease this large",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit output",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressReputation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/calculated/domain/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Search for calculated domain reputation values (INTERNAL)",
        "description": "",
        "operationId": "findDomainReputation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainReputationSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainReputation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/calculated/ip/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Search for calculated IP reputation values (INTERNAL)",
        "description": "",
        "operationId": "findAddressReputation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddressReputationSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressReputation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/calculated/domain/{fqdn}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up the calculated reputation value for the given Domain (INTERNAL)",
        "description": "",
        "operationId": "calculateReputationForDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fqdn",
            "in": "path",
            "description": "Domain to look up",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainReputation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/calculated/domain": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List up calculated domain reputation values (INTERNAL)",
        "description": "",
        "operationId": "listDomainReputation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fromDomain",
            "in": "query",
            "description": "List observed domains after this domain, including (sorted by reverse domain)",
            "required": false,
            "type": "string"
          },
          {
            "name": "afterDomain",
            "in": "query",
            "description": "List observed domains after this domain, excluding (sorted by reverse domain)",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceID",
            "in": "query",
            "description": "Limit to domains observed in this source",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minimumValue",
            "in": "query",
            "description": "Limit to domains which have a reputation score at lease this large",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit output",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainReputation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation/ip/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List IP observations (INTERNAL)",
        "description": "",
        "operationId": "findAddressObservations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddressObservationSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressObservation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation/domain/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List domain observations (INTERNAL)",
        "description": "",
        "operationId": "findDomainObservations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainObservationSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainObservation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation/ip/{ip}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up reputation observations for the given IP (INTERNAL)",
        "description": "",
        "operationId": "fetchObservationsForIP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "path",
            "description": "IP address to fetch observations for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressObservation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation/domain/{fqdn}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up reputation observations for the given domain (INTERNAL)",
        "description": "",
        "operationId": "fetchObservationsForDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fqdn",
            "in": "path",
            "description": "Domain to fetch observations for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainObservation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation/domain": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List domain observations (INTERNAL)",
        "description": "",
        "operationId": "listDomainObservations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "query",
            "description": "Limit result to observations from specified source",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minimumState",
            "in": "query",
            "description": "Limit result to observations with this state or higher",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minimumConfidence",
            "in": "query",
            "description": "Limit result to observations bound to sources with at least this confidence",
            "required": false,
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainObservation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation/ip": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List IP observations (INTERNAL)",
        "description": "",
        "operationId": "listAddressObservations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "query",
            "description": "Limit result to observations from specified source",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minimumState",
            "in": "query",
            "description": "Limit result to observations with this state or higher",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minimumConfidence",
            "in": "query",
            "description": "Limit result to observations bound to sources with at least this confidence",
            "required": false,
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "format": "double"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressObservation-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/ip/{id}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up IP override value by ID (INTERNAL)",
        "description": "",
        "operationId": "getOverrideForIP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of override object",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Delete reputation IP override (INTERNAL)",
        "description": "",
        "operationId": "deleteAddressOverride",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of override entry to remove",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/domain/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Search domain overrides (INTERNAL)",
        "description": "",
        "operationId": "findDomainOverrides",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainOverrideSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/ip/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Search IP overrides (INTERNAL)",
        "description": "",
        "operationId": "findAddressOverrides",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddressOverrideSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/list": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List all overrides (INTERNAL)",
        "description": "",
        "operationId": "getOverrideLists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Filter override lists by keywords",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-OverrideList-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Add reputation override list (INTERNAL)",
        "description": "",
        "operationId": "addOverrideList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Override add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OverrideListAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-OverrideList-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/domain/{id}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up domain override value by ID (INTERNAL)",
        "description": "",
        "operationId": "getOverrideForDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of override object",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Delete reputation domain override (INTERNAL)",
        "description": "",
        "operationId": "deleteDomainOverride",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of override entry to remove",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/ip/{ip}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up domain override value by IP address (INTERNAL)",
        "description": "",
        "operationId": "getOverridesForIP",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "path",
            "description": "IP to search overrides for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/domain/{fqdn}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Look up domain override value by IP address (INTERNAL)",
        "description": "",
        "operationId": "getOverridesForDomain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fqdn",
            "in": "path",
            "description": "Domain/domain pattern to fetch overrides for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/domain": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List domain overrides (INTERNAL)",
        "description": "",
        "operationId": "listDomainOverrides",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "description": "Limit results to overrides from this list",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Add reputation domain override (INTERNAL)",
        "description": "",
        "operationId": "addDomainOverride",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Override add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DomainOverrideAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Bulk delete reputation domain overrides (INTERNAL)",
        "description": "",
        "operationId": "deleteDomainOverrides",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "IDs of reputation overrides",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DomainOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/ip": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List address overrides (INTERNAL)",
        "description": "",
        "operationId": "listAddressOverrides",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "list",
            "in": "query",
            "description": "Limit results to overrides from this list",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Add reputation IP override (INTERNAL)",
        "description": "",
        "operationId": "addAddressOverrides",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Override add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddressOverrideAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Bulk delete reputation IP overrides (INTERNAL)",
        "description": "",
        "operationId": "deleteAddressOverrides",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "IDs of IP overrides",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AddressOverride-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/override/list/{id}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Get override list by ID (INTERNAL)",
        "description": "",
        "operationId": "getOverrideListByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of OverrideList",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-OverrideList-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Update reputation override list (INTERNAL)",
        "description": "",
        "operationId": "updateOverrideList",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of reputation override list",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update override list request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OverrideListUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-OverrideList-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Delete reputation override list (INTERNAL)",
        "description": "",
        "operationId": "deleteOverrideList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of override list to remove",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-OverrideList-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/role/{alias}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Fetch reputation role by role alias (INTERNAL)",
        "description": "",
        "operationId": "getRoleByAlias",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Alias of role to fetch",
            "required": true,
            "type": "string",
            "pattern": "[0-9]*[^0-9]+[0-9]*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/role": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List reputation roles (INTERNAL)",
        "description": "",
        "operationId": "listRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Limit result to roles matching this search string",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Add new reputation role (INTERNAL)",
        "description": "",
        "operationId": "addNewRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/role/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Search reputation roles (INTERNAL)",
        "description": "",
        "operationId": "searchRoles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/role/{id}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Fetch reputation role by ID (INTERNAL)",
        "description": "",
        "operationId": "getRoleByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role to fetch",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Update reputation role (INTERNAL)",
        "description": "",
        "operationId": "updateRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role to update",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RoleUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Delete reputation role (INTERNAL)",
        "description": "",
        "operationId": "deleteRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of role to delete",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Role-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/source": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "List reputation sources (INTERNAL)",
        "description": "",
        "operationId": "listSources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Limit result to sources matching this search string",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Add reputation source (INTERNAL)",
        "description": "",
        "operationId": "addNewSource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/source/{id}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Fetch reputation source by ID (INTERNAL)",
        "description": "",
        "operationId": "getSourceById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of source to fetch",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Update reputation source (INTERNAL)",
        "description": "",
        "operationId": "updateSource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of source to update",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Delete reputation source (INTERNAL)",
        "description": "",
        "operationId": "deleteSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of source to delete",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/source/search": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Search reputation sources (INTERNAL)",
        "description": "",
        "operationId": "findSources",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SourceSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/source/{alias}": {
      "get": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Fetch reputation source by alias (INTERNAL)",
        "description": "",
        "operationId": "getSourceByAlias",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "Alias of source to fetch",
            "required": true,
            "type": "string",
            "pattern": "[0-9]*[^0-9]+[0-9]*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Source-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/observation": {
      "post": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Add reputation observations (INTERNAL)",
        "description": "",
        "operationId": "addObservations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Observation add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ObservationAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ObservationAddResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Delete reputation observations (INTERNAL)",
        "description": "",
        "operationId": "deleteObservations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "query",
            "description": "Source ID",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "sourceAlias",
            "in": "query",
            "description": "Source alias",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "IP Addresses",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "fqdn",
            "in": "query",
            "description": "Domain names",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AbstractObservationVO-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/reputation/v1/source/{source}/transition": {
      "put": {
        "tags": [
          "reputation/v1"
        ],
        "summary": "Transition reputation source. This recalculates active and expired records according to the sources configured timing.Source Transition is automatically run after completing an import. (INTERNAL)",
        "description": "",
        "operationId": "transitionSource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source",
            "in": "path",
            "description": "ID or alias of source to transition",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-TransitionStatus-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    }
  },
  "definitions": {
    "RoleAddRequest": {
      "type": "object",
      "required": [
        "alias",
        "name",
        "score"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "position": 0,
          "description": "Role alias => [a-zA-Z0-9_\\-\\.]*"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Role name => [a-zA-Z0-9_\\-\\.]*"
        },
        "score": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Role score (default 0.0)",
          "minimum": 0,
          "default": 0.0
        }
      }
    },
    "AddressObservationSearchCriteria": {
      "type": "object",
      "properties": {
        "minimumState": {
          "type": "integer",
          "format": "int32"
        },
        "minimumConfidence": {
          "type": "number",
          "format": "double"
        },
        "sourceID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "fromAddress": {
          "$ref": "#/definitions/IPAddress"
        },
        "afterAddress": {
          "$ref": "#/definitions/IPAddress"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AddressObservationSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "addresses": {
          "type": "array",
          "position": 0,
          "description": "Set of IP addresses",
          "items": {
            "$ref": "#/definitions/IPAddress"
          }
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "address",
              "lastModified",
              "source",
              "role",
              "-address",
              "-lastModified",
              "-source",
              "-role"
            ]
          }
        }
      }
    },
    "DomainOverrideSpec": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "reason": {
          "type": "string"
        },
        "cutoff": {
          "type": "integer",
          "format": "int64"
        },
        "domainPattern": {
          "type": "string"
        }
      }
    },
    "SourceInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "alias": {
          "type": "string",
          "position": 0,
          "description": "Alias for the Observation's Source"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Full name of the Observation's Source"
        }
      }
    },
    "AbstractObservationVO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModified": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Last time the observation was modified."
        },
        "source": {
          "position": 0,
          "description": "The ID, Alias and Name of the source of the observation.",
          "$ref": "#/definitions/SourceInfo"
        },
        "role": {
          "position": 0,
          "description": "The ID, Alias and Name of the role of the observation.",
          "$ref": "#/definitions/RoleInfo"
        },
        "firstSeen": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of the first observation of the IP first made by this source"
        },
        "lastSeen": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of the most recent observation of the IP first made by this source"
        },
        "numObservations": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of times the IP address was observed during the time period."
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The state of the observation."
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment associated with this observation"
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "RejectedObservation": {
      "type": "object",
      "required": [
        "roleAlias"
      ],
      "properties": {
        "domain": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "firstSeen": {
          "type": "integer",
          "format": "int64"
        },
        "lastSeen": {
          "type": "integer",
          "format": "int64"
        },
        "observationCount": {
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "type": "string"
        },
        "rejectReasons": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "address": {
          "type": "string"
        },
        "roleAlias": {
          "type": "string",
          "position": 0,
          "description": "Role alias"
        },
        "domainName": {
          "position": 0,
          "description": "Deprecated. Use the domain String field instead",
          "$ref": "#/definitions/DomainName"
        }
      }
    },
    "AddressReputationSearchCriteria": {
      "type": "object",
      "properties": {
        "minimumValue": {
          "type": "number",
          "format": "double"
        },
        "sourceID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "fromAddress": {
          "$ref": "#/definitions/IPAddress"
        },
        "afterAddress": {
          "$ref": "#/definitions/IPAddress"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AddressReputationSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "addresses": {
          "type": "array",
          "position": 0,
          "description": "List of IP addresses",
          "items": {
            "$ref": "#/definitions/IPAddress"
          }
        }
      }
    },
    "ObservationAddResponse": {
      "type": "object",
      "properties": {
        "newCount": {
          "type": "integer",
          "format": "int32"
        },
        "continueCount": {
          "type": "integer",
          "format": "int32"
        },
        "awakenCount": {
          "type": "integer",
          "format": "int32"
        },
        "rejectedObservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RejectedObservation"
          }
        },
        "whitelistedObservations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RejectedObservation"
          }
        }
      }
    },
    "IPRange": {
      "type": "object",
      "properties": {
        "fromAddress": {
          "$ref": "#/definitions/IPAddress"
        },
        "toAddress": {
          "$ref": "#/definitions/IPAddress"
        }
      }
    },
    "OverrideData": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "entryTime": {
          "type": "integer",
          "format": "int64"
        },
        "reason": {
          "type": "string"
        },
        "cutoff": {
          "type": "integer",
          "format": "int64"
        },
        "userID": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/UserInfo"
        }
      }
    },
    "SourceSearchCriteria": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "searchString": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SourceSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        }
      }
    },
    "OverrideList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "lastModified": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "defaultValues": {
          "type": "boolean"
        }
      }
    },
    "OverrideListUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "If set, update the name of this list => [a-zA-Z0-9_\\-\\.]*"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "If set, update the description of this list => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "useForReputationCalc": {
          "type": "boolean",
          "position": 0,
          "description": "If set, enable/disable use of the overrides in this list when calculating reputation values"
        },
        "useForInputFiltering": {
          "type": "boolean",
          "position": 0,
          "description": "If set, enable/disable use of the overrides in this list for observation input filtering"
        },
        "useForDefaultValues": {
          "type": "boolean",
          "position": 0,
          "description": "If set, enable/disable use of the overrides in this list as default values"
        }
      }
    },
    "Counter": {
      "type": "object",
      "properties": {
        "active": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "latest": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "old": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "RoleInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "alias": {
          "type": "string",
          "position": 0,
          "description": "Alias for the Observation's Role"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Full name of the Observation's Role."
        }
      }
    },
    "ResultStash-Source-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Source"
          }
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DomainName": {
      "type": "object",
      "properties": {
        "fqdn": {
          "type": "string"
        }
      }
    },
    "SourceAddRequest": {
      "type": "object",
      "required": [
        "activePeriod",
        "alias",
        "confidence",
        "fudgePeriod",
        "name"
      ],
      "properties": {
        "private": {
          "type": "boolean"
        },
        "alias": {
          "type": "string",
          "position": 0,
          "description": "Source alias => [a-zA-Z0-9_\\-\\.]*"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Source name => [a-zA-Z0-9_\\-\\.]*"
        },
        "confidence": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Source confidence (default 0.0)",
          "minimum": 0,
          "default": 0.0
        },
        "activePeriod": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Source active period (default 0)",
          "minimum": 1,
          "default": 0
        },
        "fudgePeriod": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Source fudge period (default 0)",
          "minimum": 1,
          "default": 0
        },
        "useForReputationCalc": {
          "type": "boolean",
          "position": 0,
          "description": "If true, enable reputation calculation using this source"
        },
        "enableSync": {
          "type": "boolean",
          "position": 0,
          "description": "If true, enable remote sync of this source (even if reputation calc is not enabled)"
        },
        "monitored": {
          "type": "boolean",
          "position": 0,
          "description": "If true, mark this source as monitored"
        }
      }
    },
    "DomainReputation": {
      "type": "object",
      "properties": {
        "domainName": {
          "$ref": "#/definitions/DomainName"
        },
        "reason": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "override": {
          "type": "boolean"
        }
      }
    },
    "ResultStash-Source-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Source"
        }
      }
    },
    "DomainOverride": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "listName": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/OverrideData"
        },
        "defaultValue": {
          "type": "boolean"
        },
        "domainPatternBase": {
          "type": "string"
        },
        "domainPattern": {
          "type": "string"
        },
        "wildcardMatch": {
          "type": "boolean"
        },
        "publicPrefixMatch": {
          "type": "boolean"
        },
        "expired": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "alias": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "score": {
          "type": "number",
          "format": "double"
        },
        "deleted": {
          "type": "boolean"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "DomainObservation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModified": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Last time the observation was modified."
        },
        "source": {
          "position": 0,
          "description": "The ID, Alias and Name of the source of the observation.",
          "$ref": "#/definitions/SourceInfo"
        },
        "role": {
          "position": 0,
          "description": "The ID, Alias and Name of the role of the observation.",
          "$ref": "#/definitions/RoleInfo"
        },
        "firstSeen": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of the first observation of the IP first made by this source"
        },
        "lastSeen": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of the most recent observation of the IP first made by this source"
        },
        "numObservations": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of times the IP address was observed during the time period."
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The state of the observation."
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment associated with this observation"
        },
        "domainName": {
          "position": 0,
          "description": "The domain under observation.",
          "$ref": "#/definitions/DomainName"
        }
      }
    },
    "Observation": {
      "type": "object",
      "required": [
        "roleAlias"
      ],
      "properties": {
        "domain": {
          "type": "string",
          "description": "[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "firstSeen": {
          "type": "integer",
          "format": "int64"
        },
        "lastSeen": {
          "type": "integer",
          "format": "int64"
        },
        "observationCount": {
          "type": "integer",
          "format": "int32"
        },
        "comment": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "roleAlias": {
          "type": "string",
          "position": 0,
          "description": "Role alias"
        },
        "domainName": {
          "position": 0,
          "description": "Deprecated. Use the domain String field instead",
          "$ref": "#/definitions/DomainName"
        }
      }
    },
    "ResultStash-AbstractObservationVO-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/AbstractObservationVO"
          }
        }
      }
    },
    "DomainObservationSearchCriteria": {
      "type": "object",
      "properties": {
        "minimumState": {
          "type": "integer",
          "format": "int32"
        },
        "minimumConfidence": {
          "type": "number",
          "format": "double"
        },
        "sourceID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "fromDomainName": {
          "$ref": "#/definitions/DomainName"
        },
        "afterDomainName": {
          "$ref": "#/definitions/DomainName"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DomainObservationSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "startTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "endTimestamp": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ"
        },
        "domainNames": {
          "type": "array",
          "position": 0,
          "description": "List of Full Qualified Domain Names",
          "items": {
            "$ref": "#/definitions/DomainName"
          }
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "domainName",
              "lastModified",
              "source",
              "role",
              "-domainName",
              "-lastModified",
              "-source",
              "-role"
            ]
          }
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        }
      }
    },
    "SourceUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "alias": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "confidence": {
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "activePeriod": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "fudgePeriod": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "private": {
          "type": "boolean"
        },
        "useForReputationCalc": {
          "type": "boolean",
          "position": 0,
          "description": "If set, change the setting for reputation calculation using this source"
        },
        "enableSync": {
          "type": "boolean",
          "position": 0,
          "description": "If set, change the remote sync setting for this source"
        },
        "monitored": {
          "type": "boolean",
          "position": 0,
          "description": "If set, change the monitored setting for this source"
        }
      }
    },
    "ResultStash-OverrideList-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/OverrideList"
          }
        }
      }
    },
    "ResultStash-ObservationAddResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/ObservationAddResponse"
        }
      }
    },
    "AddressOverrideSearchCriteria": {
      "type": "object",
      "properties": {
        "ranges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AddressOverrideSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "listID": {
          "type": "array",
          "position": 0,
          "description": "Collection of override lists' IDs",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "listName": {
          "type": "array",
          "position": 0,
          "description": "Collection of override lists' names",
          "items": {
            "type": "string"
          }
        },
        "includedListFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Include records with flags in override list"
        },
        "excludedListFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude records with flags in override list"
        },
        "includeExpired": {
          "type": "boolean",
          "position": 0,
          "description": "Whether include expired overrides, default not include expired overrides"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Records after this timestamp against fields defined by timeFieldStrategy"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Records before this timestamp against fields defined by timeFieldStrategy"
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "TimeFieldStrategy to define which timestamp field(s) to match, default lastUpdatedTimestamp",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "lastUpdatedTimestamp",
              "cutoff",
              "all"
            ]
          }
        },
        "minValue": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Lower bound for override value range [0,1]"
        },
        "maxValue": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Upper bound for override data value range [0,1]"
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Set of keywords to match selected fields, depends on KeywordMatchStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Define whether all/any keywords have to be matched with selected fields",
          "enum": [
            "all",
            "any"
          ]
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)",
          "enum": [
            "all",
            "any"
          ]
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Define which field(s) to be matched against keywords",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "reason",
              "range",
              "all"
            ]
          }
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "lastModified",
              "range",
              "-id",
              "-lastModified",
              "-range"
            ]
          }
        }
      }
    },
    "AddressOverrideSpec": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "reason": {
          "type": "string"
        },
        "cutoff": {
          "type": "integer",
          "format": "int64"
        },
        "ipRange": {
          "type": "string"
        }
      }
    },
    "ResultStash-AddressOverride-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/AddressOverride"
          }
        }
      }
    },
    "ResultStash-TransitionStatus-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/TransitionStatus"
        }
      }
    },
    "AddressOverride": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "listName": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/OverrideData"
        },
        "defaultValue": {
          "type": "boolean"
        },
        "range": {
          "$ref": "#/definitions/IPRange"
        },
        "expired": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AddressObservation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastModified": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Last time the observation was modified."
        },
        "source": {
          "position": 0,
          "description": "The ID, Alias and Name of the source of the observation.",
          "$ref": "#/definitions/SourceInfo"
        },
        "role": {
          "position": 0,
          "description": "The ID, Alias and Name of the role of the observation.",
          "$ref": "#/definitions/RoleInfo"
        },
        "firstSeen": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of the first observation of the IP first made by this source"
        },
        "lastSeen": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of the most recent observation of the IP first made by this source"
        },
        "numObservations": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of times the IP address was observed during the time period."
        },
        "state": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The state of the observation."
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment associated with this observation"
        },
        "address": {
          "position": 0,
          "description": "The IP Address under observation.",
          "$ref": "#/definitions/IPAddress"
        }
      }
    },
    "ResultStash-AddressObservation-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/AddressObservation"
          }
        }
      }
    },
    "ResultStash-Role-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Role"
          }
        }
      }
    },
    "Source": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "alias": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "confidence": {
          "type": "number",
          "format": "double"
        },
        "activePeriod": {
          "type": "integer",
          "format": "int64"
        },
        "fudgePeriod": {
          "type": "integer",
          "format": "int64"
        },
        "private": {
          "type": "boolean"
        },
        "domainCounters": {
          "$ref": "#/definitions/Counter"
        },
        "addressCounters": {
          "$ref": "#/definitions/Counter"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "lastTransitionTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "deleted": {
          "type": "boolean"
        },
        "useForReputationCalc": {
          "type": "boolean"
        },
        "monitored": {
          "type": "boolean"
        },
        "enableSync": {
          "type": "boolean"
        }
      }
    },
    "TransitionStatus": {
      "type": "object",
      "properties": {
        "disabledAddresses": {
          "type": "integer",
          "format": "int32"
        },
        "disabledDomains": {
          "type": "integer",
          "format": "int32"
        },
        "activatedAddresses": {
          "type": "integer",
          "format": "int32"
        },
        "activatedDomains": {
          "type": "integer",
          "format": "int32"
        },
        "currentAddresses": {
          "type": "integer",
          "format": "int32"
        },
        "currentDomains": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResultStash-AddressOverride-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/AddressOverride"
        }
      }
    },
    "ResultStash-DomainReputation-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/DomainReputation"
          }
        }
      }
    },
    "DomainOverrideSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DomainOverrideSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "listID": {
          "type": "array",
          "position": 0,
          "description": "Collection of override lists' IDs",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "listName": {
          "type": "array",
          "position": 0,
          "description": "Collection of override lists' names",
          "items": {
            "type": "string"
          }
        },
        "includedListFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Include records with flags in override list"
        },
        "excludedListFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude records with flags in override list"
        },
        "includeExpired": {
          "type": "boolean",
          "position": 0,
          "description": "Whether include expired overrides, default not include expired overrides"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Records after this timestamp against fields defined by timeFieldStrategy"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Records before this timestamp against fields defined by timeFieldStrategy"
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "TimeFieldStrategy to define which timestamp field(s) to match, default lastUpdatedTimestamp",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "lastUpdatedTimestamp",
              "cutoff",
              "all"
            ]
          }
        },
        "minValue": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Lower bound for override value range [0,1]"
        },
        "maxValue": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Upper bound for override data value range [0,1]"
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Set of keywords to match selected fields, depends on KeywordMatchStrategy",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Define whether all/any keywords have to be matched with selected fields",
          "enum": [
            "all",
            "any"
          ]
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any)",
          "enum": [
            "all",
            "any"
          ]
        },
        "domainPatternBases": {
          "type": "array",
          "position": 0,
          "description": "Collection of domain pattern bases",
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Define which field(s) to be matched against keywords",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "reason",
              "domainPattern",
              "all"
            ]
          }
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "lastModified",
              "domainPattern",
              "-id",
              "-lastModified",
              "-domainPattern"
            ]
          }
        }
      }
    },
    "ResultStash-OverrideList-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/OverrideList"
        }
      }
    },
    "DomainOverrideAddRequest": {
      "type": "object",
      "properties": {
        "listID": {
          "type": "integer",
          "format": "int32"
        },
        "listName": {
          "type": "string"
        },
        "clear": {
          "type": "boolean"
        },
        "overrides": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DomainOverrideSpec"
          }
        }
      }
    },
    "ResultStash-DomainObservation-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/DomainObservation"
          }
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "RoleUpdateRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "alias": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "name": {
          "type": "string",
          "description": "[a-zA-Z0-9_\\-\\.]*"
        },
        "score": {
          "type": "number",
          "format": "double",
          "minimum": 0
        }
      }
    },
    "ResultStash-DomainOverride-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/DomainOverride"
          }
        }
      }
    },
    "ObservationAddRequest": {
      "type": "object",
      "required": [
        "observations"
      ],
      "properties": {
        "sourceID": {
          "type": "integer",
          "format": "int32"
        },
        "sourceAlias": {
          "type": "string"
        },
        "addAddresses": {
          "type": "boolean",
          "position": 0,
          "description": "Whether add addresses (default true)",
          "default": true
        },
        "addDomains": {
          "type": "boolean",
          "position": 0,
          "description": "Whether add domains (default true)",
          "default": true
        },
        "observations": {
          "type": "array",
          "position": 0,
          "description": "Observations",
          "items": {
            "$ref": "#/definitions/Observation"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      }
    },
    "ResultStash-DomainOverride-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/DomainOverride"
        }
      }
    },
    "DomainReputationSearchCriteria": {
      "type": "object",
      "properties": {
        "minimumValue": {
          "type": "number",
          "format": "double"
        },
        "sourceID": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "fromDomainName": {
          "$ref": "#/definitions/DomainName"
        },
        "afterDomainName": {
          "$ref": "#/definitions/DomainName"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DomainReputationSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "domainNames": {
          "type": "array",
          "position": 0,
          "description": "Full Qualified Domain Names",
          "items": {
            "$ref": "#/definitions/DomainName"
          }
        }
      }
    },
    "OverrideListAddRequest": {
      "type": "object",
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "Override list name => [a-zA-Z0-9_\\-\\.]*"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Override list description => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "useForReputationCalc": {
          "type": "boolean",
          "position": 0,
          "description": "If true, enable use of the overrides in this list when calculating reputation values. (default false)",
          "default": false
        },
        "useForInputFiltering": {
          "type": "boolean",
          "position": 0,
          "description": "If true, enable use of the overrides in this list for observation input filtering. (default false)",
          "default": false
        },
        "useForDefaultValues": {
          "type": "boolean",
          "position": 0,
          "description": "If true, enable use of the overrides in this list as default values. (default false)",
          "default": false
        }
      }
    },
    "RoleSearchCriteria": {
      "type": "object",
      "properties": {
        "id": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "searchString": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/RoleSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        }
      }
    },
    "ResultStash-Role-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Role"
        }
      }
    },
    "AddressOverrideAddRequest": {
      "type": "object",
      "properties": {
        "listName": {
          "type": "string"
        },
        "listID": {
          "type": "integer",
          "format": "int32"
        },
        "clear": {
          "type": "boolean"
        },
        "overrides": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AddressOverrideSpec"
          }
        }
      }
    },
    "IPAddress": {
      "type": "object",
      "properties": {
        "host": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "ipv6": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "public": {
          "type": "boolean"
        },
        "maskBits": {
          "type": "integer",
          "format": "int32"
        },
        "multicast": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        }
      }
    },
    "ResultStash-AddressReputation-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/AddressReputation"
          }
        }
      }
    },
    "AddressReputation": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/IPAddress"
        },
        "reason": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        },
        "override": {
          "type": "boolean"
        }
      }
    }
  }
}