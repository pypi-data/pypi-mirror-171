{"version":3,"file":"062834f4.js","mappings":";;AA0DA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;;AAEA;AACA;;;AAGA;AAGA;AACA;AACA;AACA;;;AAGA;AAGA;AACA;AACA;AACA;AACA;;;AA/DA;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-related-filter-menu.ts"],"sourcesContent":["import type { Corner } from \"@material/mwc-menu\";\nimport \"@material/mwc-menu/mwc-menu-surface\";\nimport { mdiFilterVariant } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { computeDeviceName } from \"../data/device_registry\";\nimport { findRelated, RelatedResult } from \"../data/search\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./device/ha-device-picker\";\nimport \"./entity/ha-entity-picker\";\nimport \"./ha-area-picker\";\nimport \"./ha-icon-button\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"related-changed\": {\n      value?: FilterValue;\n      items?: RelatedResult;\n      filter?: string;\n    };\n  }\n}\n\ninterface FilterValue {\n  area?: string;\n  device?: string;\n  entity?: string;\n}\n\n@customElement(\"ha-button-related-filter-menu\")\nexport class HaRelatedFilterButtonMenu extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public value?: FilterValue;\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  @state() private _open = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-icon-button\n        @click=${this._handleClick}\n        .label=${this.hass.localize(\"ui.components.related-filter-menu.filter\")}\n        .path=${mdiFilterVariant}\n      ></ha-icon-button>\n      <mwc-menu-surface\n        .open=${this._open}\n        .anchor=${this}\n        .fullwidth=${this.narrow}\n        .corner=${this.corner}\n        @closed=${this._onClosed}\n        @input=${stopPropagation}\n      >\n        <ha-area-picker\n          .label=${this.hass.localize(\n            \"ui.components.related-filter-menu.filter_by_area\"\n          )}\n          .hass=${this.hass}\n          .value=${this.value?.area}\n          no-add\n          @value-changed=${this._areaPicked}\n          @click=${this._preventDefault}\n        ></ha-area-picker>\n        <ha-device-picker\n          .label=${this.hass.localize(\n            \"ui.components.related-filter-menu.filter_by_device\"\n          )}\n          .hass=${this.hass}\n          .value=${this.value?.device}\n          @value-changed=${this._devicePicked}\n          @click=${this._preventDefault}\n        ></ha-device-picker>\n        <ha-entity-picker\n          .label=${this.hass.localize(\n            \"ui.components.related-filter-menu.filter_by_entity\"\n          )}\n          .hass=${this.hass}\n          .value=${this.value?.entity}\n          .excludeDomains=${this.excludeDomains}\n          @value-changed=${this._entityPicked}\n          @click=${this._preventDefault}\n        ></ha-entity-picker>\n      </mwc-menu-surface>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._open = true;\n  }\n\n  private _onClosed(ev): void {\n    ev.stopPropagation();\n    this._open = false;\n  }\n\n  private _preventDefault(ev) {\n    ev.preventDefault();\n  }\n\n  private async _entityPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const entityId = ev.detail.value;\n    if (!entityId) {\n      fireEvent(this, \"related-changed\", { value: undefined });\n      return;\n    }\n    const filter = this.hass.localize(\n      \"ui.components.related-filter-menu.filtered_by_entity\",\n      \"entity_name\",\n      computeStateName((ev.currentTarget as any).comboBox.selectedItem)\n    );\n    const items = await findRelated(this.hass, \"entity\", entityId);\n    fireEvent(this, \"related-changed\", {\n      value: { entity: entityId },\n      filter,\n      items,\n    });\n  }\n\n  private async _devicePicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const deviceId = ev.detail.value;\n    if (!deviceId) {\n      fireEvent(this, \"related-changed\", { value: undefined });\n      return;\n    }\n    const filter = this.hass.localize(\n      \"ui.components.related-filter-menu.filtered_by_device\",\n      \"device_name\",\n      computeDeviceName(\n        (ev.currentTarget as any).comboBox.selectedItem,\n        this.hass\n      )\n    );\n    const items = await findRelated(this.hass, \"device\", deviceId);\n\n    fireEvent(this, \"related-changed\", {\n      value: { device: deviceId },\n      filter,\n      items,\n    });\n  }\n\n  private async _areaPicked(ev: CustomEvent) {\n    ev.stopPropagation();\n    const areaId = ev.detail.value;\n    if (!areaId) {\n      fireEvent(this, \"related-changed\", { value: undefined });\n      return;\n    }\n    const filter = this.hass.localize(\n      \"ui.components.related-filter-menu.filtered_by_area\",\n      \"area_name\",\n      (ev.currentTarget as any).comboBox.selectedItem.name\n    );\n    const items = await findRelated(this.hass, \"area\", areaId);\n    fireEvent(this, \"related-changed\", {\n      value: { area: areaId },\n      filter,\n      items,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n        --mdc-menu-min-width: 250px;\n      }\n      ha-area-picker,\n      ha-device-picker,\n      ha-entity-picker {\n        display: block;\n        width: 300px;\n        padding: 4px 16px;\n        box-sizing: border-box;\n      }\n      ha-area-picker {\n        padding-top: 16px;\n      }\n      ha-entity-picker {\n        padding-bottom: 16px;\n      }\n      :host([narrow]) ha-area-picker,\n      :host([narrow]) ha-device-picker,\n      :host([narrow]) ha-entity-picker {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-related-filter-menu\": HaRelatedFilterButtonMenu;\n  }\n}\n"],"names":[],"sourceRoot":""}