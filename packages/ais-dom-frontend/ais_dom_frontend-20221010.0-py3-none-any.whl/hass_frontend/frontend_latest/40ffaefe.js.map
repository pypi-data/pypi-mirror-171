{"version":3,"file":"40ffaefe.js","mappings":";AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;ACuBA;;;;AAKA;;;AAIA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;;AAIA;;AAEA;;;;;AAMA;AACA;;AAEA;AAEA;;;;;AAKA;AACA;;;AAGA;;;;;;AAOA;AACA;;;AAIA;;AAGA;;;;AA5FA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACkBA;;AAEA;AAEA;AACA;AACA;AACA;;;AA3BA;;ACwBA;AACA;;AAEA;;AApCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqIA;;;;;;;;;;AAWA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-file-upload.ts","webpack://home-assistant-frontend/./src/components/ha-picture-upload.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HomeAssistant } from \"../types\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n      }\n      .mdc-dialog__actions {\n        padding: 0 24px 24px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-circular-progress\";\nimport \"./ha-icon-button\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: FileList };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public accept!: string;\n\n  @property() public icon?: string;\n\n  @property() public label!: string;\n\n  @property() public value: string | TemplateResult | null = null;\n\n  @property({ type: Boolean }) private uploading = false;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  private autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._openFilePicker();\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<ha-circular-progress\n            alt=\"Uploading\"\n            size=\"large\"\n            active\n          ></ha-circular-progress>`\n        : html`\n            <label\n              for=\"input\"\n              class=\"mdc-text-field mdc-text-field--filled ${classMap({\n                \"mdc-text-field--focused\": this._drag,\n                \"mdc-text-field--with-leading-icon\": Boolean(this.icon),\n                \"mdc-text-field--with-trailing-icon\": Boolean(this.value),\n              })}\"\n              @drop=${this._handleDrop}\n              @dragenter=${this._handleDragStart}\n              @dragover=${this._handleDragStart}\n              @dragleave=${this._handleDragEnd}\n              @dragend=${this._handleDragEnd}\n            >\n              <span class=\"mdc-text-field__ripple\"></span>\n              <span\n                class=\"mdc-floating-label ${this.value || this._drag\n                  ? \"mdc-floating-label--float-above\"\n                  : \"\"}\"\n                id=\"label\"\n                >${this.label}</span\n              >\n              ${this.icon\n                ? html`<span\n                    class=\"mdc-text-field__icon mdc-text-field__icon--leading\"\n                    tabindex=\"-1\"\n                  >\n                    <ha-icon-button\n                      @click=${this._openFilePicker}\n                      .path=${this.icon}\n                    ></ha-icon-button>\n                  </span>`\n                : \"\"}\n              <div class=\"value\">${this.value}</div>\n              <input\n                id=\"input\"\n                type=\"file\"\n                class=\"mdc-text-field__input file\"\n                accept=${this.accept}\n                @change=${this._handleFilePicked}\n                aria-labelledby=\"label\"\n              />\n              ${this.value\n                ? html`<span\n                    class=\"mdc-text-field__icon mdc-text-field__icon--trailing\"\n                    tabindex=\"1\"\n                  >\n                    <ha-icon-button\n                      slot=\"suffix\"\n                      @click=${this._clearValue}\n                      .label=${this.hass?.localize(\"ui.common.close\") ||\n                      \"close\"}\n                      .path=${mdiClose}\n                    ></ha-icon-button>\n                  </span>`\n                : \"\"}\n              <span\n                class=\"mdc-line-ripple ${this._drag\n                  ? \"mdc-line-ripple--active\"\n                  : \"\"}\"\n              ></span>\n            </label>\n          `}\n    `;\n  }\n\n  private _openFilePicker() {\n    this._input?.click();\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", { files: ev.dataTransfer.files });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return [\n      styles,\n      css`\n        :host {\n          display: block;\n        }\n        .mdc-text-field--filled {\n          height: auto;\n          padding-top: 16px;\n          cursor: pointer;\n        }\n        .mdc-text-field--filled.mdc-text-field--with-trailing-icon {\n          padding-top: 28px;\n        }\n        .mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon {\n          color: var(--secondary-text-color);\n        }\n        .mdc-text-field--filled.mdc-text-field--with-trailing-icon\n          .mdc-text-field__icon {\n          align-self: flex-end;\n        }\n        .mdc-text-field__icon--leading {\n          margin-bottom: 12px;\n          inset-inline-start: initial;\n          inset-inline-end: 0px;\n          direction: var(--direction);\n        }\n        .mdc-text-field--filled .mdc-floating-label--float-above {\n          transform: scale(0.75);\n          top: 8px;\n        }\n        .mdc-floating-label {\n          inset-inline-start: 16px !important;\n          inset-inline-end: initial !important;\n          direction: var(--direction);\n        }\n        .mdc-text-field--filled .mdc-floating-label {\n          inset-inline-start: 48px !important;\n          inset-inline-end: initial !important;\n          direction: var(--direction);\n        }\n        .dragged:before {\n          position: var(--layout-fit_-_position);\n          top: var(--layout-fit_-_top);\n          right: var(--layout-fit_-_right);\n          bottom: var(--layout-fit_-_bottom);\n          left: var(--layout-fit_-_left);\n          background: currentColor;\n          content: \"\";\n          opacity: var(--dark-divider-opacity);\n          pointer-events: none;\n          border-radius: 4px;\n        }\n        .value {\n          width: 100%;\n        }\n        input.file {\n          display: none;\n        }\n        img {\n          max-width: 100%;\n          max-height: 125px;\n        }\n        ha-icon-button {\n          --mdc-icon-button-size: 24px;\n          --mdc-icon-size: 20px;\n        }\n        ha-circular-progress {\n          display: block;\n          text-align-last: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","import { mdiImagePlus } from \"@mdi/js\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { createImage, generateImageThumbnailUrl } from \"../data/image\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport {\n  CropOptions,\n  showImageCropperDialog,\n} from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-circular-progress\";\nimport \"./ha-file-upload\";\n\n@customElement(\"ha-picture-upload\")\nexport class HaPictureUpload extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public value: string | null = null;\n\n  @property() public label?: string;\n\n  @property() public fileName?: string;\n\n  @property({ type: Boolean }) public crop = false;\n\n  @property({ attribute: false }) public cropOptions?: CropOptions;\n\n  @property({ type: Number }) public size = 512;\n\n  @state() private _uploading = false;\n\n  public render(): TemplateResult {\n    return html`\n      <ha-file-upload\n        .hass=${this.hass}\n        .icon=${mdiImagePlus}\n        .label=${this.label ||\n        this.hass.localize(\"ui.components.picture-upload.label\")}\n        .uploading=${this._uploading}\n        .value=${this.value ? html`<img .src=${this.value} />` : \"\"}\n        @file-picked=${this._handleFilePicked}\n        @change=${this._handleFileCleared}\n        accept=\"image/png, image/jpeg, image/gif\"\n      ></ha-file-upload>\n    `;\n  }\n\n  private async _handleFilePicked(ev) {\n    const file = ev.detail.files[0];\n    if (this.crop) {\n      this.fileName = file.name || \"\";\n      this._cropFile(file);\n    } else {\n      this._uploadFile(file);\n    }\n  }\n\n  private async _handleFileCleared() {\n    this.value = null;\n  }\n\n  private async _cropFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    showImageCropperDialog(this, {\n      file,\n      options: this.cropOptions || {\n        round: false,\n        aspectRatio: NaN,\n      },\n      croppedCallback: (croppedFile) => {\n        this._uploadFile(croppedFile);\n      },\n    });\n  }\n\n  private async _uploadFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    this._uploading = true;\n    try {\n      const media = await createImage(this.hass, file);\n      this.value = generateImageThumbnailUrl(media.id, this.size);\n      fireEvent(this, \"change\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: err.toString(),\n      });\n    } finally {\n      this._uploading = false;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-picture-upload\": HaPictureUpload;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  // @ts-ignore\n  @property({ type: Boolean }) public iconTrailing?: boolean;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n        padding-inline-start: var(--text-field-suffix-padding-left, 12px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 0px);\n        direction: var(--direction);\n      }\n      .mdc-text-field--with-leading-icon {\n        padding-inline-start: var(--text-field-suffix-padding-left, 0px);\n        padding-inline-end: var(--text-field-suffix-padding-right, 16px);\n        direction: var(--direction);\n      }\n\n      .mdc-text-field:not(.mdc-text-field--disabled)\n        .mdc-text-field__affix--suffix {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      .mdc-text-field__icon--leading {\n        margin-inline-start: 16px;\n        margin-inline-end: 8px;\n        direction: var(--direction);\n      }\n\n      .mdc-floating-label:not(.mdc-floating-label--float-above) {\n        text-overflow: ellipsis;\n        width: inherit;\n        padding-right: 30px;\n        padding-inline-end: 30px;\n        padding-inline-start: initial;\n        box-sizing: border-box;\n        direction: var(--direction);\n      }\n\n      input {\n        text-align: var(--text-field-text-align, start);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start);\n        direction: var(--direction);\n        text-align: var(--float-start);\n      }\n\n      .mdc-text-field--with-leading-icon.mdc-text-field--filled\n        .mdc-floating-label {\n        max-width: calc(100% - 48px);\n        inset-inline-start: 48px !important;\n        inset-inline-end: initial !important;\n        direction: var(--direction);\n      }\n\n      .mdc-text-field__input[type=\"number\"] {\n        direction: var(--direction);\n      }\n    `,\n    // safari workaround - must be explicit\n    document.dir === \"rtl\"\n      ? css`\n          .mdc-text-field__affix--suffix,\n          .mdc-text-field--with-leading-icon,\n          .mdc-text-field__icon--leading,\n          .mdc-floating-label,\n          .mdc-text-field--with-leading-icon.mdc-text-field--filled\n            .mdc-floating-label,\n          .mdc-text-field__input[type=\"number\"] {\n            direction: rtl;\n          }\n        `\n      : css``,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n"],"names":[],"sourceRoot":""}