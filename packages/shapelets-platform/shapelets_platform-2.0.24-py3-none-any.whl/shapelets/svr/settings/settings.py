from typing import Tuple
from pydantic import BaseSettings
from pydantic.env_settings import SettingsSourceCallable
from ..utils import FlexBytes

from .functions import package_settings, home_settings, current_settings
from .telemetry import TelemetrySettings
from .server import ServerSettings
from .client import ClientSettings
from ..db import DatabaseSettings

class Settings(BaseSettings):
    """
    Top level configuration settings
    """
    
    grand_central: str 
    """
    Server and port where grand central is located
    """
    
    grand_central_pk: FlexBytes
    """
    Public key used to verify signatures generated by GC 
    """
    
    client: ClientSettings = ClientSettings()
    """
    Where is the server?
    """

    telemetry: TelemetrySettings = TelemetrySettings(enabled = False)
    """
    Telemetry Settings 
    """
    
    server: ServerSettings = ServerSettings()
    """
    Server settings
    """
    
    database: DatabaseSettings = DatabaseSettings()
    """
    Database settings 
    """    
    
    class Config:
        env_prefix = "shapelets_"
        """
        Prefix for all environment variables that can override configuration values
        """
        case_sensitive = False 
        """
        Environment variables are case insensitive, which makes Windows and non 
        Windows systems to behave similarly.
        """
        env_nested_delimiter = '__'
        """
        Inner field separator for environment variables.
        """
        
        json_encoders = {
            FlexBytes: lambda v: str(v) 
        }          
        
        @classmethod
        def customise_sources(cls,             
                              init_settings: SettingsSourceCallable,
                              env_settings: SettingsSourceCallable,
                              file_secret_settings: SettingsSourceCallable) -> Tuple[SettingsSourceCallable,...]:
            """
            Returns the order of readers for configuration settings, in order of 
            priority, that is, the first readers will override the rest.
            
            Notes
            -----
            The order of reading is as follows:
            
            1. Firstly, read factory settings, then, 
            2. Read settings stored in the home directory, then,
            3. Read settings from the current directory, then, 
            4. Read settings from environment variables, and finally,
            5. Apply settings passed directly by code.
            """
            
            # build the list in the order of reading              
            readers = [package_settings(), home_settings(), current_settings(), env_settings, init_settings]
            # remove null readers (as the file may not exist)
            readers = list(filter(None, readers))
            # reverse (so final readers appear first)
            # and convert to tuple.
            return tuple(reversed(readers))
