"""Autogenerated API schema"""
from argus_api import session


add_observations = {'tags': ['reputation/v1'], 'summary': 'Add reputation observations (INTERNAL)', 'description': '', 'operationId': 'addObservations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Observation add request', 'required': False, 'schema': {'type': 'object', 'required': ['observations'], 'properties': {'sourceID': {'type': 'int'}, 'sourceAlias': {'type': 'string'}, 'addAddresses': {'type': 'bool', 'position': 0, 'description': 'Whether add addresses (default true)', 'default': True}, 'addDomains': {'type': 'bool', 'position': 0, 'description': 'Whether add domains (default true)', 'default': True}, 'observations': {'type': 'list', 'position': 0, 'description': 'Observations', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'domain': {'type': 'str', 'description': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'firstSeen': {'type': 'int'}, 'lastSeen': {'type': 'int'}, 'observationCount': {'type': 'int'}, 'comment': {'type': 'string'}, 'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}}, 'maxItems': 2147483647, 'minItems': 1}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'newCount': {'type': 'int'}, 'continueCount': {'type': 'int'}, 'awakenCount': {'type': 'int'}, 'rejectedObservations': {'type': 'list', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'domain': {'type': 'str', 'description': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'firstSeen': {'type': 'int'}, 'lastSeen': {'type': 'int'}, 'observationCount': {'type': 'int'}, 'comment': {'type': 'string'}, 'rejectReasons': {'type': 'list', 'items': {'type': 'string'}}, 'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}}}, 'whitelistedObservations': {'type': 'list', 'items': {'type': 'dict', 'required': ['roleAlias'], 'properties': {'domain': {'type': 'str', 'description': '[\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}, 'firstSeen': {'type': 'int'}, 'lastSeen': {'type': 'int'}, 'observationCount': {'type': 'int'}, 'comment': {'type': 'string'}, 'rejectReasons': {'type': 'list', 'items': {'type': 'string'}}, 'address': {'type': 'string'}, 'roleAlias': {'type': 'str', 'position': 0, 'description': 'Role alias'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
delete_observations = {'tags': ['reputation/v1'], 'summary': 'Delete reputation observations (INTERNAL)', 'description': '', 'operationId': 'deleteObservations', 'produces': ['application/json'], 'parameters': [{'name': 'sourceID', 'in': 'query', 'description': 'Source ID', 'required': False, 'type': 'int', 'default': 0}, {'name': 'sourceAlias', 'in': 'query', 'description': 'Source alias', 'required': False, 'type': 'str'}, {'name': 'address', 'in': 'query', 'description': 'IP Addresses', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'fqdn', 'in': 'query', 'description': 'Domain names', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
fetch_observations_for_domain = {'tags': ['reputation/v1'], 'summary': 'Look up reputation observations for the given domain (INTERNAL)', 'description': '', 'operationId': 'fetchObservationsForDomain', 'produces': ['application/json'], 'parameters': [{'name': 'fqdn', 'in': 'path', 'description': 'Domain to fetch observations for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
fetch_observations_for_ip = {'tags': ['reputation/v1'], 'summary': 'Look up reputation observations for the given IP (INTERNAL)', 'description': '', 'operationId': 'fetchObservationsForIP', 'produces': ['application/json'], 'parameters': [{'name': 'ip', 'in': 'path', 'description': 'IP address to fetch observations for', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'address': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
find_address_observations = {'tags': ['reputation/v1'], 'summary': 'List IP observations (INTERNAL)', 'description': '', 'operationId': 'findAddressObservations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'minimumState': {'type': 'int'}, 'minimumConfidence': {'type': 'float'}, 'sourceID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'afterAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'minimumState': {'type': 'int'}, 'minimumConfidence': {'type': 'float'}, 'sourceID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'afterAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'addresses': {'type': 'list', 'position': 0, 'description': 'Set of IP addresses', 'items': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['address', 'lastModified', 'source', 'role', '-address', '-lastModified', '-source', '-role']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'addresses': {'type': 'list', 'position': 0, 'description': 'Set of IP addresses', 'items': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['address', 'lastModified', 'source', 'role', '-address', '-lastModified', '-source', '-role']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'address': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
find_domain_observations = {'tags': ['reputation/v1'], 'summary': 'List domain observations (INTERNAL)', 'description': '', 'operationId': 'findDomainObservations', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'minimumState': {'type': 'int'}, 'minimumConfidence': {'type': 'float'}, 'sourceID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'fromDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'afterDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'minimumState': {'type': 'int'}, 'minimumConfidence': {'type': 'float'}, 'sourceID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'fromDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'afterDomainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}, 'limit': {'type': 'int', 'position': 0, 'description': 'Max number of results.'}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip the first (offset) objects. By default, return result from first object.'}, 'includeDeleted': {'type': 'bool', 'position': 0, 'description': 'Set to true to include deleted objects. By default, exclude deleted objects.'}, 'includeFlags': {'type': 'int', 'position': 0, 'description': 'Only include objects which have includeFlags set.'}, 'excludeFlags': {'type': 'int', 'position': 0, 'description': 'Exclude objects which have excludeFlags set.'}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Set additional criterias which are applied using a logical OR.', 'uniqueItems': True, 'items': []}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'domainNames': {'type': 'list', 'position': 0, 'description': 'List of Full Qualified Domain Names', 'items': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['domainName', 'lastModified', 'source', 'role', '-domainName', '-lastModified', '-source', '-role']}}}}}, 'exclude': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded.'}, 'required': {'type': 'bool', 'position': 0, 'description': 'Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria).'}, 'startTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data after this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'endTimestamp': {'type': 'str', 'position': 0, 'description': 'Restrict search to data before this time (epoch millis) according to selected TimeFieldStrategies. Allows unix timestamp (milliseconds), ISO timestamp, or relative time specifies. See https://docs.mnemonic.no/x/AQDXAQ'}, 'domainNames': {'type': 'list', 'position': 0, 'description': 'List of Full Qualified Domain Names', 'items': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'List of properties to sort by (prefix with "-" to sort descending).', 'items': {'type': 'str', 'enum': ['domainName', 'lastModified', 'source', 'role', '-domainName', '-lastModified', '-source', '-role']}}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
list_address_observations = {'tags': ['reputation/v1'], 'summary': 'List IP observations (INTERNAL)', 'description': '', 'operationId': 'listAddressObservations', 'produces': ['application/json'], 'parameters': [{'name': 'sourceID', 'in': 'query', 'description': 'Limit result to observations from specified source', 'required': False, 'type': 'int'}, {'name': 'minimumState', 'in': 'query', 'description': 'Limit result to observations with this state or higher', 'required': False, 'type': 'int'}, {'name': 'minimumConfidence', 'in': 'query', 'description': 'Limit result to observations bound to sources with at least this confidence', 'required': False, 'type': 'float', 'maximum': 1.0, 'minimum': 0.0}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'address': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
list_domain_observations = {'tags': ['reputation/v1'], 'summary': 'List domain observations (INTERNAL)', 'description': '', 'operationId': 'listDomainObservations', 'produces': ['application/json'], 'parameters': [{'name': 'sourceID', 'in': 'query', 'description': 'Limit result to observations from specified source', 'required': False, 'type': 'int'}, {'name': 'minimumState', 'in': 'query', 'description': 'Limit result to observations with this state or higher', 'required': False, 'type': 'int'}, {'name': 'minimumConfidence', 'in': 'query', 'description': 'Limit result to observations bound to sources with at least this confidence', 'required': False, 'type': 'float', 'maximum': 1.0, 'minimum': 0.0}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'lastModified': {'type': 'int', 'position': 0, 'description': 'Last time the observation was modified.'}, 'source': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Source"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Source"}}}, 'role': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'alias': {'type': 'str', 'position': 0, 'description': "Alias for the Observation's Role"}, 'name': {'type': 'str', 'position': 0, 'description': "Full name of the Observation's Role."}}}, 'firstSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the first observation of the IP first made by this source'}, 'lastSeen': {'type': 'int', 'position': 0, 'description': 'The timestamp of the most recent observation of the IP first made by this source'}, 'numObservations': {'type': 'int', 'position': 0, 'description': 'The number of times the IP address was observed during the time period.'}, 'state': {'type': 'int', 'position': 0, 'description': 'The state of the observation.'}, 'comment': {'type': 'str', 'position': 0, 'description': 'The comment associated with this observation'}, 'domainName': {'type': 'dict', 'properties': {'fqdn': {'type': 'string'}}}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation error'}}}
#: "fetch_observations_for_i_p" is an alias for "fetch_observations_for_ip"
fetch_observations_for_i_p = fetch_observations_for_ip