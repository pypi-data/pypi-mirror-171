{"version":3,"file":"a18ec745.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AA+GA;ACpDA;AA2BA;AACA;AACA;;;;;AA0CA;AAMA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;AAMA;AACA;;AAIA;;AAEA;;;AAIA;;;AAnCA;;;;AAvFA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/iron-icon/iron-icon.js","webpack://home-assistant-frontend/./src/panels/config/backup/ha-config-backup.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n/**\n\nThe `iron-icon` element displays an icon. By default an icon renders as a 24px\nsquare.\n\nExample using src:\n\n    <iron-icon src=\"star.png\"></iron-icon>\n\nExample setting size to 32px x 32px:\n\n    <iron-icon class=\"big\" src=\"big_star.png\"></iron-icon>\n\n    <style is=\"custom-style\">\n      .big {\n        --iron-icon-height: 32px;\n        --iron-icon-width: 32px;\n      }\n    </style>\n\nThe iron elements include several sets of icons. To use the default set of\nicons, import `iron-icons.js` and use the `icon` attribute to specify an icon:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/iron-icons.js\";\n    </script>\n\n    <iron-icon icon=\"menu\"></iron-icon>\n\nTo use a different built-in set of icons, import the specific\n`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.\nFor example, to use a communication icon, you would use:\n\n    <script type=\"module\">\n      import \"@polymer/iron-icons/communication-icons.js\";\n    </script>\n\n    <iron-icon icon=\"communication:email\"></iron-icon>\n\nYou can also create custom icon sets of bitmap or SVG icons.\n\nExample of using an icon named `cherry` from a custom iconset with the ID\n`fruit`:\n\n    <iron-icon icon=\"fruit:cherry\"></iron-icon>\n\nSee `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to\ncreate a custom iconset.\n\nSee the `iron-icons` demo to see the icons available in the various iconsets.\n\n### Styling\n\nThe following custom properties are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-icon` | Mixin applied to the icon | {}\n`--iron-icon-width` | Width of the icon | `24px`\n`--iron-icon-height` | Height of the icon | `24px`\n`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`\n`--iron-icon-stroke-color` | Stroke color of the svg icon | none\n\n@group Iron Elements\n@element iron-icon\n@demo demo/index.html\n@hero hero.svg\n@homepage polymer.github.io\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        @apply --layout-inline;\n        @apply --layout-center-center;\n        position: relative;\n\n        vertical-align: middle;\n\n        fill: var(--iron-icon-fill-color, currentcolor);\n        stroke: var(--iron-icon-stroke-color, none);\n\n        width: var(--iron-icon-width, 24px);\n        height: var(--iron-icon-height, 24px);\n        @apply --iron-icon;\n      }\n\n      :host([hidden]) {\n        display: none;\n      }\n    </style>\n`,\n\n  is: 'iron-icon',\n\n  properties: {\n\n    /**\n     * The name of the icon to use. The name should be of the form:\n     * `iconset_name:icon_name`.\n     */\n    icon: {type: String},\n\n    /**\n     * The name of the theme to used, if one is specified by the\n     * iconset.\n     */\n    theme: {type: String},\n\n    /**\n     * If using iron-icon without an iconset, you can set the src to be\n     * the URL of an individual icon image file. Note that this will take\n     * precedence over a given icon attribute.\n     */\n    src: {type: String},\n\n    /**\n     * @type {!IronMeta}\n     */\n    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}\n\n  },\n\n  observers: [\n    '_updateIcon(_meta, isAttached)',\n    '_updateIcon(theme, isAttached)',\n    '_srcChanged(src, isAttached)',\n    '_iconChanged(icon, isAttached)'\n  ],\n\n  _DEFAULT_ICONSET: 'icons',\n\n  _iconChanged: function(icon) {\n    var parts = (icon || '').split(':');\n    this._iconName = parts.pop();\n    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;\n    this._updateIcon();\n  },\n\n  _srcChanged: function(src) {\n    this._updateIcon();\n  },\n\n  _usesIconset: function() {\n    return this.icon || !this.src;\n  },\n\n  /** @suppress {visibility} */\n  _updateIcon: function() {\n    if (this._usesIconset()) {\n      if (this._img && this._img.parentNode) {\n        dom(this.root).removeChild(this._img);\n      }\n      if (this._iconName === '') {\n        if (this._iconset) {\n          this._iconset.removeIcon(this);\n        }\n      } else if (this._iconsetName && this._meta) {\n        this._iconset = /** @type {?Polymer.Iconset} */ (\n            this._meta.byKey(this._iconsetName));\n        if (this._iconset) {\n          this._iconset.applyIcon(this, this._iconName, this.theme);\n          this.unlisten(window, 'iron-iconset-added', '_updateIcon');\n        } else {\n          this.listen(window, 'iron-iconset-added', '_updateIcon');\n        }\n      }\n    } else {\n      if (this._iconset) {\n        this._iconset.removeIcon(this);\n      }\n      if (!this._img) {\n        this._img = document.createElement('img');\n        this._img.style.width = '100%';\n        this._img.style.height = '100%';\n        this._img.draggable = false;\n      }\n      this._img.src = this.src;\n      dom(this.root).appendChild(this._img);\n    }\n  }\n});\n","import { mdiDelete, mdiDownload, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-icon-overflow-menu\";\nimport \"../../../components/ha-svg-icon\";\nimport { getSignedPath } from \"../../../data/auth\";\nimport {\n  BackupContent,\n  BackupData,\n  fetchBackupInfo,\n  generateBackup,\n  getBackupDownloadUrl,\n  removeBackup,\n} from \"../../../data/backup\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { fileDownload } from \"../../../util/file_download\";\n\n@customElement(\"ha-config-backup\")\nclass HaConfigBackup extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide!: boolean;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @state() private _backupData?: BackupData;\n\n  private _columns = memoize(\n    (narrow, _language): DataTableColumnContainer => ({\n      name: {\n        title: this.hass.localize(\"ui.panel.config.backup.name\"),\n        main: true,\n        sortable: true,\n        filterable: true,\n        grows: true,\n        template: (entry: string, backup: BackupContent) =>\n          html`${entry}\n            <div class=\"secondary\">${backup.path}</div>`,\n      },\n      size: {\n        title: this.hass.localize(\"ui.panel.config.backup.size\"),\n        width: \"15%\",\n        hidden: narrow,\n        filterable: true,\n        sortable: true,\n        template: (entry: number) => Math.ceil(entry * 10) / 10 + \" MB\",\n      },\n      date: {\n        title: this.hass.localize(\"ui.panel.config.backup.created\"),\n        width: \"15%\",\n        direction: \"desc\",\n        hidden: narrow,\n        filterable: true,\n        sortable: true,\n        template: (entry: string) =>\n          relativeTime(new Date(entry), this.hass.locale),\n      },\n\n      actions: {\n        title: \"\",\n        width: \"15%\",\n        type: \"overflow-menu\",\n        template: (_: string, backup: BackupContent) =>\n          html`<ha-icon-overflow-menu\n            .hass=${this.hass}\n            .narrow=${this.narrow}\n            .items=${[\n              // Download Button\n              {\n                path: mdiDownload,\n                label: this.hass.localize(\n                  \"ui.panel.config.backup.download_backup\"\n                ),\n                action: () => this._downloadBackup(backup),\n              },\n              // Delete button\n              {\n                path: mdiDelete,\n                label: this.hass.localize(\n                  \"ui.panel.config.backup.remove_backup\"\n                ),\n                action: () => this._removeBackup(backup),\n              },\n            ]}\n            style=\"color: var(--secondary-text-color)\"\n          >\n          </ha-icon-overflow-menu>`,\n      },\n    })\n  );\n\n  private _getItems = memoize((backupItems: BackupContent[]) =>\n    backupItems.map((backup) => ({\n      name: backup.name,\n      slug: backup.slug,\n      date: backup.date,\n      size: backup.size,\n      path: backup.path,\n    }))\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._backupData === undefined) {\n      return html`<hass-loading-screen></hass-loading-screen>`;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .tabs=${[\n          {\n            translationKey: \"ui.panel.config.backup.caption\",\n            path: `/config/backup`,\n          },\n        ]}\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config/system\"\n        .route=${this.route}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._getItems(this._backupData.backups)}\n        .noDataText=${this.hass.localize(\"ui.panel.config.backup.no_backups\")}\n        .searchLabel=${this.hass.localize(\n          \"ui.panel.config.backup.picker.search\"\n        )}\n      >\n        <ha-fab\n          slot=\"fab\"\n          ?disabled=${this._backupData.backing_up}\n          .label=${this._backupData.backing_up\n            ? this.hass.localize(\"ui.panel.config.backup.creating_backup\")\n            : this.hass.localize(\"ui.panel.config.backup.create_backup\")}\n          extended\n          @click=${this._generateBackup}\n        >\n          ${this._backupData.backing_up\n            ? html`<ha-circular-progress\n                slot=\"icon\"\n                active\n              ></ha-circular-progress>`\n            : html`<ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>`}\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getBackups();\n  }\n\n  private async _getBackups(): Promise<void> {\n    this._backupData = await fetchBackupInfo(this.hass);\n  }\n\n  private async _downloadBackup(backup: BackupContent): Promise<void> {\n    const signedUrl = await getSignedPath(\n      this.hass,\n      getBackupDownloadUrl(backup.slug)\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  private async _generateBackup(): Promise<void> {\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.backup.create.title\"),\n      text: this.hass.localize(\"ui.panel.config.backup.create.description\"),\n      confirmText: this.hass.localize(\"ui.panel.config.backup.create.confirm\"),\n    });\n    if (!confirm) {\n      return;\n    }\n\n    generateBackup(this.hass)\n      .then(() => this._getBackups())\n      .catch((err) => showAlertDialog(this, { text: (err as Error).message }));\n\n    await this._getBackups();\n  }\n\n  private async _removeBackup(backup: BackupContent): Promise<void> {\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.backup.remove.title\"),\n      text: this.hass.localize(\"ui.panel.config.backup.remove.description\", {\n        name: backup.name,\n      }),\n      confirmText: this.hass.localize(\"ui.panel.config.backup.remove.confirm\"),\n    });\n    if (!confirm) {\n      return;\n    }\n\n    await removeBackup(this.hass, backup.slug);\n    await this._getBackups();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-fab[disabled] {\n          --mdc-theme-secondary: var(--disabled-text-color) !important;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-backup\": HaConfigBackup;\n  }\n}\n"],"names":[],"sourceRoot":""}