# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class GroupsQueryResponse(object):
    """GroupsQueryResponse - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'entity_type': 'str',
        'filtered_entity_count': 'int',
        'filtered_group_count': 'int',
        'total_entity_count': 'int',
        'total_group_count': 'int',
        'group_results': 'list[object]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'entity_type': 'entityType',
        'filtered_entity_count': 'filteredEntityCount',
        'filtered_group_count': 'filteredGroupCount',
        'total_entity_count': 'totalEntityCount',
        'total_group_count': 'totalGroupCount',
        'group_results': 'groupResults',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, entity_type=None, filtered_entity_count=None, filtered_group_count=None, total_entity_count=None, total_group_count=None, group_results=None, *args, **kwargs):  # noqa: E501
        """GroupsQueryResponse - a model defined in Swagger
            \nGroup query response
        """
        self.__entity_type = None
        self.__filtered_entity_count = None
        self.__filtered_group_count = None
        self.__total_entity_count = None
        self.__total_group_count = None
        self.__group_results = None
        self.discriminator = None
        if entity_type is not None:
            self.__entity_type = entity_type
        if filtered_entity_count is not None:
            self.__filtered_entity_count = filtered_entity_count
        if filtered_group_count is not None:
            self.__filtered_group_count = filtered_group_count
        if total_entity_count is not None:
            self.__total_entity_count = total_entity_count
        if total_group_count is not None:
            self.__total_group_count = total_group_count
        if group_results is not None:
            self.__group_results = group_results
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.groups.GroupsQueryResponse'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.groups.GroupsQueryResponse'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def entity_type(self):
        """`{ str }`
            \nEntity type to get the alerts.
        """ # noqa: E501
        return self.__entity_type

    @entity_type.setter
    def entity_type(self, entity_type):

        self.__entity_type = entity_type

    @property
    def filtered_entity_count(self):
        """`{ int }`
            \nCount of the filtered entities returned in group query response.
        """ # noqa: E501
        return self.__filtered_entity_count

    @filtered_entity_count.setter
    def filtered_entity_count(self, filtered_entity_count):
        if filtered_entity_count is not None and filtered_entity_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `filtered_entity_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__filtered_entity_count = filtered_entity_count

    @property
    def filtered_group_count(self):
        """`{ int }`
            \nCount of the filtered groups returned in group query response.
        """ # noqa: E501
        return self.__filtered_group_count

    @filtered_group_count.setter
    def filtered_group_count(self, filtered_group_count):
        if filtered_group_count is not None and filtered_group_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `filtered_group_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__filtered_group_count = filtered_group_count

    @property
    def total_entity_count(self):
        """`{ int }`
            \nTotal entity count returned in group query response.
        """ # noqa: E501
        return self.__total_entity_count

    @total_entity_count.setter
    def total_entity_count(self, total_entity_count):
        if total_entity_count is not None and total_entity_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_entity_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__total_entity_count = total_entity_count

    @property
    def total_group_count(self):
        """`{ int }`
            \nTotal group count returned in group query response.
        """ # noqa: E501
        return self.__total_group_count

    @total_group_count.setter
    def total_group_count(self, total_group_count):
        if total_group_count is not None and total_group_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_group_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__total_group_count = total_group_count

    @property
    def group_results(self):
        """`{ list[object] }`
            \nList of objects returned in group query response.
        """ # noqa: E501
        return self.__group_results

    @group_results.setter
    def group_results(self, group_results):

        self.__group_results = group_results

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupsQueryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsQueryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

