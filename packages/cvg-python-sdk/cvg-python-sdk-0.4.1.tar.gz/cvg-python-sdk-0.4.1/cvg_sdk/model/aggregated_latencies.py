# coding: utf-8

"""
    VIER Cognitive Voice Health API

    CVG health  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class AggregatedLatencies(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    How often a latency fell within a given bucket of size 50 ms. For instance, `{ "50": 3, "1000": 1 }` would
mean that this event had a latency of 0-49 ms three times and a latency of 1000-1049 ms once.
    """


    class MetaOapg:
        additional_properties = schemas.IntSchema
    
    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
    ) -> 'AggregatedLatencies':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
