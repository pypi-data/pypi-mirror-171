from typing import overload, Any, Callable, TypeVar, Union
from typing import Tuple, List, Sequence, MutableSequence

Callback = Union[Callable[..., None], None]
Buffer = TypeVar('Buffer')
Pointer = TypeVar('Pointer')
Template = TypeVar('Template')

import xsigmamodules.Core

class anyContainer(object):
    def at(self, id:anyId) -> anyObject: ...
    def contains(self, id:anyId) -> bool: ...
    def read_from_binary(file_name:str) -> anyContainer: ...
    def read_from_json(file_name:str) -> anyContainer: ...
    def update(self, ids:(anyId, ...), objects:(anyObject, ...)) -> None: ...
    def write_to_binary(file_name:str, rhs:anyContainer) -> None: ...
    def write_to_json(file_name:str, rhs:anyContainer) -> None: ...

class anyId(object):
    def get(self) -> dataId: ...
    def index(self) -> int: ...
    def read_from_binary(file_name:str) -> anyId: ...
    def read_from_json(file_name:str) -> anyId: ...
    def write_to_binary(file_name:str, rhs:anyId) -> None: ...
    def write_to_json(file_name:str, rhs:anyId) -> None: ...

class anyObject(object):
    def index(self) -> int: ...
    def read_from_binary(file_name:str) -> anyObject: ...
    def read_from_json(file_name:str) -> anyObject: ...
    def write_to_binary(file_name:str, rhs:anyObject) -> None: ...
    def write_to_json(file_name:str, rhs:anyObject) -> None: ...

class configData(object): ...

class dataId(object):
    def hash(self) -> int: ...
    def to_string(self) -> str: ...

class configDataId(dataId):
    def hash(self) -> int: ...

class currency(object):
    def __init__(self, __a:currency) -> None: ...
    def read_from_binary(file_name:str) -> currency: ...
    def read_from_json(file_name:str) -> currency: ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:currency) -> None: ...
    def write_to_json(file_name:str, rhs:currency) -> None: ...

class marketDataId(dataId):
    def hash(self) -> int: ...
    def to_string(self) -> str: ...

class defaultId(marketDataId):
    def ccy(self) -> currency: ...
    def hash(self) -> int: ...
    def read_from_binary(file_name:str) -> defaultId: ...
    def read_from_json(file_name:str) -> defaultId: ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:defaultId) -> None: ...
    def write_to_json(file_name:str, rhs:defaultId) -> None: ...

class marketData(object):
    def valuation_date(self) -> datetime: ...

class discountCurve(marketData):
    def df(self, start:datetime, end:datetime) -> float: ...
    def dfs(self, dates:(datetime, ...)) -> (float, ...): ...
    def discounting(self, __a:vector_IdE, __b:datetime) -> None: ...
    @overload
    def log_df(self, start:datetime, end:datetime) -> float: ...
    @overload
    def log_df(self, output:vector_IdE, start:datetime, end:datetime) -> None: ...
    def log_normalized_discounting(self) -> vector_IdE: ...

class discountCurveFlat(discountCurve):
    def df(self, from_:datetime, to:datetime) -> float: ...
    def log_df(self, from_:datetime, to:datetime) -> float: ...
    def read_from_binary(file_name:str) -> discountCurveFlat: ...
    def read_from_json(file_name:str) -> discountCurveFlat: ...
    def write_to_binary(file_name:str, rhs:discountCurveFlat) -> None: ...
    def write_to_json(file_name:str, rhs:discountCurveFlat) -> None: ...

class discountCurvePiecewiseConstant(discountCurve):
    def df(self, start_date:datetime, end_date:datetime) -> float: ...
    def log_df(self, start_date:datetime, end_date:datetime) -> float: ...
    def read_from_binary(file_name:str) -> discountCurvePiecewiseConstant: ...
    def read_from_json(file_name:str) -> discountCurvePiecewiseConstant: ...
    def write_to_binary(file_name:str, rhs:discountCurvePiecewiseConstant) -> None: ...
    def write_to_json(file_name:str, rhs:discountCurvePiecewiseConstant) -> None: ...

class discountDefinition(object):
    def read_from_binary(file_name:str) -> discountDefinition: ...
    def read_from_json(file_name:str) -> discountDefinition: ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:discountDefinition) -> None: ...
    def write_to_json(file_name:str, rhs:discountDefinition) -> None: ...

class discountId(marketDataId):
    def ccy(self) -> currency: ...
    def hash(self) -> int: ...
    def id(self) -> discountDefinition: ...
    def read_from_binary(file_name:str) -> discountId: ...
    def read_from_json(file_name:str) -> discountId: ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:discountId) -> None: ...
    def write_to_json(file_name:str, rhs:discountId) -> None: ...

class equitySpot(marketData):
    def forward(self, output:vector_IdE, start:datetime, end:datetime) -> None: ...
    def read_from_binary(file_name:str) -> equitySpot: ...
    def read_from_json(file_name:str) -> equitySpot: ...
    @overload
    def spot(self, output:vector_IdE) -> None: ...
    @overload
    def spot(self) -> float: ...
    def write_to_binary(file_name:str, rhs:equitySpot) -> None: ...
    def write_to_json(file_name:str, rhs:equitySpot) -> None: ...

class fxSpot(marketData):
    def forward(self, output:vector_IdE, start:datetime, end:datetime) -> None: ...
    def read_from_binary(file_name:str) -> fxSpot: ...
    def read_from_json(file_name:str) -> fxSpot: ...
    @overload
    def spot(self, output:vector_IdE) -> None: ...
    @overload
    def spot(self) -> float: ...
    def write_to_binary(file_name:str, rhs:fxSpot) -> None: ...
    def write_to_json(file_name:str, rhs:fxSpot) -> None: ...

class fxSpotId(marketDataId):
    def ccy_domestic(self) -> currency: ...
    def ccy_foreign(self) -> currency: ...
    def hash(self) -> int: ...
    def read_from_binary(file_name:str) -> fxSpotId: ...
    def read_from_json(file_name:str) -> fxSpotId: ...
    def to_string(self) -> str: ...
    def write_to_binary(file_name:str, rhs:fxSpotId) -> None: ...
    def write_to_json(file_name:str, rhs:fxSpotId) -> None: ...

class irVolatilityData(object):
    def model(self, expiry:datetime, maturity:datetime) -> volatilityModel: ...

class irVolatilityDataSabr(irVolatilityData):
    def model(self, expiry:datetime, maturity:datetime) -> volatilityModel: ...
    def read_from_binary(file_name:str) -> irVolatilityDataSabr: ...
    def read_from_json(file_name:str) -> irVolatilityDataSabr: ...
    def write_to_binary(file_name:str, rhs:irVolatilityDataSabr) -> None: ...
    def write_to_json(file_name:str, rhs:irVolatilityDataSabr) -> None: ...

class irVolatilitySurface(marketData):
    def data(self) -> irVolatilityData: ...
    def read_from_binary(file_name:str) -> irVolatilitySurface: ...
    def read_from_json(file_name:str) -> irVolatilitySurface: ...
    def write_to_binary(file_name:str, rhs:irVolatilitySurface) -> None: ...
    def write_to_json(file_name:str, rhs:irVolatilitySurface) -> None: ...

class lifeCycleData(object): ...

class lifeCycleId(dataId):
    def hash(self) -> int: ...
    def to_string(self) -> str: ...

class survivalCurve(marketData):
    @overload
    def log_survival_probability(self, start:datetime, end:datetime) -> float: ...
    @overload
    def log_survival_probability(self, output:vector_IdE, start:datetime, end:datetime) -> None: ...
    @overload
    def survival_probability(self, start:datetime, end:datetime) -> float: ...
    @overload
    def survival_probability(self, __a:vector_IdE, __b:datetime) -> None: ...

class survivalCurveFlat(survivalCurve):
    def log_survival_probability(self, from_:datetime, to:datetime) -> float: ...
    def read_from_binary(file_name:str) -> survivalCurveFlat: ...
    def read_from_json(file_name:str) -> survivalCurveFlat: ...
    def survival_probability(self, from_:datetime, to:datetime) -> float: ...
    def write_to_binary(file_name:str, rhs:survivalCurveFlat) -> None: ...
    def write_to_json(file_name:str, rhs:survivalCurveFlat) -> None: ...

class survivalCurvePiecewiseConstant(survivalCurve):
    def log_survival_probability(self, start_date:datetime, end_date:datetime) -> float: ...
    def read_from_binary(file_name:str) -> survivalCurvePiecewiseConstant: ...
    def read_from_json(file_name:str) -> survivalCurvePiecewiseConstant: ...
    def survival_probability(self, start_date:datetime, end_date:datetime) -> float: ...
    def write_to_binary(file_name:str, rhs:survivalCurvePiecewiseConstant) -> None: ...
    def write_to_json(file_name:str, rhs:survivalCurvePiecewiseConstant) -> None: ...

class volatilityModel(object):
    def implied_volatility(self, forward:float, strike:float, expiry:float, type:volatilityType) -> float: ...
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...

class volatilityModelSabr(volatilityModel):
    def price(self, forward:float, strike:float, expiry:float, numeraire:float, is_call:float) -> float: ...

