"""Autogenerated API schema"""
from argus_api import session


add_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Adds an analysis filter (DEV)', 'description': '', 'operationId': 'addAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Add analysis filter request', 'required': False, 'schema': {'type': 'object', 'required': ['comment', 'description', 'labels', 'name', 'statementCode', 'triggerCode'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of the customer the filter belongs to. If customer is not set, this will create a global filter'}, 'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'Optional esper code which does a pre selection before the statement code is run'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'Optional esper code to do further pre selection on the result of preStatementCode1, and applied before the statementCode'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code which is run on the selected events'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'The name of the signature which should be attached to the created event'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will populate the created event with information from the selected event (default false)', 'default': False}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit triggered events for central storage (default false)', 'default': False}, 'labels': {'type': 'list', 'position': 0, 'description': 'A set of labels which can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'enabled': {'type': 'bool', 'position': 0, 'description': 'Whether or not the filter is enabled (default false)', 'default': False}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was created'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'This code does a pre selection of events to run the statementCode or preStatementCode2 code against'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'This code does a selection on the results from the preStatement1 to do an additional filtering before sending the events to the statementCode'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'The code which will select which events are analysed. If preStatementCode1, or preStatementCode1 and preStatementCode2 is set, this will be run on the results from them'}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'The code which in run on the results from the statementCode'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'The name of the action'}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'defaultAggregate', 'skipNewEvent']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was added'}}}}}}, '201': {'description': 'Filter created'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
delete_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Deletes an analysis filter (DEV)', 'description': '', 'operationId': 'deleteAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to delete', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'Analysis filter deleted'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
duplicate_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Duplicates an analysis filter (DEV)', 'description': '', 'operationId': 'duplicateAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Analysis filter duplication request', 'required': False, 'schema': {'type': 'object'}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}, 'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'This code does a pre selection of events to run the statementCode or preStatementCode2 code against'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'This code does a selection on the results from the preStatement1 to do an additional filtering before sending the events to the statementCode'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'The code which will select which events are analysed. If preStatementCode1, or preStatementCode1 and preStatementCode2 is set, this will be run on the results from them'}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'The code which in run on the results from the statementCode'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'The name of the action'}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global', 'defaultAggregate', 'skipNewEvent']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created'}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated'}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name"}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name"}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer.'}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer.'}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object.'}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain.'}}, 'description': 'SPI DomainInfo'}}, 'description': 'SPI CustomerInfo'}}, 'description': 'SPI UserInfo'}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted'}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was added'}}}}}}, '201': {'description': 'Duplicated Analysis filter'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Gets an analysis filter (DEV)', 'description': '', 'operationId': 'getAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in AnnotationFilter', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'Analysis filter returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_analysis_filter_revisions = {'tags': ['eventfilters/v2'], 'summary': 'Gets a analysis filters earlier revisions (DEV)', 'description': '', 'operationId': 'getAnalysisFilterRevisions', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to fetch revisions for', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'limit', 'in': 'query', 'description': 'The max amount of revisions to return', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'The number of revisions to skip before returning', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Analysis filter revisions returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_analysis_filter_status = {'tags': ['eventfilters/v2'], 'summary': 'Gets the status of a analysis filter (DEV)', 'description': '', 'operationId': 'listAnalysisFilterStatus', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Analysis filter status returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
list_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Simple search for analysis filters (DEV)', 'description': '', 'operationId': 'listAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Set match strategy for keyword search', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordField', 'in': 'query', 'description': 'Set field strategy for keyword search', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}, 'collectionFormat': 'multi'}, {'name': 'timestampMatch', 'in': 'query', 'description': 'Set match strategy for timestamp filtering', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampField', 'in': 'query', 'description': 'Set field strategy for timestamp filtering', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'lastUpdated', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}, 'collectionFormat': 'multi'}, {'name': 'start', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'end', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in results', 'required': False, 'type': 'bool', 'default': False}, {'name': 'sortBy', 'in': 'query', 'description': 'Field to sort by', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Search performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
revive_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Revives a deleted a analysis filter (DEV)', 'description': '', 'operationId': 'reviveAnalysisFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'Revived analysis filter'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
search_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Searches for analysis filters (DEV)', 'description': '', 'operationId': 'searchAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search analysis filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'order': {'type': 'list', 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'created', 'lastUpdated', 'deleted', '-id', '-name', '-created', '-lastUpdated', '-deleted']}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'label', 'preStatement1', 'preStatement2', 'statementCode', 'triggerCode', 'actionName', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['created', 'lastUpdated', 'deleted', 'all']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'defaultAggregate', 'skipNewEvent']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search', 'uniqueItems': True, 'items': []}}}}}}}, 'includeCode': {'type': 'bool', 'position': 0, 'description': 'Whether or not to include code in the result object. The code is only returned if set to true (default false)', 'default': False}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit maximum amount of results (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip specified amount of results (default 0)', 'minimum': 0, 'default': 0}}}}], 'responses': {'200': {'description': 'Search performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
set_analysis_filter_log_level = {'tags': ['eventfilters/v2'], 'summary': 'Sets the log level of a analysis filter (DEV)', 'description': '', 'operationId': 'setAnalysisFilterLogLevel', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Set analysis filter log level request', 'required': False, 'schema': {'type': 'object', 'required': ['logLevel'], 'properties': {'logLevel': {'type': 'str', 'position': 0, 'description': 'The new log level of the filter', 'enum': ['debug', 'info']}}}}], 'responses': {'200': {'description': 'Analysis filter updated'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}
update_analysis_filter = {'tags': ['eventfilters/v2'], 'summary': 'Updates an analysis filter (DEV)', 'description': '', 'operationId': 'updateAnalysisFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Update analysis filter request', 'required': False, 'schema': {'type': 'object', 'required': ['addLabels', 'comment', 'removeLabels', 'setLabels'], 'properties': {'enabled': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter'}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter'}, 'preStatementCode1': {'type': 'str', 'position': 0, 'description': 'Optional esper code which does a pre selection before the statement code is run'}, 'preStatementCode2': {'type': 'str', 'position': 0, 'description': 'Optional esper code to do further pre selection on the result of preStatementCode1, and applied before the statementCode'}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'Esper code to select which events the filter will be applied to'}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'Groovy code which is run on the selected events'}, 'actionName': {'type': 'str', 'position': 0, 'description': 'The name of the signature which should be attached to the created event'}, 'defaultAggregate': {'type': 'bool', 'position': 0, 'description': 'If true this filter will populate the created event with information from the selected event'}, 'skipNewEvent': {'type': 'bool', 'position': 0, 'description': 'If true the filter will not submit triggered events for central storage'}, 'removeLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'addLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'setLabels': {'type': 'list', 'position': 0, 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels', 'uniqueItems': True, 'items': {'type': 'string'}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was created'}}}}], 'responses': {'200': {'description': 'Analysis filter updated'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}