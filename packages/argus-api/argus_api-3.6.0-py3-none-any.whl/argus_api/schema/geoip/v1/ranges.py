"""Autogenerated API schema"""
from argus_api import session


add_or_update_ranges = {'tags': ['/geoip/v1'], 'summary': 'Add or update IP ranges (DEV)', 'description': '', 'operationId': 'addOrUpdateRanges', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'required': False, 'schema': {'type': 'array', 'items': {'type': 'object', 'properties': {'fromAddress': {'type': 'string'}, 'toAddress': {'type': 'string'}, 'locationID': {'type': 'integer', 'format': 'int64'}}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'range': {'type': 'dict', 'properties': {'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}, 'locationID': {'type': 'int'}, 'lastModified': {'type': 'int'}, 'flags': {'type': 'int'}, 'latitude': {'type': 'float'}, 'longitude': {'type': 'float'}, 'deleted': {'type': 'boolean'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
find_ranges = {'tags': ['/geoip/v1'], 'summary': 'Find IP ranges (DEV)', 'description': '', 'operationId': 'findRanges', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search criteria', 'required': False, 'schema': {'type': 'object', 'properties': {'countryID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'regionID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'locationID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'rangeID': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'int'}}, 'startIPAddress': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'fromIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toIP': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'addressFamily': {'type': 'str', 'enum': ['IPv4', 'IPv6']}, 'ipAddress': {'type': 'list', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}, 'limit': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Limit results'}, 'offset': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Offset results'}, 'includeDeleted': {'type': 'bool', 'xml': {'attribute': True}, 'position': 0, 'description': 'Also include deleted objects (where implemented)'}, 'includeFlags': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects with these flags set'}, 'excludeFlags': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Exclude objects with these flags set'}, 'sortBy': {'type': 'list', 'position': 0, 'description': 'Order results by these properties (prefix with - to sort descending)', 'items': {'type': 'string'}}, 'startTimestamp': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects from this timestamp'}, 'endTimestamp': {'type': 'int', 'xml': {'attribute': True}, 'position': 0, 'description': 'Search objects until this timestamp'}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'int'}, 'range': {'type': 'dict', 'properties': {'fromAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}, 'toAddress': {'type': 'dict', 'properties': {'host': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'public': {'type': 'boolean'}, 'ipv6': {'type': 'bool', 'xml': {'attribute': True}, 'readOnly': True}, 'maskBits': {'type': 'int'}, 'multicast': {'type': 'boolean'}, 'address': {'type': 'str', 'xml': {'attribute': True}, 'readOnly': True}}}}}, 'locationID': {'type': 'int'}, 'lastModified': {'type': 'int'}, 'flags': {'type': 'int'}, 'latitude': {'type': 'float'}, 'longitude': {'type': 'float'}, 'deleted': {'type': 'boolean'}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}