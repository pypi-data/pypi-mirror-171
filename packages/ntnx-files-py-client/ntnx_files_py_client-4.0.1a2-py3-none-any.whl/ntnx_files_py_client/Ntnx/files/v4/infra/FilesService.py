# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.infra.FileServerInfo import FileServerInfo  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.infra.FilesServiceNvmInfo import FilesServiceNvmInfo  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.infra.StorageInfo import StorageInfo  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class FilesService(object):
    """FilesService - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'file_server_info': 'files.v4.infra.FileServerInfo',
        'nvm_info': 'files.v4.infra.FilesServiceNvmInfo',
        'storage_info': 'files.v4.infra.StorageInfo',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'file_server_info': 'fileServerInfo',
        'nvm_info': 'nvmInfo',
        'storage_info': 'storageInfo',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, file_server_info=None, nvm_info=None, storage_info=None, *args, **kwargs):  # noqa: E501
        """FilesService - a model defined in Swagger
            \nA model that represents the files platform service request and response. Files platform service comprises of file server, NVM and storage information. This is requested from platform to files. 
        """
        self.__file_server_info = None
        self.__nvm_info = None
        self.__storage_info = None
        self.discriminator = None
        if file_server_info is not None:
            self.__file_server_info = file_server_info
        if nvm_info is not None:
            self.__nvm_info = nvm_info
        if storage_info is not None:
            self.__storage_info = storage_info
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.infra.FilesService'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.infra.FilesService'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def file_server_info(self):
        """`{ files.v4.infra.FileServerInfo }`
            
        """ # noqa: E501
        return self.__file_server_info

    @file_server_info.setter
    def file_server_info(self, file_server_info):

        self.__file_server_info = file_server_info

    @property
    def nvm_info(self):
        """`{ files.v4.infra.FilesServiceNvmInfo }`
            
        """ # noqa: E501
        return self.__nvm_info

    @nvm_info.setter
    def nvm_info(self, nvm_info):

        self.__nvm_info = nvm_info

    @property
    def storage_info(self):
        """`{ files.v4.infra.StorageInfo }`
            
        """ # noqa: E501
        return self.__storage_info

    @storage_info.setter
    def storage_info(self, storage_info):

        self.__storage_info = storage_info

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilesService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilesService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

