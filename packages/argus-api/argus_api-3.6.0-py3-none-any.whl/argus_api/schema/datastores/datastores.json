{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "datastores/v1"
    }
  ],
  "paths": {
    "/datastores/v1/descriptor/search": {
      "post": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Returns an array of DataStore descriptors matching search criteria (PUBLIC)",
        "description": "",
        "operationId": "searchDescriptors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataStoreDescriptorSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreDescriptor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/datastores/v1/descriptor": {
      "get": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Returns an array of DataStore descriptors matching search parameters (PUBLIC)",
        "description": "",
        "operationId": "searchDescriptorsSimple",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Search by keywords",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywordMatch",
            "in": "query",
            "description": "Set match strategy for keyword search",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "all",
              "any"
            ]
          },
          {
            "name": "keywordField",
            "in": "query",
            "description": "Set field strategy for keyword search",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "all",
              "enum": [
                "name",
                "description",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort search result",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreDescriptor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Adds a new datastore descriptor. (PUBLIC)",
        "description": "",
        "operationId": "addDataStoreDescriptor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataStoreDescriptorAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/datastores/v1/descriptor/{dataStore}": {
      "get": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Returns a Datastore descriptor identified by its name. (PUBLIC)",
        "description": "",
        "operationId": "getDescriptor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Descriptor name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreDescriptor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Updates an existing datastore descriptor. (PUBLIC)",
        "description": "",
        "operationId": "updateDataStoreDescriptor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataStoreDescriptorUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Deletes an existing datastore descriptor. (PUBLIC)",
        "description": "",
        "operationId": "deleteDataStoreDescriptor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/datastores/v1/store/{dataStore}": {
      "get": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Returns datastore entries for the specified store, matching query parameters. (PUBLIC)",
        "description": "",
        "operationId": "getEntriesFromStoreSimplified",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Limit search to entries for the specified customers",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Limit search to the specified entry keys",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Include deleted/expired keys",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Updates the provided datastore entries for the specified store. (PUBLIC)",
        "description": "",
        "operationId": "putDataStoreEntries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Request specifying data to add",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataStoreEntryPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Deletes the specified datastore entries for the specified store. (PUBLIC)",
        "description": "",
        "operationId": "deleteDataStoreEntries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "query",
            "description": "Datastore keys to delete",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Specify datastore to delete entries from (default is users customer)",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/datastores/v1/store/{dataStore}/{key}": {
      "get": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Returns the specified datastore entry for the specified store, or null if it does not exist (PUBLIC)",
        "description": "",
        "operationId": "getSingleEntry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Key to search",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Search specified customer store for this key (default is users customer)",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "description": "Include deleted/expired key",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Adds the provided datastore entry for the specified store. To use for lists (key, no value) (PUBLIC)",
        "description": "",
        "operationId": "putSingleDataStoreListEntry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Datastore key to set",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Specify datastore to put entry to (default is users customer)",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ListEntry-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/datastores/v1/store/{dataStore}/search": {
      "post": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Returns datastore entries for the specified store, matching the search criteria. (PUBLIC)",
        "description": "",
        "operationId": "getEntriesFromStore",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DataStoreSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/datastores/v1/store/{dataStore}/{key}/{value}": {
      "put": {
        "tags": [
          "datastores/v1"
        ],
        "summary": "Updates the provided datastore entry for the specified store. To use for maps (key with value). (PUBLIC)",
        "description": "",
        "operationId": "putSingleDataStoreMapEntry",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "dataStore",
            "in": "path",
            "description": "Store name",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Datastore key to set",
            "required": true,
            "type": "string"
          },
          {
            "name": "value",
            "in": "path",
            "description": "Datastore value to set",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Specify datastore to put entry to (default is users customer)",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-DataStoreEntry-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Store not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    }
  },
  "definitions": {
    "DataStoreDescriptor": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Datastore name (identifier)"
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Datastore description"
        },
        "dataType": {
          "type": "string",
          "position": 0,
          "description": "Data type (MAP or LIST). Maps have keys with values, lists only have keys.",
          "enum": [
            "MAP",
            "LIST"
          ]
        },
        "behaviourType": {
          "type": "string",
          "position": 0,
          "description": "Datastore behaviour. CENTRAL datastores define their data in the central Argus application. LOCAL and DISTRIBUTED datastores are used to control expiry and format for stores used in distributed processing.",
          "enum": [
            "LOCAL",
            "DISTRIBUTED",
            "CENTRAL"
          ]
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp for the last update of this datastore descriptor."
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "Information about the user who performed the last update of this descriptor.",
          "$ref": "#/definitions/UserInfo"
        },
        "lifeTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "For datastores with expireData, the lifeTime defines the time period (in milliseconds) the data will live after last put before being expired."
        },
        "globalData": {
          "type": "boolean",
          "position": 0,
          "description": "Datastores with globalData do not accept data per customer, but only to a common global store."
        },
        "expireData": {
          "type": "boolean",
          "position": 0,
          "description": "Datastores with expireData will automatically expire data which is older than lifeTime millis."
        }
      }
    },
    "ResultStash-DataStoreDescriptor-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/DataStoreDescriptor"
          }
        }
      }
    },
    "ResultStash-DataStoreDescriptor-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/DataStoreDescriptor"
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "DataStoreDescriptorSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Only include objects which have includeFlags set."
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DataStoreDescriptorSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for datastores matching keyword",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "description",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines the MatchStrategy for keywords (default match all keywords).",
          "enum": [
            "all",
            "any"
          ]
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "name",
              "lastUpdatedTimestamp",
              "-name",
              "-lastUpdatedTimestamp"
            ]
          }
        }
      }
    },
    "DataStoreDescriptorUpdateRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "If set, request datastore to change name. All entries will be updated (so may take long time for large stores). => [a-zA-Z0-9_\\-\\.]*",
          "minLength": 0,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "If set, update description on datastore. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*",
          "minLength": 0,
          "maxLength": 2048
        },
        "globalData": {
          "type": "boolean",
          "position": 0,
          "description": "If set, change the global data flag on this datastore. Default is no change."
        },
        "expireData": {
          "type": "boolean",
          "position": 0,
          "description": "If set, change the expire data flag on this datastore. Default is no change."
        },
        "lifeTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "If set (to positive value), change the expiry time for this datastore. Requires that the store has enabled expireData. Default is no change.",
          "minimum": 1
        }
      }
    },
    "ResultStash-DataStoreEntry-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/DataStoreEntry"
          }
        }
      }
    },
    "ResultStash-ListEntry-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/ListEntry"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResultStash-DataStoreEntry-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/DataStoreEntry"
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DataStoreEntry": {
      "type": "object",
      "properties": {
        "dataStoreName": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED"
            ]
          }
        }
      }
    },
    "Entry": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string",
          "position": 0,
          "description": "Map value. Not valid when writing data to list stores.",
          "readOnly": true,
          "minLength": 0,
          "maxLength": 2048
        },
        "key": {
          "type": "string",
          "position": 0,
          "description": "List entry or map key.",
          "minLength": 0,
          "maxLength": 255
        }
      }
    },
    "DataStoreEntryPutRequest": {
      "type": "object",
      "required": [
        "entries"
      ],
      "properties": {
        "customerID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of customer to bind data to. If not set, default is to bind to the current users customer (or none, if datastore is global)",
          "minimum": 0
        },
        "entries": {
          "type": "array",
          "position": 0,
          "description": "Entries to add",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Entry"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      }
    },
    "DataStoreSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/DataStoreSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "customerID": {
          "type": "array",
          "position": 0,
          "description": "Restrict search to data belonging to specified customers.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "userID": {
          "type": "array",
          "position": 0,
          "description": "Restrict search to entries which was last updated by specified users.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "key": {
          "type": "array",
          "position": 0,
          "description": "Restrict search to the specified key (entries).",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "fromKey": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to entries (map keys) which are greater than this key (including, by lexical order)."
        },
        "toKey": {
          "type": "string",
          "position": 0,
          "description": "Restrict search to entries (map keys) which are less than this key (including, by lexical order)."
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict search to entries which are last updated after this timestamp (including)."
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict search to entries which are last updated before this timestamp (including)."
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "List of properties to sort by (prefix with \"-\" to sort descending).",
          "items": {
            "type": "string",
            "enum": [
              "key",
              "lastUpdatedTimestamp",
              "-key",
              "-lastUpdatedTimestamp"
            ]
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Only include objects which have includeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED"
            ]
          }
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        }
      }
    },
    "DataStoreDescriptorAddRequest": {
      "type": "object",
      "required": [
        "behaviourType",
        "dataType",
        "description",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name for new datastore. Name must be unique. => [a-zA-Z0-9_\\-\\.]*",
          "minLength": 0,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Description of the datastore. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*",
          "minLength": 0,
          "maxLength": 2048
        },
        "globalData": {
          "type": "boolean",
          "position": 0,
          "description": "If true, datastore only accepts global data (not customer bound)."
        },
        "expireData": {
          "type": "boolean",
          "position": 0,
          "description": "If true, datastore entries will expire after the configured time period since added/last updated."
        },
        "lifeTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The requested expiry time in milliseconds. Requires a positive value (if expireData is true).",
          "minimum": 1
        },
        "behaviourType": {
          "type": "string",
          "position": 0,
          "description": "Datastore behaviour. CENTRAL stores are only updated centrally, but may be used in distributed processing. LOCAL and DISTRIBUTED stores are not stored centrally, but updated in the distributed system. DISTRIBUTED may be shared between processing nodes. (default CENTRAL)",
          "enum": [
            "LOCAL",
            "DISTRIBUTED",
            "CENTRAL"
          ]
        },
        "dataType": {
          "type": "string",
          "position": 0,
          "description": "Select data type: list of values or key/value store. (default MAP (key/value store))",
          "enum": [
            "MAP",
            "LIST"
          ]
        }
      }
    },
    "ListEntry": {
      "type": "object",
      "properties": {
        "dataStoreName": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "key": {
          "type": "string"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED"
            ]
          }
        }
      }
    }
  }
}