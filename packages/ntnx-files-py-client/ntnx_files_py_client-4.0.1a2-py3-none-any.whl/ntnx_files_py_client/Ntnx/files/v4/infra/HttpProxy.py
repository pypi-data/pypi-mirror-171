# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.infra.ProxyType import ProxyType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class HttpProxy(object):
    """HttpProxy - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'id_string': 'str',
        'address': 'str',
        'port': 'int',
        'username': 'str',
        'password': 'str',
        'proxy_type_list': 'list[files.v4.infra.ProxyType]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'id_string': 'idString',
        'address': 'address',
        'port': 'port',
        'username': 'username',
        'password': 'password',
        'proxy_type_list': 'proxyTypeList',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, id_string=None, address=None, port=None, username=None, password=None, proxy_type_list=None, *args, **kwargs):  # noqa: E501
        """HttpProxy - a model defined in Swagger
            \nHttp proxy model. 
        """
        self.__id_string = None
        self.__address = None
        self.__port = None
        self.__username = None
        self.__password = None
        self.__proxy_type_list = None
        self.discriminator = None
        if id_string is not None:
            self.__id_string = id_string
        if address is not None:
            self.__address = address
        if port is not None:
            self.__port = port
        if username is not None:
            self.__username = username
        if password is not None:
            self.__password = password
        if proxy_type_list is not None:
            self.__proxy_type_list = proxy_type_list
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.infra.HttpProxy'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.infra.HttpProxy'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def id_string(self):
        """`{ str }`
            \nId string for the http proxy. 
        """ # noqa: E501
        return self.__id_string

    @id_string.setter
    def id_string(self, id_string):

        self.__id_string = id_string

    @property
    def address(self):
        """`{ str }`
            \nIP address or FQDN name for the http proxy. 
        """ # noqa: E501
        return self.__address

    @address.setter
    def address(self, address):

        self.__address = address

    @property
    def port(self):
        """`{ int }`
            \nPort for the http proxy. 
        """ # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):
        if port is not None and port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__port = port

    @property
    def username(self):
        """`{ str }`
            \nUsername for prism central API authentication. 
        """ # noqa: E501
        return self.__username

    @username.setter
    def username(self, username):

        self.__username = username

    @property
    def password(self):
        """`{ str }`
            \nPassword for prism central API authentication. 
        """ # noqa: E501
        return self.__password

    @password.setter
    def password(self, password):

        self.__password = password

    @property
    def proxy_type_list(self):
        """`{ list[files.v4.infra.ProxyType] }`
            \nList of supported types by the proxy. 
        """ # noqa: E501
        return self.__proxy_type_list

    @proxy_type_list.setter
    def proxy_type_list(self, proxy_type_list):

        self.__proxy_type_list = proxy_type_list

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpProxy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpProxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

