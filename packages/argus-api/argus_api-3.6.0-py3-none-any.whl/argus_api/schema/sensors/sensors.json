{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "sensors/v1"
    }
  ],
  "paths": {
    "/sensors/v1/sensor/bulk/disable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Bulk deactivation of Sensors (INTERNAL)",
        "description": "",
        "operationId": "disableSensors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Bulk deactivation request for a list of Sensors.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DisableSensorBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/disable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Deactivates a sensor (INTERNAL)",
        "description": "",
        "operationId": "disableSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/enable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Bulk activation of sensors (INTERNAL)",
        "description": "",
        "operationId": "enableSensors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Bulk activation request for a list of Sensors.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnableSensorBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/enable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Activates a sensor (INTERNAL)",
        "description": "",
        "operationId": "enableSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/comment": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Fetch comments for sensor (INTERNAL)",
        "description": "",
        "operationId": "listSensorComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "SensorID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Comment-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Add comment to a sensor (INTERNAL)",
        "description": "",
        "operationId": "addComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "SensorID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "AddSensorCommentRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddSensorCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Comment-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/comment/{timestamp}": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Fetch comment by timestamp for sensor (INTERNAL)",
        "description": "",
        "operationId": "getSensorComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "SensorID",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "timestamp",
            "in": "path",
            "description": "Timestamp",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Comment-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Deletes a comment (INTERNAL)",
        "description": "",
        "operationId": "deleteSensorComment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "Delete comment from this sensor",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "timestamp",
            "in": "path",
            "description": "Delete comment made at this timestamp",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/downtime": {
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Schedules downtime for provided sensorIDs (INTERNAL)",
        "description": "",
        "operationId": "bulkScheduleSensorDowntime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Bulk downtime request for a set of Sensors.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorScheduleDowntimeBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Cancels downtime for supplied sensorIDs (INTERNAL)",
        "description": "",
        "operationId": "bulkCancelSensorDowntime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "query",
            "description": "Cancel downtime for these Sensor IDs",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/downtime": {
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Schedules downtime for supplied sensorID (INTERNAL)",
        "description": "",
        "operationId": "scheduleSensorDowntime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Downtime request for a single sensor.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorScheduleDowntimeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Cancels downtime for supplied sensorID (INTERNAL)",
        "description": "",
        "operationId": "cancelSensorDowntime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/location": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "List locations (INTERNAL)",
        "description": "",
        "operationId": "listLocations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Limit search to these customer IDs",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Location-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Creates a location (INTERNAL)",
        "description": "",
        "operationId": "createLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request for a sensor's location.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddLocationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Location-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/location/{idOrShortName}": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Fetch Location by ID or short name (INTERNAL)",
        "description": "",
        "operationId": "getLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or short name of location to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Location-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Updates location (INTERNAL)",
        "description": "",
        "operationId": "updateLocation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or short name of location to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update request for a sensor's location.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateLocationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Location-single"
            }
          },
          "220": {
            "description": "No update performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Deletes location (INTERNAL)",
        "description": "",
        "operationId": "deleteLocation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "ID or short name of location to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Location-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Location not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/location/search": {
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Search locations (INTERNAL)",
        "description": "",
        "operationId": "findLocations",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LocationSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Location-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/monitoring/disable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Disable sensor monitoring (INTERNAL)",
        "description": "",
        "operationId": "disableMonitoring",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID for sensor to disable monitoring",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/monitoring/disable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Bulk disable sensor monitoring (INTERNAL)",
        "description": "",
        "operationId": "disableMonitoringBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request containing list of sensorIDs to disable monitoring",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DisableMonitoringBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/monitoring/enable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Enable sensor monitoring (INTERNAL)",
        "description": "",
        "operationId": "enableMonitoring",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID for sensor to enable monitoring",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "daytime",
            "in": "query",
            "description": "Daytime only monitoring flag",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/monitoring/enable": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Bulk enable sensor monitoring (INTERNAL)",
        "description": "",
        "operationId": "enableMonitoringBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request containing list of sensorIDs to disable monitoring",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnableMonitoringBulkRequest"
            }
          },
          {
            "name": "daytime",
            "in": "query",
            "description": "Daytime only monitoring flag",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "List sensors (INTERNAL)",
        "description": "",
        "operationId": "listSensors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Limit search to these customer IDs",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customer",
            "in": "query",
            "description": "Limit search to these customer ids or shortname",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Limit search to these applications by name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Limit search by sensor hostname or IP address",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Creates a Sensor (INTERNAL)",
        "description": "",
        "operationId": "createSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create request for Sensor",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddSensorRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/cluster": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Cluster sensor (INTERNAL)",
        "description": "",
        "operationId": "clusterSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of the sensor to cluster",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor cluster request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ClusterSensorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Fetch sensor by ID (INTERNAL)",
        "description": "",
        "operationId": "getSensor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to fetch",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Update sensor by ID (INTERNAL)",
        "description": "",
        "operationId": "updateSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to update",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateSensorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "220": {
            "description": "No update performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Delete sensor by ID (INTERNAL)",
        "description": "",
        "operationId": "deleteSensor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/restore": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Restore sensor by ID (INTERNAL)",
        "description": "",
        "operationId": "restoreSensor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to restore",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor restoration request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestoreDeletedSensorRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/comments": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Fetch sensor comments by sensor ID (INTERNAL)",
        "description": "",
        "operationId": "getSensorComments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to fetch comments for",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Comment-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/search": {
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Search sensors (INTERNAL)",
        "description": "",
        "operationId": "searchSensors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorSearchCriteriaObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/acknowledge": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Acknowledge a sensor by its ID (INTERNAL)",
        "description": "",
        "operationId": "acknowledgeSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to acknowledge",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor acknowledgement request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorAcknowledgeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/acknowledge": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Acknowledge Sensors by their ID Any comment will be applied to ALL specified sensors. (INTERNAL)",
        "description": "",
        "operationId": "acknowledgeSensors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "query",
            "description": "ID of sensors to acknowledge",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor acknowledge bulk request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorAcknowledgeBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/removeacknowledgement": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Remove acknowledgement for a sensor by its ID.  (INTERNAL)",
        "description": "",
        "operationId": "removeAcknowledgementSensor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to remove acknowledgment",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor remove acknowledgement request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorRemoveAcknowledgementRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/removeacknowledgement": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Bulk remove acknowledgement for Sensors by their IDs. Any comment will be applied to ALL specified sensors. (INTERNAL)",
        "description": "",
        "operationId": "removeAcknowledgementSensors",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "query",
            "description": "ID of sensors to remove acknowledgement",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi",
            "maxItems": 2147483647,
            "minItems": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor remove acknowledgement bulk request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorRemoveAcknowlegementBulkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sensor-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/interface": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Gets a Sensor's interfaces (INTERNAL)",
        "description": "",
        "operationId": "listSensorInterfaces",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of the sensor to which the interface belongs",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Interface-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Sensor not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Adds an interface to a sensor (INTERNAL)",
        "description": "",
        "operationId": "createSensorInterface",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor to which we want to add the interface",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Add request for sensor interface",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddSensorInterfaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Interface-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/interface/{interface}": {
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Update Interface by ID (INTERNAL)",
        "description": "",
        "operationId": "updateInterface",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of the Sensor to which the Interface belongs",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "interface",
            "in": "path",
            "description": "ID of the Interface we want to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Interface update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateSensorInterfaceRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Interface-single"
            }
          },
          "220": {
            "description": "No update performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Deletes one of a Sensor's interfaces by its ID or name (INTERNAL)",
        "description": "",
        "operationId": "deleteInterface",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of the sensor to which the interface belongs",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "interface",
            "in": "path",
            "description": "ID of the interface",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Interface-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Sensor, Interface, or Location not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/interface/{interfaceNameOrID}": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Gets one of a Sensor's interfaces (INTERNAL)",
        "description": "",
        "operationId": "getInterface",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of the sensor to which the interface belongs",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "interfaceNameOrID",
            "in": "path",
            "description": "ID or name of the Interface",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Interface-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Sensor or Interface not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/{sensorID}/status": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Gets status for a sensor (INTERNAL)",
        "description": "",
        "operationId": "getSensorStatusBySensor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sensorID",
            "in": "path",
            "description": "ID of sensor whose status we want to fetch",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SensorStatus-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          }
        }
      }
    },
    "/sensors/v1/status/search": {
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Search sensor status (INTERNAL)",
        "description": "",
        "operationId": "searchSensorStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorStatusSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SensorStatus-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/status/{id}": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Fetch sensor status by ID (INTERNAL)",
        "description": "",
        "operationId": "getSensorStatusByStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of sensor to fetch status for",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "deprecated": true,
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SensorStatus-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/status": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "List sensor status (INTERNAL)",
        "description": "",
        "operationId": "listSensorStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customerID",
            "in": "query",
            "description": "Limit search to these customer IDs",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "applicationName",
            "in": "query",
            "description": "Limit search to these applications by name",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "Limit search by sensor hostname or IP address",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit results",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset results",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SensorStatus-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/sensor/bulk/status": {
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Submit sensor status records in a bulk operation (DEV)",
        "description": "",
        "operationId": "submitSensorStatusBulk",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Sensor status bulk submission request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorStatusBulkSubmissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SensorStatusBulkSubmissionResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/sensors/v1/type": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Get all sensor types (INTERNAL)",
        "description": "",
        "operationId": "getSensorTypes",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Application-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Create a new sensor type (INTERNAL)",
        "description": "",
        "operationId": "addSensorType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Sensor type add request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorTypeAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Application-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sensors/v1/type/{idOrShortName}": {
      "get": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Get sensor type by ID or short name (INTERNAL)",
        "description": "",
        "operationId": "getSensorType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "Sensor type ID or short name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Application-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Update a sensor type (INTERNAL)",
        "description": "",
        "operationId": "updateSensorType",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "Sensor type ID or short name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Sensor type update request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SensorTypeUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Application-single"
            }
          },
          "220": {
            "description": "No update performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sensors/v1"
        ],
        "summary": "Delete a sensor type and update existing Sensors of that type to a new sensor type (INTERNAL)",
        "description": "",
        "operationId": "deleteSensorType",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "idOrShortName",
            "in": "path",
            "description": "Sensor type ID or short name",
            "required": true,
            "type": "string"
          },
          {
            "name": "newType",
            "in": "query",
            "description": "Sensor type delete request",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Application-single"
            }
          },
          "220": {
            "description": "No update performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    }
  },
  "definitions": {
    "SensorAcknowledgeBulkRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request. NB: Each sensor specified in the request will receive the same comment. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "ResultStash-SensorStatus-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/SensorStatus"
          }
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "AddLocationRequest": {
      "type": "object",
      "required": [
        "customerID",
        "name",
        "shortName",
        "timeZoneDescription"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of some physical location => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Short name of some physical location => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "networkZone": {
          "type": "string",
          "position": 0,
          "description": "Network zone for some physical location",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "customerID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "CustomerID for some physical location",
          "minimum": 0
        },
        "timeZoneDescription": {
          "type": "string",
          "position": 0,
          "description": "TimeZone description for some physical location (default Europe/Oslo)"
        }
      }
    },
    "RestoreDeletedSensorRequest": {
      "type": "object",
      "properties": {
        "enable": {
          "type": "boolean",
          "position": 0,
          "description": "Whether to enable the sensor at the same time as restoring it. (default false)",
          "default": false
        }
      }
    },
    "EnableSensorBulkRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "sensorIDs": {
          "type": "array",
          "position": 0,
          "description": "List of SensorIDs",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "SensorStatus": {
      "type": "object",
      "properties": {
        "lastEventTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp for the last event registered by the sensor."
        },
        "lastUpdateTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Latest timestamp when the sensor status was updated."
        },
        "lastAnalyzedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Latest timestamp when the analyzer encountered an event for the sensor."
        },
        "messageRate": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Count per second of events throughput for the sensor (since last report)."
        },
        "lastAgentHost": {
          "type": "string",
          "position": 0,
          "description": "Host name/Container name of reporting sensor."
        },
        "sensor": {
          "position": 0,
          "description": "The Sensor which triggered this Status.",
          "$ref": "#/definitions/Sensor"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "SENSOR_IS_REPORTING",
              "CLUSTER_IS_REPORTING",
              "CLOCK_OUT_OF_SYNC"
            ]
          }
        }
      }
    },
    "ResultStash-Comment-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Comment"
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "UpdateLocationRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of some physical location => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Short name of some physical location => Sanitize by regex (?!^\\d+$)^[a-z0-9\\-]+"
        },
        "networkZone": {
          "type": "string",
          "position": 0,
          "description": "Network zone for some physical location",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "timeZoneIdOrName": {
          "type": "string",
          "position": 0,
          "description": "TimeZone description or ID for some physical location"
        }
      }
    },
    "AddSensorCommentRequest": {
      "type": "object",
      "required": [
        "comment"
      ],
      "properties": {
        "comment": {
          "type": "string"
        }
      }
    },
    "DisableMonitoringBulkRequest": {
      "type": "object",
      "required": [
        "sensorIDs"
      ],
      "properties": {
        "sensorIDs": {
          "type": "array",
          "position": 0,
          "description": "List of sensorIDs for which to update monitoring",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "SensorTypeAddRequest": {
      "type": "object",
      "required": [
        "name",
        "shortName"
      ],
      "properties": {
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Short name of sensor type, needs to be unique => [a-zA-Z0-9_\\-\\.]*"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of sensor type => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "url": {
          "type": "string",
          "position": 0,
          "description": "URL of sensor type => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)"
        },
        "expectedSensorUpdateTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Expected maximum update time duration in millis of sensor which belong to the type (default 0)",
          "minimum": 0,
          "default": 0
        },
        "department": {
          "type": "string",
          "position": 0,
          "description": "Department that the sensor type belongs to (default none)",
          "enum": [
            "none",
            "nsa",
            "ti",
            "log",
            "infrastructure"
          ]
        },
        "monitorCollectionOnly": {
          "type": "boolean",
          "position": 0,
          "description": "Flag to determine whether sensors of this type are monitored by analysis or only by collection (default false)",
          "default": false
        },
        "reportingSeverity": {
          "type": "string",
          "position": 0,
          "description": "Flag to determine escalation workflow for Sensors of this type (default medium)",
          "enum": [
            "internal",
            "low",
            "medium",
            "high",
            "critical"
          ]
        }
      }
    },
    "SensorStatusBulkSubmissionRequest": {
      "type": "object",
      "required": [
        "records"
      ],
      "properties": {
        "records": {
          "type": "array",
          "position": 0,
          "description": "Sensor status records for submission",
          "items": {
            "$ref": "#/definitions/SensorStatusRecord"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "ignoreOnFailed": {
          "type": "boolean",
          "position": 0,
          "description": "If set to true submitted records with errors will be discarded and all remaining records will be processed. If set to false errors will fail the whole request. (default false)",
          "default": false
        }
      }
    },
    "TimeZone": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      }
    },
    "UpdateSensorRequest": {
      "type": "object",
      "properties": {
        "sslTerminating": {
          "type": "boolean"
        },
        "location": {
          "type": "string",
          "position": 0,
          "description": "ID or shortname of the Sensor's location"
        },
        "clusterSensorID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Deprecated. Please use the dedicated clustering endpoint(s) instead.",
          "minimum": 0
        },
        "information": {
          "type": "string",
          "position": 0,
          "description": "Sensor information"
        },
        "hostname": {
          "type": "string",
          "position": 0,
          "description": "Sensor hostname => Sanitize by regex ([\\p{Alnum}\\._-]+)"
        },
        "ipAddress": {
          "type": "string",
          "position": 0,
          "description": "Sensor's IP address, one of hostname or ipAddress must be assigned => format:ip"
        },
        "additionalData": {
          "type": "string",
          "position": 0,
          "description": "Additional identifier"
        },
        "application": {
          "type": "string",
          "position": 0,
          "description": "ID or shortname of Sensor type"
        },
        "expectedUpdateTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Expected updated time, only set if overrideDefaultUpdateTime is true",
          "minimum": 1
        },
        "initialTuning": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor's initial tuning status (default null)",
          "default": false
        },
        "overrideDefaultUpdateTime": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor's override default update time flag (default null)",
          "default": false
        },
        "sharedCustomerData": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor's shared customer data flag (default null)",
          "default": false
        },
        "reportingSeverity": {
          "type": "string",
          "position": 0,
          "description": "If specified overwrite the ReportingSeverity level for this Sensor's Application",
          "enum": [
            "internal",
            "low",
            "medium",
            "high",
            "critical"
          ]
        }
      }
    },
    "AddSensorInterfaceRequest": {
      "type": "object",
      "required": [
        "interfaceName",
        "location"
      ],
      "properties": {
        "interfaceName": {
          "type": "string",
          "position": 0,
          "description": "Name of the sensor interface => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "location": {
          "type": "string",
          "position": 0,
          "description": "Location ID or short name of the sensor interface."
        },
        "active": {
          "type": "boolean",
          "position": 0,
          "description": "Status of the sensor interface (default false)",
          "default": false
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer id or shortname of the interface (default null)"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Comment describing why the Interface was added"
        },
        "sslTerminating": {
          "type": "boolean",
          "position": 0,
          "description": "Interface's SSL terminating flag (default false)",
          "default": false
        }
      }
    },
    "SensorRemoveAcknowledgementRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "DisableSensorBulkRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "sensorIDs": {
          "type": "array",
          "position": 0,
          "description": "List of SensorIDs",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "ResultStash-Location-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        }
      }
    },
    "Application": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "expectedSensorUpdateTime": {
          "type": "integer",
          "format": "int64"
        },
        "department": {
          "type": "string",
          "enum": [
            "none",
            "nsa",
            "ti",
            "log",
            "infrastructure"
          ]
        },
        "reportingSeverity": {
          "type": "string",
          "enum": [
            "internal",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "DELETED",
              "MONITOR_COLLECTION_ONLY"
            ]
          }
        }
      }
    },
    "SensorTypeUpdateRequest": {
      "type": "object",
      "properties": {
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Update short name of sensor type, needs to be unique => [a-zA-Z0-9_\\-\\.]*"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Update name of sensor type => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "url": {
          "type": "string",
          "position": 0,
          "description": "Update url of sensor type => ((https?|ftp|gopher|telnet|file):((/)|(\\\\))+[\\w\\d:\\#@%/;$()~_?\\\\+-=\\\\\\.&]*)"
        },
        "expectedSensorUpdateTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Update expected sensor update time for the sensor type",
          "minimum": 0
        },
        "department": {
          "type": "string",
          "position": 0,
          "description": "Update department of sensor type",
          "enum": [
            "none",
            "nsa",
            "ti",
            "log",
            "infrastructure"
          ]
        },
        "monitorCollectionOnly": {
          "type": "boolean",
          "position": 0,
          "description": "Flag to determine whether sensors of this type are monitored by analysis or only by collection"
        },
        "reportingSeverity": {
          "type": "string",
          "position": 0,
          "description": "Flag to determine escalation workflow for Sensors of this type",
          "enum": [
            "internal",
            "low",
            "medium",
            "high",
            "critical"
          ]
        }
      }
    },
    "Sensor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "application": {
          "$ref": "#/definitions/Application"
        },
        "clusterSensor": {
          "$ref": "#/definitions/SensorInfo"
        },
        "expectedUpdateTime": {
          "type": "integer",
          "format": "int64"
        },
        "scheduledDowntimeFromTime": {
          "type": "integer",
          "format": "int64"
        },
        "scheduledDowntimeUntilTime": {
          "type": "integer",
          "format": "int64"
        },
        "information": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "additionalData": {
          "type": "string"
        },
        "lastUpdatedByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastAcknowledgedTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "createdByUser": {
          "$ref": "#/definitions/UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "interfaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Interface"
          }
        },
        "reportingSeverity": {
          "type": "string",
          "enum": [
            "internal",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "inScheduledDowntime": {
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/LocationInfo"
        },
        "ipaddress": {
          "readOnly": true,
          "$ref": "#/definitions/IPAddress"
        },
        "customer": {
          "position": 0,
          "description": "The Customer to which the Sensor belongs.",
          "$ref": "#/definitions/CustomerInfo"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "SIEM",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SSL_TERMINATING"
            ]
          }
        }
      }
    },
    "UpdateSensorInterfaceRequest": {
      "type": "object",
      "properties": {
        "sslTerminating": {
          "type": "boolean"
        },
        "newInterfaceName": {
          "type": "string",
          "position": 0,
          "description": "New name of the sensor interface. Must be unique per sensor. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "location": {
          "type": "string",
          "position": 0,
          "description": "New Location ID or short name of the sensor interface."
        },
        "active": {
          "type": "boolean",
          "position": 0,
          "description": "New Status of the sensor interface"
        }
      }
    },
    "ClusterSensorRequest": {
      "type": "object",
      "required": [
        "clusterSensorID"
      ],
      "properties": {
        "clusterSensorID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Sensor with which we want to cluster",
          "minimum": 1
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SensorSearchCriteriaObject": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Limit results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Offset results"
        },
        "includeDeleted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Also include deleted objects (where implemented)"
        },
        "customerID": {
          "type": "array",
          "xml": {
            "name": "Customers",
            "wrapped": true
          },
          "position": 0,
          "description": "Limit result to objects belonging to these customers",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "CustomerID"
            }
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors matching these hostnames or IP-addresses",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors belonging to customers identified by their ID or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects from this timestamp"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects until this timestamp"
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "Order results by these properties (prefix with - to sort descending)",
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Search objects with these flags set",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SSL_TERMINATING"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects with these flags set",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SSL_TERMINATING"
            ]
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Search for specific sensors by ID",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "locationName": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors bound to any of these locations",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "applicationName": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors by application type",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResultStash-Application-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Application"
        }
      }
    },
    "SensorStatusRecordErrorInformation": {
      "type": "object",
      "properties": {
        "submissionIndex": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Index of the submission as it appears in the submission request."
        },
        "errorMessages": {
          "type": "array",
          "position": 0,
          "description": "String message of error cause.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SensorRemoveAcknowlegementBulkRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request. NB: Each sensor specified in the request will receive the same comment. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "SensorStatusSearchCriteria": {
      "type": "object",
      "properties": {
        "excludeReportingSensors": {
          "type": "boolean"
        },
        "excludeSensorsInScheduledDowntime": {
          "type": "boolean"
        },
        "excludeSensorsInReportingCluster": {
          "type": "boolean"
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Limit results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Offset results"
        },
        "includeDeleted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Also include deleted objects (where implemented)"
        },
        "customerID": {
          "type": "array",
          "xml": {
            "name": "Customers",
            "wrapped": true
          },
          "position": 0,
          "description": "Limit result to objects belonging to these customers",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "CustomerID"
            }
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors matching these hostnames or IP-addresses",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors belonging to customers identified by their ID or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "lastAgentHost": {
          "type": "string",
          "position": 0,
          "description": "Include sensors where lastAgentHost matches this string (entire/partial)"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects from this timestamp"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects until this timestamp"
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "Order results by these properties (prefix with - to sort descending)",
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Search objects with these flags set",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SENSOR_IS_REPORTING",
              "CLUSTER_IS_REPORTING",
              "SSL_TERMINATING"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects with these flags set",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SENSOR_IS_REPORTING",
              "CLUSTER_IS_REPORTING",
              "SSL_TERMINATING"
            ]
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Search for specific sensors by ID",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "locationName": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors bound to any of these locations",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "applicationName": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors by application type",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SensorAcknowledgeRequest": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "ResultStash-Comment-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      }
    },
    "AddSensorRequest": {
      "type": "object",
      "required": [
        "application",
        "customer",
        "location"
      ],
      "properties": {
        "sslTerminating": {
          "type": "boolean"
        },
        "location": {
          "type": "string",
          "position": 0,
          "description": "Sensor location ID or short name"
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Sensor customer ID or short name"
        },
        "application": {
          "type": "string",
          "position": 0,
          "description": "Sensor type id or short name"
        },
        "clusterSensorID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Cluster sensor 0 if does not exist (default 0)",
          "minimum": 0,
          "default": 0
        },
        "expectedUpdateTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the Sensor is expected to be updated, 0 if not known/never (default 0)",
          "minimum": 0,
          "default": 0
        },
        "scheduledDowntimeFromTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Time from which the Sensor will be offline, 0 if not scheduled (default 0)",
          "minimum": 0,
          "default": 0
        },
        "scheduledDowntimeUntilTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Time until which the Sensor will be offline, 0 if not scheduled (default 0)",
          "minimum": 0,
          "default": 0
        },
        "information": {
          "type": "string",
          "position": 0,
          "description": "Sensor information"
        },
        "hostname": {
          "type": "string",
          "position": 0,
          "description": "Sensor hostname. One of hostname or IPaddress must be defined. => Sanitize by regex ([\\p{Alnum}\\._-]+)"
        },
        "ipAddress": {
          "type": "string",
          "position": 0,
          "description": "Sensor's IP address, one of hostname or ipAddress must be assigned => format:ip"
        },
        "additionalData": {
          "type": "string",
          "position": 0,
          "description": "Any additional data"
        },
        "active": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor active flag (default false)",
          "default": false
        },
        "monitored": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor monitored flag (default false)",
          "default": false
        },
        "monitoredOnlyDaytime": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor is monitored only daytime flag (default false)",
          "default": false
        },
        "initialTuning": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor's initial tuning status (default false)",
          "default": false
        },
        "overrideDefaultUpdateTime": {
          "type": "boolean",
          "position": 0,
          "description": "Override default update time (default false)",
          "default": false
        },
        "sharedCustomerData": {
          "type": "boolean",
          "position": 0,
          "description": "Sensor's shared customer data flag (default false)",
          "default": false
        },
        "reportingSeverity": {
          "type": "string",
          "position": 0,
          "description": "If specified overwrite the ReportingSeverity level for this Sensor's Application",
          "enum": [
            "internal",
            "low",
            "medium",
            "high",
            "critical"
          ]
        }
      }
    },
    "ResultStash-Location-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Location"
        }
      }
    },
    "SensorStatusBulkSubmissionResponse": {
      "type": "object",
      "properties": {
        "accepted": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Number of successfully submitted records."
        },
        "rejected": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Number of records that failed validation."
        },
        "errorInformationList": {
          "type": "array",
          "position": 0,
          "description": "Information regarding any records that were rejected during validation.",
          "items": {
            "$ref": "#/definitions/SensorStatusRecordErrorInformation"
          }
        }
      }
    },
    "ResultStash-SensorStatusBulkSubmissionResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SensorStatusBulkSubmissionResponse"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the comment was added."
        },
        "user": {
          "position": 0,
          "description": "Who added the comment.",
          "$ref": "#/definitions/UserInfo"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "The comment's text."
        }
      }
    },
    "ResultStash-Application-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Application"
          }
        }
      }
    },
    "SensorScheduleDowntimeRequest": {
      "type": "object",
      "properties": {
        "fromTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp in epoch ms from which the requested change takes effect",
          "minimum": 0
        },
        "toTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp in epoch ms until which the requested change takes effect",
          "minimum": 0
        },
        "keepDowntimeOnUpdate": {
          "type": "boolean",
          "position": 0,
          "description": "Flag to maintain existing Downtime configurations"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SensorScheduleDowntimeBulkRequest": {
      "type": "object",
      "properties": {
        "fromTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp in epoch ms from which the requested change takes effect",
          "minimum": 0
        },
        "toTime": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp in epoch ms until which the requested change takes effect",
          "minimum": 0
        },
        "keepDowntimeOnUpdate": {
          "type": "boolean",
          "position": 0,
          "description": "Flag to maintain existing Downtime configurations"
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "sensorIDs": {
          "type": "array",
          "position": 0,
          "description": "List of SensorIDs",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "maxItems": 2147483647,
          "minItems": 1
        }
      }
    },
    "EnableMonitoringBulkRequest": {
      "type": "object",
      "required": [
        "sensorIDs"
      ],
      "properties": {
        "sensorIDs": {
          "type": "array",
          "position": 0,
          "description": "List of sensorIDs for which to update monitoring",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "Any comments to append to the request => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "daytime": {
          "type": "boolean",
          "position": 0,
          "description": "Flag for enabling only daytime monitoring (default false)",
          "default": false
        }
      }
    },
    "SensorSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Limit results"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Offset results"
        },
        "includeDeleted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Also include deleted objects (where implemented)"
        },
        "customerID": {
          "type": "array",
          "xml": {
            "name": "Customers",
            "wrapped": true
          },
          "position": 0,
          "description": "Limit result to objects belonging to these customers",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "CustomerID"
            }
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors matching these hostnames or IP-addresses",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors belonging to customers identified by their ID or shortname",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects from this timestamp"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects until this timestamp"
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "Order results by these properties (prefix with - to sort descending)",
          "items": {
            "type": "string"
          }
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Search objects with these flags set",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SSL_TERMINATING"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects with these flags set",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "MONITORED",
              "DELETED",
              "OVERRIDE_UPDATE_TIME",
              "MONITORED_ONLY_DAYTIME",
              "SHARED_CUSTOMER_DATA",
              "ACKNOWLEDGED",
              "KEEP_DOWNTIME_ON_UPDATE",
              "CLOCK_OUT_OF_SYNC",
              "INITIAL_TUNING",
              "IN_SCHEDULED_DOWNTIME",
              "SSL_TERMINATING"
            ]
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Search for specific sensors by ID",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "locationName": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors bound to any of these locations",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "applicationName": {
          "type": "array",
          "position": 0,
          "description": "Search for sensors by application type",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResultStash-Sensor-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Sensor"
        }
      }
    },
    "ResultStash-SensorStatus-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SensorStatus"
        }
      }
    },
    "LocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "shortName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      }
    },
    "ResultStash-Interface-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Interface"
          }
        }
      }
    },
    "ResultStash-Sensor-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Sensor"
          }
        }
      }
    },
    "SensorInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "hostname": {
          "type": "string"
        },
        "application": {
          "$ref": "#/definitions/Application"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "ipaddress": {
          "readOnly": true,
          "$ref": "#/definitions/IPAddress"
        }
      }
    },
    "ResultStash-Interface-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Interface"
        }
      }
    },
    "IPAddress": {
      "type": "object",
      "properties": {
        "host": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "ipv6": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        },
        "multicast": {
          "type": "boolean"
        },
        "maskBits": {
          "type": "integer",
          "format": "int32"
        },
        "public": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "xml": {
            "attribute": true
          },
          "readOnly": true
        }
      }
    },
    "LocationSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Max number of results."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip the first (offset) objects. By default, return result from first object."
        },
        "includeDeleted": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to include deleted objects. By default, exclude deleted objects."
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Set additional criterias which are applied using a logical OR.",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/LocationSearchCriteria"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria object will be excluded."
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Only relevant for subcriteria. If set to true, objects matching this subcriteria are required (AND-ed together with parent criteria)."
        },
        "customerID": {
          "type": "array",
          "position": 0,
          "description": "Restrict search to data belonging to specified customers.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "searchString": {
          "type": "string",
          "position": 0,
          "description": "Used to search again Location names or shortnames"
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Only include objects which have includeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ZONE_DMZ",
              "ZONE_EXTERNAL",
              "ZONE_INTERNAL"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude objects which have excludeFlags set.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ZONE_DMZ",
              "ZONE_EXTERNAL",
              "ZONE_INTERNAL"
            ]
          }
        }
      }
    },
    "Interface": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "interfaceName": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        },
        "active": {
          "type": "boolean"
        },
        "sensor": {
          "readOnly": true,
          "$ref": "#/definitions/SensorInfo"
        },
        "location": {
          "readOnly": true,
          "$ref": "#/definitions/LocationInfo"
        },
        "flags": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Flags of the Interface"
        }
      }
    },
    "SensorStatusRecord": {
      "type": "object",
      "required": [
        "sensorCustomer",
        "sensorID"
      ],
      "properties": {
        "sensorID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Sensor which the status belongs to.",
          "minimum": 1
        },
        "sensorCustomer": {
          "type": "string",
          "position": 0,
          "description": "Customer of reporting sensor. Can be customer ID or shortName."
        },
        "lastAgentHost": {
          "type": "string",
          "position": 0,
          "description": "Host name/Container name of reporting sensor."
        },
        "lastEventTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Latest event timestamp encountered by agents for the sensor.",
          "minimum": 0
        },
        "lastUpdateTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Latest timestamp when the sensor status was updated.",
          "minimum": 0
        },
        "lastAnalyzedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Latest timestamp when the analyzer encountered an event for the sensor.",
          "minimum": 0
        },
        "messageRate": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Count per second of events throughput for the sensor (since last report).",
          "minimum": 0
        },
        "clockOutOfSync": {
          "type": "boolean",
          "position": 0,
          "description": "Determines whether the event timestamp was in future when registered for the sensor status. (default false)",
          "default": false
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "customerInfo": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "timeZone": {
          "$ref": "#/definitions/TimeZone"
        },
        "zone": {
          "type": "string",
          "enum": [
            "INTERNAL",
            "EXTERNAL",
            "DMZ",
            "UNKNOWN"
          ]
        },
        "external": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "globalCustomer": {
          "type": "boolean"
        },
        "dmz": {
          "type": "boolean"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ZONE_DMZ",
              "ZONE_EXTERNAL",
              "ZONE_INTERNAL"
            ]
          }
        }
      }
    }
  }
}