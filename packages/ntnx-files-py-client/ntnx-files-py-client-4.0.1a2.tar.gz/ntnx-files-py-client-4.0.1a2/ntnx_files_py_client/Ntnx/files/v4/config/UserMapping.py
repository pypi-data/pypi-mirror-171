# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.ExplicitIdentityMapping import ExplicitIdentityMapping  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.RuleBasedMapping import RuleBasedMapping  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class UserMapping(ExternalizableAbstractModel):
    """UserMapping - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'rule_based_mapping': 'files.v4.config.RuleBasedMapping',
        'explicit_mapping': 'files.v4.config.ExplicitIdentityMapping',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'rule_based_mapping': 'ruleBasedMapping',
        'explicit_mapping': 'explicitMapping',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, rule_based_mapping=None, explicit_mapping=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """UserMapping - a model defined in Swagger
            \nUser mapping model.
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__rule_based_mapping = None
        self.__explicit_mapping = None
        self.discriminator = None
        if rule_based_mapping is not None:
            self.__rule_based_mapping = rule_based_mapping
        if explicit_mapping is not None:
            self.__explicit_mapping = explicit_mapping

    def _initialize_object_type(self):
        return 'files.v4.config.UserMapping'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.UserMapping'


    @property
    def rule_based_mapping(self):
        """`{ files.v4.config.RuleBasedMapping }`
            
        """ # noqa: E501
        return self.__rule_based_mapping

    @rule_based_mapping.setter
    def rule_based_mapping(self, rule_based_mapping):

        self.__rule_based_mapping = rule_based_mapping

    @property
    def explicit_mapping(self):
        """`{ files.v4.config.ExplicitIdentityMapping }`
            
        """ # noqa: E501
        return self.__explicit_mapping

    @explicit_mapping.setter
    def explicit_mapping(self, explicit_mapping):

        self.__explicit_mapping = explicit_mapping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

