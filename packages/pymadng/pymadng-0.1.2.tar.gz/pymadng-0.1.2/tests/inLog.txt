
        sharedata, sharetable, readSharedMemory, openSharedMemory, close, writeToPipe = require ("madl_mmap").sharedata, require ("madl_mmap").sharetable, require ("madl_mmap").readSharedMemory, require ("madl_mmap").openSharedMemory, require ("madl_mmap").close, require ("madl_mmap").writeToPipe

        local openPipe in require("madl_mmap")
        openPipe("/home/joshua/Documents/MADpy/tests/pipe_gjh57s7")
        openSharedMemory("psm_5fdc11cd")
        local tostring = tostring
writeToPipe('pyCommand:self._import("MAD", "elements", "'.. tostring(MAD.elements) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "sequence", "'.. tostring(MAD.sequence) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "mtable", "'.. tostring(MAD.mtable) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "twiss", "'.. tostring(MAD.twiss) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "beta0", "'.. tostring(MAD.beta0) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "beam", "'.. tostring(MAD.beam) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "survey", "'.. tostring(MAD.survey) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "object", "'.. tostring(MAD.object) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "track", "'.. tostring(MAD.track) .. '", True)\n')
writeToPipe('pyCommand:self._import("MAD", "match", "'.. tostring(MAD.match) .. '", True)\n')

writeToPipe('finished\n')
elements = MAD.elements

writeToPipe('finished\n')
sequence = MAD.sequence

writeToPipe('finished\n')
mtable = MAD.mtable

writeToPipe('finished\n')
twiss = MAD.twiss

writeToPipe('finished\n')
beta0 = MAD.beta0

writeToPipe('finished\n')
beam = MAD.beam

writeToPipe('finished\n')
survey = MAD.survey

writeToPipe('finished\n')
object = MAD.object

writeToPipe('finished\n')
track = MAD.track

writeToPipe('finished\n')
match = MAD.match

writeToPipe('finished\n')
local tostring = tostring

                       function getModName(modname, mod)
                           writeToPipe('pyCommand:self._import("MAD.element", "'..tostring(modname)..'", "'..tostring(mod)..'", True)\n')

                       end
                       for modname, mod in pairs(MAD.element) do pcall(getModName, modname, mod); end writeToPipe("\n")
writeToPipe('finished\n')
drift_element = MAD.element.drift_element

writeToPipe('finished\n')
hmonitor = MAD.element.hmonitor

writeToPipe('finished\n')
thin_element = MAD.element.thin_element

writeToPipe('finished\n')
monitor = MAD.element.monitor

writeToPipe('finished\n')
crabcavity = MAD.element.crabcavity

writeToPipe('finished\n')
rfmultipole = MAD.element.rfmultipole

writeToPipe('finished\n')
nllens = MAD.element.nllens

writeToPipe('finished\n')
beambeam = MAD.element.beambeam

writeToPipe('finished\n')
multipole = MAD.element.multipole

writeToPipe('finished\n')
genmap = MAD.element.genmap

writeToPipe('finished\n')
flags = MAD.element.flags

writeToPipe('finished\n')
rfcavity = MAD.element.rfcavity

writeToPipe('finished\n')
element = MAD.element.element

writeToPipe('finished\n')
elseparator = MAD.element.elseparator

writeToPipe('finished\n')
wiggler = MAD.element.wiggler

writeToPipe('finished\n')
tkicker = MAD.element.tkicker

writeToPipe('finished\n')
solenoid = MAD.element.solenoid

writeToPipe('finished\n')
dodecapole = MAD.element.dodecapole

writeToPipe('finished\n')
decapole = MAD.element.decapole

writeToPipe('finished\n')
octupole = MAD.element.octupole

writeToPipe('finished\n')
changedir = MAD.element.changedir

writeToPipe('finished\n')
changeref = MAD.element.changeref

writeToPipe('finished\n')
sextupole = MAD.element.sextupole

writeToPipe('finished\n')
yrotation = MAD.element.yrotation

writeToPipe('finished\n')
xrotation = MAD.element.xrotation

writeToPipe('finished\n')
vkicker = MAD.element.vkicker

writeToPipe('finished\n')
quadrupole = MAD.element.quadrupole

writeToPipe('finished\n')
hkicker = MAD.element.hkicker

writeToPipe('finished\n')
rbend = MAD.element.rbend

writeToPipe('finished\n')
sbend = MAD.element.sbend

writeToPipe('finished\n')
placeholder = MAD.element.placeholder

writeToPipe('finished\n')
instrument = MAD.element.instrument

writeToPipe('finished\n')
bline = MAD.element.bline

writeToPipe('finished\n')
drift = MAD.element.drift

writeToPipe('finished\n')
collimator = MAD.element.collimator

writeToPipe('finished\n')
slink = MAD.element.slink

writeToPipe('finished\n')
sequence = MAD.element.sequence

writeToPipe('finished\n')
marker = MAD.element.marker

writeToPipe('finished\n')
assembly = MAD.element.assembly

writeToPipe('finished\n')
vmonitor = MAD.element.vmonitor

writeToPipe('finished\n')
specl_element = MAD.element.specl_element

writeToPipe('finished\n')
changenrj = MAD.element.changenrj

writeToPipe('finished\n')
extrn_element = MAD.element.extrn_element

writeToPipe('finished\n')
translate = MAD.element.translate

writeToPipe('finished\n')
patch_element = MAD.element.patch_element

writeToPipe('finished\n')
srotation = MAD.element.srotation

writeToPipe('finished\n')
thick_element = MAD.element.thick_element

writeToPipe('finished\n')
kicker = MAD.element.kicker

writeToPipe('finished\n')

            MADX:load("/home/joshua/Documents/MAD-NGFork/MAD/examples/ex-fodo-madx/fodo.seq", "/home/joshua/Documents/MAD-NGFork/MAD/examples/ex-fodo-madx/fodo.mad")
            seq = MADX.seq
            
writeToPipe('finished\n')

    beam1 = beam 'beam1' {   } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")

writeToPipe('finished\n')
seq.beam = beam1

writeToPipe('finished\n')

    mtbl = twiss 'mtbl' { sequence = seq, method = 4, chrom = true,   } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")

writeToPipe('finished\n')

        local offset = sharedata({mtbl.s, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')

        local offset = sharedata({mtbl.beta11, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')

        local offset = sharedata({mtbl.header, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')

        local offset = sharetable({mtbl.header, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')

            local deferred in MAD.typeid
            v = deferred {f := lcell/math.sin(math.pi/4)/4, k := 1/v.f}
            
writeToPipe('finished\n')

    qf = multipole 'qf' {  knl := {0,  v.k} } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')

    qd = multipole 'qd' {  knl := {0, -v.k} } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')

    seq2 = sequence 'seq2' { refer = 'entry', l = 60,  qf {at = nil, }, qd {at = 10.0, }, qf {at = 20, }, qd {at = 30.0, }, qf {at = 40, }, qd {at = 50.0, } } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')

    beam1 = beam 'beam1' {   } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')
seq2.beam = beam1

writeToPipe('finished\n')

    mtbl2 = twiss 'mtbl2' { sequence = seq2, method = 4, chrom = true, nslice = 10, implicit = true, save = 'atbody',   } 
                
writeToPipe('finished\n')
local readIMatrix, readMatrix, readCMatrix, readScalar in require ("madl_mmap")
circum = readScalar({1, 1, })
lcell = readScalar({1, 1, })

writeToPipe('finished\n')

        local offset = sharedata({mtbl2.s, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')

        local offset = sharedata({mtbl2.beta11, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')

        local offset = sharedata({mtbl2.header, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')

        local offset = sharetable({mtbl2.header, })                  --This mmaps to shared memory
            
writeToPipe('finished\n')
