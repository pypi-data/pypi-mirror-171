# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.BlockedClients import BlockedClients  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.MountTargetState import MountTargetState  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.MountTargetType import MountTargetType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.MountTargetWorkloadType import MountTargetWorkloadType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.MultiProtocol import MultiProtocol  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.NfsProtocol import NfsProtocol  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.ProtocolTypeMountTarget import ProtocolTypeMountTarget  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.SmbProtocol import SmbProtocol  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.StatusType import StatusType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.WormSpec import WormSpec  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class MountTarget(ExternalizableAbstractModel):
    """MountTarget - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'file_server_ext_id': 'str',
        'max_size_gib': 'int',
        'type': 'files.v4.config.MountTargetType',
        'path': 'str',
        'parent_mount_target_ext_id': 'str',
        'enable_compression': 'bool',
        'is_enable_compression': 'bool',
        'file_blocking_extensions': 'list[str]',
        'protocol': 'files.v4.config.ProtocolTypeMountTarget',
        'secondary_protocol': 'list[files.v4.config.ProtocolTypeMountTarget]',
        'enable_previous_version': 'bool',
        'is_enable_previous_version': 'bool',
        'smb_properties': 'files.v4.config.SmbProtocol',
        'nfs_properties': 'files.v4.config.NfsProtocol',
        'multi_protocol_properties': 'files.v4.config.MultiProtocol',
        'blocked_clients': 'files.v4.config.BlockedClients',
        'status_type': 'files.v4.config.StatusType',
        'state': 'files.v4.config.MountTargetState',
        'longname_enabled': 'bool',
        'is_longname_enabled': 'bool',
        'worm_spec': 'files.v4.config.WormSpec',
        'workload_type': 'files.v4.config.MountTargetWorkloadType',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'file_server_ext_id': 'fileServerExtId',
        'max_size_gib': 'maxSizeGib',
        'type': 'type',
        'path': 'path',
        'parent_mount_target_ext_id': 'parentMountTargetExtId',
        'enable_compression': 'enableCompression',
        'is_enable_compression': 'isEnableCompression',
        'file_blocking_extensions': 'fileBlockingExtensions',
        'protocol': 'protocol',
        'secondary_protocol': 'secondaryProtocol',
        'enable_previous_version': 'enablePreviousVersion',
        'is_enable_previous_version': 'isEnablePreviousVersion',
        'smb_properties': 'smbProperties',
        'nfs_properties': 'nfsProperties',
        'multi_protocol_properties': 'multiProtocolProperties',
        'blocked_clients': 'blockedClients',
        'status_type': 'statusType',
        'state': 'state',
        'longname_enabled': 'longnameEnabled',
        'is_longname_enabled': 'isLongnameEnabled',
        'worm_spec': 'wormSpec',
        'workload_type': 'workloadType',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, description=None, file_server_ext_id=None, max_size_gib=None, type=None, path=None, parent_mount_target_ext_id=None, enable_compression=None, is_enable_compression=None, file_blocking_extensions=None, protocol=None, secondary_protocol=None, enable_previous_version=False, is_enable_previous_version=False, smb_properties=None, nfs_properties=None, multi_protocol_properties=None, blocked_clients=None, status_type=None, state=None, longname_enabled=False, is_longname_enabled=False, worm_spec=None, workload_type=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """MountTarget - a model defined in Swagger
            \nMount target object.
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__description = None
        self.__file_server_ext_id = None
        self.__max_size_gib = None
        self.__type = None
        self.__path = None
        self.__parent_mount_target_ext_id = None
        self.__enable_compression = None
        self.__is_enable_compression = None
        self.__file_blocking_extensions = None
        self.__protocol = None
        self.__secondary_protocol = None
        self.__enable_previous_version = None
        self.__is_enable_previous_version = None
        self.__smb_properties = None
        self.__nfs_properties = None
        self.__multi_protocol_properties = None
        self.__blocked_clients = None
        self.__status_type = None
        self.__state = None
        self.__longname_enabled = None
        self.__is_longname_enabled = None
        self.__worm_spec = None
        self.__workload_type = None
        self.discriminator = None
        self.__name = name
        if description is not None:
            self.__description = description
        if file_server_ext_id is not None:
            self.__file_server_ext_id = file_server_ext_id
        if max_size_gib is not None:
            self.__max_size_gib = max_size_gib
        self.__type = type
        if path is not None:
            self.__path = path
        if parent_mount_target_ext_id is not None:
            self.__parent_mount_target_ext_id = parent_mount_target_ext_id
        if enable_compression is not None:
            self.__enable_compression = enable_compression
        if is_enable_compression is not None:
            self.__is_enable_compression = is_enable_compression
        if file_blocking_extensions is not None:
            self.__file_blocking_extensions = file_blocking_extensions
        self.__protocol = protocol
        if secondary_protocol is not None:
            self.__secondary_protocol = secondary_protocol
        if enable_previous_version is not None:
            self.__enable_previous_version = enable_previous_version
        if is_enable_previous_version is not None:
            self.__is_enable_previous_version = is_enable_previous_version
        if smb_properties is not None:
            self.__smb_properties = smb_properties
        if nfs_properties is not None:
            self.__nfs_properties = nfs_properties
        if multi_protocol_properties is not None:
            self.__multi_protocol_properties = multi_protocol_properties
        if blocked_clients is not None:
            self.__blocked_clients = blocked_clients
        if status_type is not None:
            self.__status_type = status_type
        if state is not None:
            self.__state = state
        if longname_enabled is not None:
            self.__longname_enabled = longname_enabled
        if is_longname_enabled is not None:
            self.__is_longname_enabled = is_longname_enabled
        if worm_spec is not None:
            self.__worm_spec = worm_spec
        if workload_type is not None:
            self.__workload_type = workload_type

    def _initialize_object_type(self):
        return 'files.v4.config.MountTarget'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.MountTarget'


    @property
    def name(self):
        """`{ str }`
            \nMount target name.
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 80:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `80`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """`{ str }`
            \nMount target description.
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")  # noqa: E501

        self.__description = description

    @property
    def file_server_ext_id(self):
        """`{ str }`
            \nThe {extId} of the file server. This is a read-only field.
        """ # noqa: E501
        return self.__file_server_ext_id

    @file_server_ext_id.setter
    def file_server_ext_id(self, file_server_ext_id):
        if file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__file_server_ext_id = file_server_ext_id

    @property
    def max_size_gib(self):
        """`{ int }`
            \nMaximum size of mount target in GiB.
        """ # noqa: E501
        return self.__max_size_gib

    @max_size_gib.setter
    def max_size_gib(self, max_size_gib):
        if max_size_gib is not None and max_size_gib < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_size_gib`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__max_size_gib = max_size_gib

    @property
    def type(self):
        """`{ files.v4.config.MountTargetType }`
            
        """ # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self.__type = type

    @property
    def path(self):
        """`{ str }`
            \nPath of the nested mount target.
        """ # noqa: E501
        return self.__path

    @path.setter
    def path(self, path):

        self.__path = path

    @property
    def parent_mount_target_ext_id(self):
        """`{ str }`
            \n{extId} of the parent mount target. This is a read-only field.
        """ # noqa: E501
        return self.__parent_mount_target_ext_id

    @parent_mount_target_ext_id.setter
    def parent_mount_target_ext_id(self, parent_mount_target_ext_id):
        if parent_mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', parent_mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `parent_mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__parent_mount_target_ext_id = parent_mount_target_ext_id

    @property
    def enable_compression(self):
        """`{ bool }`
            \nFlag to enable compression. This field will be deprecated.
        """ # noqa: E501
        return self.__enable_compression

    @enable_compression.setter
    def enable_compression(self, enable_compression):

        self.__enable_compression = enable_compression

    @property
    def is_enable_compression(self):
        """`{ bool }`
            \nFlag to enable compression.
        """ # noqa: E501
        return self.__is_enable_compression

    @is_enable_compression.setter
    def is_enable_compression(self, is_enable_compression):

        self.__is_enable_compression = is_enable_compression

    @property
    def file_blocking_extensions(self):
        """`{ list[str] }`
            \nComma-separated list of file blocking extensions.
        """ # noqa: E501
        return self.__file_blocking_extensions

    @file_blocking_extensions.setter
    def file_blocking_extensions(self, file_blocking_extensions):

        self.__file_blocking_extensions = file_blocking_extensions

    @property
    def protocol(self):
        """`{ files.v4.config.ProtocolTypeMountTarget }`
            
        """ # noqa: E501
        return self.__protocol

    @protocol.setter
    def protocol(self, protocol):
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self.__protocol = protocol

    @property
    def secondary_protocol(self):
        """`{ list[files.v4.config.ProtocolTypeMountTarget] }`
            \nList of secondary protocol type for the mount target. The acceptable values are \"SMB\", \"NFS\", \"NONE\", \"INCOMPATIBLE\".
        """ # noqa: E501
        return self.__secondary_protocol

    @secondary_protocol.setter
    def secondary_protocol(self, secondary_protocol):

        self.__secondary_protocol = secondary_protocol

    @property
    def enable_previous_version(self):
        """`{ bool }`
            \nFlag to enable windows previous version. This field will be deprecated.
        """ # noqa: E501
        return self.__enable_previous_version

    @enable_previous_version.setter
    def enable_previous_version(self, enable_previous_version):

        self.__enable_previous_version = enable_previous_version

    @property
    def is_enable_previous_version(self):
        """`{ bool }`
            \nFlag to enable windows previous version.
        """ # noqa: E501
        return self.__is_enable_previous_version

    @is_enable_previous_version.setter
    def is_enable_previous_version(self, is_enable_previous_version):

        self.__is_enable_previous_version = is_enable_previous_version

    @property
    def smb_properties(self):
        """`{ files.v4.config.SmbProtocol }`
            
        """ # noqa: E501
        return self.__smb_properties

    @smb_properties.setter
    def smb_properties(self, smb_properties):

        self.__smb_properties = smb_properties

    @property
    def nfs_properties(self):
        """`{ files.v4.config.NfsProtocol }`
            
        """ # noqa: E501
        return self.__nfs_properties

    @nfs_properties.setter
    def nfs_properties(self, nfs_properties):

        self.__nfs_properties = nfs_properties

    @property
    def multi_protocol_properties(self):
        """`{ files.v4.config.MultiProtocol }`
            
        """ # noqa: E501
        return self.__multi_protocol_properties

    @multi_protocol_properties.setter
    def multi_protocol_properties(self, multi_protocol_properties):

        self.__multi_protocol_properties = multi_protocol_properties

    @property
    def blocked_clients(self):
        """`{ files.v4.config.BlockedClients }`
            
        """ # noqa: E501
        return self.__blocked_clients

    @blocked_clients.setter
    def blocked_clients(self, blocked_clients):

        self.__blocked_clients = blocked_clients

    @property
    def status_type(self):
        """`{ files.v4.config.StatusType }`
            
        """ # noqa: E501
        return self.__status_type

    @status_type.setter
    def status_type(self, status_type):

        self.__status_type = status_type

    @property
    def state(self):
        """`{ files.v4.config.MountTargetState }`
            
        """ # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):

        self.__state = state

    @property
    def longname_enabled(self):
        """`{ bool }`
            \nEnable long name support. This field will be deprecated.
        """ # noqa: E501
        return self.__longname_enabled

    @longname_enabled.setter
    def longname_enabled(self, longname_enabled):

        self.__longname_enabled = longname_enabled

    @property
    def is_longname_enabled(self):
        """`{ bool }`
            \nEnable long name support.
        """ # noqa: E501
        return self.__is_longname_enabled

    @is_longname_enabled.setter
    def is_longname_enabled(self, is_longname_enabled):

        self.__is_longname_enabled = is_longname_enabled

    @property
    def worm_spec(self):
        """`{ files.v4.config.WormSpec }`
            
        """ # noqa: E501
        return self.__worm_spec

    @worm_spec.setter
    def worm_spec(self, worm_spec):

        self.__worm_spec = worm_spec

    @property
    def workload_type(self):
        """`{ files.v4.config.MountTargetWorkloadType }`
            
        """ # noqa: E501
        return self.__workload_type

    @workload_type.setter
    def workload_type(self, workload_type):

        self.__workload_type = workload_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

