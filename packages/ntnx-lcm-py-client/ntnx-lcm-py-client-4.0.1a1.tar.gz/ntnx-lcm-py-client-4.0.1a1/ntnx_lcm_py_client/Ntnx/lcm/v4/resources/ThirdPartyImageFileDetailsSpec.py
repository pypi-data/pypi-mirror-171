# coding: utf-8


"""
IGNORE:
    Nutanix Lcm Versioned APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class ThirdPartyImageFileDetailsSpec(object):
    """ThirdPartyImageFileDetailsSpec - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'checksum_type': 'str',
        'checksum': 'str',
        'size': 'int',
        'name': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'checksum_type': 'checksumType',
        'checksum': 'checksum',
        'size': 'size',
        'name': 'name',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, checksum_type=None, checksum=None, size=None, name=None, *args, **kwargs):  # noqa: E501
        """ThirdPartyImageFileDetailsSpec - a model defined in Swagger
            \nFile detail for a third party image
        """
        self.__checksum_type = None
        self.__checksum = None
        self.__size = None
        self.__name = None
        self.discriminator = None
        if checksum_type is not None:
            self.__checksum_type = checksum_type
        if checksum is not None:
            self.__checksum = checksum
        if size is not None:
            self.__size = size
        if name is not None:
            self.__name = name
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lcm.v4.resources.ThirdPartyImageFileDetailsSpec'

    def _initialize_fq_object_type(self):
        return 'lcm.v4.r0.a1.resources.ThirdPartyImageFileDetailsSpec'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def checksum_type(self):
        """`{ str }`
            \nChecksum type for a third party image
        """ # noqa: E501
        return self.__checksum_type

    @checksum_type.setter
    def checksum_type(self, checksum_type):
        allowed_values = ["shasum"]  # noqa: E501
        if checksum_type not in allowed_values:
            raise ValueError(
                "Invalid value for `checksum_type` ({0}), must be one of {1}"  # noqa: E501
                .format(checksum_type, allowed_values)
            )

        self.__checksum_type = checksum_type

    @property
    def checksum(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__checksum

    @checksum.setter
    def checksum(self, checksum):

        self.__checksum = checksum

    @property
    def size(self):
        """`{ int }`
            \nFile size for a third party image
        """ # noqa: E501
        return self.__size

    @size.setter
    def size(self, size):

        self.__size = size

    @property
    def name(self):
        """`{ str }`
            \nFile name for a third party image
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThirdPartyImageFileDetailsSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThirdPartyImageFileDetailsSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

