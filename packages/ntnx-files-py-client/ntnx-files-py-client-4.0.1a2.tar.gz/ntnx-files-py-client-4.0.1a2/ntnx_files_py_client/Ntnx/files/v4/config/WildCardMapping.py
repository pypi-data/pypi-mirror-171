# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.config.IdentityMappingType import IdentityMappingType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.NfsIdentitiesMapping import NfsIdentitiesMapping  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.OneToOneMapping import OneToOneMapping  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.SmbIdentitiesMapping import SmbIdentitiesMapping  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class WildCardMapping(OneToOneMapping):
    """WildCardMapping - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'priority': 'int',
        'identity_mapping_type': 'files.v4.config.IdentityMappingType',
        'smb_mapping': 'files.v4.config.SmbIdentitiesMapping',
        'nfs_mapping': 'files.v4.config.NfsIdentitiesMapping',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'priority': 'priority',
        'identity_mapping_type': 'identityMappingType',
        'smb_mapping': 'smbMapping',
        'nfs_mapping': 'nfsMapping',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, priority=None, identity_mapping_type=None, smb_mapping=None, nfs_mapping=None, *args, **kwargs):  # noqa: E501
        """WildCardMapping - a model defined in Swagger
            \nWild card mapping model.
        """
        OneToOneMapping.__init__(self, identity_mapping_type, smb_mapping, nfs_mapping, *args, **kwargs)
        self.__priority = None
        self.discriminator = None
        self.__priority = priority

    def _initialize_object_type(self):
        return 'files.v4.config.WildCardMapping'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.WildCardMapping'


    @property
    def priority(self):
        """`{ int }`
            \nIdentity mapping priority
        """ # noqa: E501
        return self.__priority

    @priority.setter
    def priority(self, priority):
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501
        if priority is not None and priority < 0:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WildCardMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WildCardMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

