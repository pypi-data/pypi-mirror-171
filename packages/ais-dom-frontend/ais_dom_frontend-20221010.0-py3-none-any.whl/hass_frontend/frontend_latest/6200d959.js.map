{"version":3,"file":"6200d959.js","mappings":";;;;;;;;AAIA;ACsHA;;AAGA;;AAEA;AACA;;AAGA;AACA;;;AAbA;;AAsBA;AAYA;AAYA;;AArHA;;;;AAyIA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;;AASA;AACA;;;;;AAKA;;;;;AAKA;;;;;;AAQA;AApMA;;AA4NA;;AAIA;;AAGA;AACA;AAEA;;AAGA;AACA;;;AAIA;;;AAGA;;;;;AAOA;;;AAKA;AACA;AACA;;;AAGA;;;;;;;;AAUA;;;AAGA;AACA;AACA;;;AAGA;;;;AApRA;;AAkSA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;;AAEA;AACA;AAGA;AACA;AACA;AACA;;;AAKA;AA0LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA3gBA;;;;;AC2DA;AACA;;AAEA;AACA;;AAGA;AACA;;AAEA;;AAEA;;AAGA;AACA;;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;;;AAIA;;AAEA;;AAOA;AACA;AACA;;;;AATA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA1GA","sources":["webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/components/ha-target-picker.ts","webpack://home-assistant-frontend/./src/panels/history/ha-panel-history.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiClose,\n  mdiDevices,\n  mdiPlus,\n  mdiSofa,\n  mdiUnfoldMoreVertical,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  HassEntity,\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { ensureArray } from \"../common/ensure-array\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../data/entity_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./device/ha-device-picker\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./entity/ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./entity/ha-entity-picker\";\nimport \"./ha-area-picker\";\nimport \"./ha-icon-button\";\nimport \"./ha-input-helper-text\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-target-picker\")\nexport class HaTargetPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public value?: HassServiceTarget;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  /**\n   * Show only targets with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show only targets with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityRegFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public horizontal = false;\n\n  @state() private _areas?: { [areaId: string]: AreaRegistryEntry };\n\n  @state() private _devices?: {\n    [deviceId: string]: DeviceRegistryEntry;\n  };\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _addMode?: \"area_id\" | \"entity_id\" | \"device_id\";\n\n  @query(\"#input\") private _inputElement?;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        const areaLookup: { [areaId: string]: AreaRegistryEntry } = {};\n        for (const area of areas) {\n          areaLookup[area.area_id] = area;\n        }\n        this._areas = areaLookup;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of devices) {\n          deviceLookup[device.id] = device;\n        }\n        this._devices = deviceLookup;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  protected render() {\n    if (!this._areas || !this._devices || !this._entities) {\n      return html``;\n    }\n    return html`\n      ${this.horizontal\n        ? html`\n            <div class=\"horizontal-container\">\n              ${this._renderChips()} ${this._renderPicker()}\n            </div>\n            ${this._renderItems()}\n          `\n        : html`\n            <div>\n              ${this._renderItems()} ${this._renderPicker()}\n              ${this._renderChips()}\n            </div>\n          `}\n    `;\n  }\n\n  private _renderItems() {\n    return html`\n      <div class=\"mdc-chip-set items\">\n        ${this.value?.area_id\n          ? ensureArray(this.value.area_id).map((area_id) => {\n              const area = this._areas![area_id];\n              return this._renderChip(\n                \"area_id\",\n                area_id,\n                area?.name || area_id,\n                undefined,\n                mdiSofa\n              );\n            })\n          : \"\"}\n        ${this.value?.device_id\n          ? ensureArray(this.value.device_id).map((device_id) => {\n              const device = this._devices![device_id];\n              return this._renderChip(\n                \"device_id\",\n                device_id,\n                device ? computeDeviceName(device, this.hass) : device_id,\n                undefined,\n                mdiDevices\n              );\n            })\n          : \"\"}\n        ${this.value?.entity_id\n          ? ensureArray(this.value.entity_id).map((entity_id) => {\n              const entity = this.hass.states[entity_id];\n              return this._renderChip(\n                \"entity_id\",\n                entity_id,\n                entity ? computeStateName(entity) : entity_id,\n                entity\n              );\n            })\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _renderChips() {\n    return html`\n      <div class=\"mdc-chip-set\">\n        <div\n          class=\"mdc-chip area_id add\"\n          .type=${\"area_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_area_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip device_id add\"\n          .type=${\"device_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_device_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n        <div\n          class=\"mdc-chip entity_id add\"\n          .type=${\"entity_id\"}\n          @click=${this._showPicker}\n        >\n          <div class=\"mdc-chip__ripple\"></div>\n          <ha-svg-icon\n            class=\"mdc-chip__icon mdc-chip__icon--leading\"\n            .path=${mdiPlus}\n          ></ha-svg-icon>\n          <span role=\"gridcell\">\n            <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n              <span class=\"mdc-chip__text\"\n                >${this.hass.localize(\n                  \"ui.components.target-picker.add_entity_id\"\n                )}</span\n              >\n            </span>\n          </span>\n        </div>\n      </div>\n      ${this.helper\n        ? html`<ha-input-helper-text>${this.helper}</ha-input-helper-text>`\n        : \"\"}\n    `;\n  }\n\n  private async _showPicker(ev) {\n    this._addMode = ev.currentTarget.type;\n    await this.updateComplete;\n    setTimeout(() => {\n      this._inputElement?.open();\n      this._inputElement?.focus();\n    }, 0);\n  }\n\n  private _renderChip(\n    type: \"area_id\" | \"device_id\" | \"entity_id\",\n    id: string,\n    name: string,\n    entityState?: HassEntity,\n    iconPath?: string\n  ) {\n    return html`\n      <div\n        class=\"mdc-chip ${classMap({\n          [type]: true,\n        })}\"\n      >\n        ${iconPath\n          ? html`<ha-svg-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .path=${iconPath}\n            ></ha-svg-icon>`\n          : \"\"}\n        ${entityState\n          ? html`<ha-state-icon\n              class=\"mdc-chip__icon mdc-chip__icon--leading\"\n              .state=${entityState}\n            ></ha-state-icon>`\n          : \"\"}\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\">${name}</span>\n          </span>\n        </span>\n        ${type === \"entity_id\"\n          ? \"\"\n          : html` <span role=\"gridcell\">\n              <ha-icon-button\n                class=\"expand-btn mdc-chip__icon mdc-chip__icon--trailing\"\n                tabindex=\"-1\"\n                role=\"button\"\n                .label=${this.hass.localize(\n                  \"ui.components.target-picker.expand\"\n                )}\n                .path=${mdiUnfoldMoreVertical}\n                hideTooltip\n                .id=${id}\n                .type=${type}\n                @click=${this._handleExpand}\n              ></ha-icon-button>\n              <paper-tooltip class=\"expand\" animation-delay=\"0\"\n                >${this.hass.localize(\n                  `ui.components.target-picker.expand_${type}`\n                )}</paper-tooltip\n              >\n            </span>`}\n        <span role=\"gridcell\">\n          <ha-icon-button\n            class=\"mdc-chip__icon mdc-chip__icon--trailing\"\n            tabindex=\"-1\"\n            role=\"button\"\n            .label=${this.hass.localize(\"ui.components.target-picker.remove\")}\n            .path=${mdiClose}\n            hideTooltip\n            .id=${id}\n            .type=${type}\n            @click=${this._handleRemove}\n          ></ha-icon-button>\n          <paper-tooltip animation-delay=\"0\"\n            >${this.hass.localize(\n              `ui.components.target-picker.remove_${type}`\n            )}</paper-tooltip\n          >\n        </span>\n      </div>\n    `;\n  }\n\n  private _renderPicker() {\n    switch (this._addMode) {\n      case \"area_id\":\n        return html`\n          <ha-area-picker\n            .hass=${this.hass}\n            id=\"input\"\n            .type=${\"area_id\"}\n            .label=${this.hass.localize(\n              \"ui.components.target-picker.add_area_id\"\n            )}\n            no-add\n            .deviceFilter=${this.deviceFilter}\n            .entityFilter=${this.entityRegFilter}\n            .includeDeviceClasses=${this.includeDeviceClasses}\n            .includeDomains=${this.includeDomains}\n            @value-changed=${this._targetPicked}\n          ></ha-area-picker>\n        `;\n      case \"device_id\":\n        return html`\n          <ha-device-picker\n            .hass=${this.hass}\n            id=\"input\"\n            .type=${\"device_id\"}\n            .label=${this.hass.localize(\n              \"ui.components.target-picker.add_device_id\"\n            )}\n            .deviceFilter=${this.deviceFilter}\n            .entityFilter=${this.entityRegFilter}\n            .includeDeviceClasses=${this.includeDeviceClasses}\n            .includeDomains=${this.includeDomains}\n            @value-changed=${this._targetPicked}\n          ></ha-device-picker>\n        `;\n      case \"entity_id\":\n        return html`\n          <ha-entity-picker\n            .hass=${this.hass}\n            id=\"input\"\n            .type=${\"entity_id\"}\n            .label=${this.hass.localize(\n              \"ui.components.target-picker.add_entity_id\"\n            )}\n            .entityFilter=${this.entityFilter}\n            .includeDeviceClasses=${this.includeDeviceClasses}\n            .includeDomains=${this.includeDomains}\n            @value-changed=${this._targetPicked}\n            allow-custom-entity\n          ></ha-entity-picker>\n        `;\n    }\n    return html``;\n  }\n\n  private _targetPicked(ev) {\n    ev.stopPropagation();\n    if (!ev.detail.value) {\n      return;\n    }\n    const value = ev.detail.value;\n    const target = ev.currentTarget;\n    target.value = \"\";\n    this._addMode = undefined;\n    fireEvent(this, \"value-changed\", {\n      value: this.value\n        ? {\n            ...this.value,\n            [target.type]: this.value[target.type]\n              ? [...ensureArray(this.value[target.type]), value]\n              : value,\n          }\n        : { [target.type]: value },\n    });\n  }\n\n  private _handleExpand(ev) {\n    const target = ev.currentTarget as any;\n    const newDevices: string[] = [];\n    const newEntities: string[] = [];\n    if (target.type === \"area_id\") {\n      Object.values(this._devices!).forEach((device) => {\n        if (\n          device.area_id === target.id &&\n          !this.value!.device_id?.includes(device.id) &&\n          this._deviceMeetsFilter(device)\n        ) {\n          newDevices.push(device.id);\n        }\n      });\n      this._entities!.forEach((entity) => {\n        if (\n          entity.area_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else if (target.type === \"device_id\") {\n      this._entities!.forEach((entity) => {\n        if (\n          entity.device_id === target.id &&\n          !this.value!.entity_id?.includes(entity.entity_id) &&\n          this._entityRegMeetsFilter(entity)\n        ) {\n          newEntities.push(entity.entity_id);\n        }\n      });\n    } else {\n      return;\n    }\n    let value = this.value;\n    if (newEntities.length) {\n      value = this._addItems(value, \"entity_id\", newEntities);\n    }\n    if (newDevices.length) {\n      value = this._addItems(value, \"device_id\", newDevices);\n    }\n    value = this._removeItem(value, target.type, target.id);\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  private _handleRemove(ev) {\n    const target = ev.currentTarget as any;\n    fireEvent(this, \"value-changed\", {\n      value: this._removeItem(this.value, target.type, target.id),\n    });\n  }\n\n  private _addItems(\n    value: this[\"value\"],\n    type: string,\n    ids: string[]\n  ): this[\"value\"] {\n    return {\n      ...value,\n      [type]: value![type] ? ensureArray(value![type])!.concat(ids) : ids,\n    };\n  }\n\n  private _removeItem(\n    value: this[\"value\"],\n    type: string,\n    id: string\n  ): this[\"value\"] {\n    const newVal = ensureArray(value![type])!.filter(\n      (val) => String(val) !== id\n    );\n    if (newVal.length) {\n      return {\n        ...value,\n        [type]: newVal,\n      };\n    }\n    const val = { ...value }!;\n    delete val[type];\n    if (Object.keys(val).length) {\n      return val;\n    }\n    return undefined;\n  }\n\n  private _deviceMeetsFilter(device: DeviceRegistryEntry): boolean {\n    const devEntities = this._entities?.filter(\n      (entity) => entity.device_id === device.id\n    );\n    if (this.includeDomains) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) =>\n          this.includeDomains!.includes(computeDomain(entity.entity_id))\n        )\n      ) {\n        return false;\n      }\n    }\n\n    if (this.includeDeviceClasses) {\n      if (!devEntities || !devEntities.length) {\n        return false;\n      }\n      if (\n        !devEntities.some((entity) => {\n          const stateObj = this.hass.states[entity.entity_id];\n          if (!stateObj) {\n            return false;\n          }\n          return (\n            stateObj.attributes.device_class &&\n            this.includeDeviceClasses!.includes(\n              stateObj.attributes.device_class\n            )\n          );\n        })\n      ) {\n        return false;\n      }\n    }\n\n    if (this.deviceFilter) {\n      return this.deviceFilter(device);\n    }\n    return true;\n  }\n\n  private _entityRegMeetsFilter(entity: EntityRegistryEntry): boolean {\n    if (entity.entity_category) {\n      return false;\n    }\n    if (\n      this.includeDomains &&\n      !this.includeDomains.includes(computeDomain(entity.entity_id))\n    ) {\n      return false;\n    }\n    if (this.includeDeviceClasses) {\n      const stateObj = this.hass.states[entity.entity_id];\n      if (!stateObj) {\n        return false;\n      }\n      if (\n        !stateObj.attributes.device_class ||\n        !this.includeDeviceClasses!.includes(stateObj.attributes.device_class)\n      ) {\n        return false;\n      }\n    }\n    if (this.entityRegFilter) {\n      return this.entityRegFilter(entity);\n    }\n    return true;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .horizontal-container {\n        display: flex;\n        flex-wrap: wrap;\n        min-height: 56px;\n        align-items: center;\n      }\n      .mdc-chip {\n        color: var(--primary-text-color);\n      }\n      .items {\n        z-index: 2;\n      }\n      .mdc-chip-set {\n        padding: 4px 0;\n      }\n      .mdc-chip.add {\n        color: rgba(0, 0, 0, 0.87);\n      }\n      .mdc-chip:not(.add) {\n        cursor: default;\n      }\n      .mdc-chip ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        display: flex;\n        align-items: center;\n        outline: none;\n      }\n      .mdc-chip ha-icon-button ha-svg-icon {\n        border-radius: 50%;\n        background: var(--secondary-text-color);\n      }\n      .mdc-chip__icon.mdc-chip__icon--trailing {\n        width: 16px;\n        height: 16px;\n        --mdc-icon-size: 14px;\n        color: var(--secondary-text-color);\n        margin-inline-start: 4px !important;\n        margin-inline-end: -4px !important;\n        direction: var(--direction);\n      }\n      .mdc-chip__icon--leading {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        --mdc-icon-size: 20px;\n        border-radius: 50%;\n        padding: 6px;\n        margin-left: -14px !important;\n        margin-inline-start: -14px !important;\n        margin-inline-end: 4px !important;\n        direction: var(--direction);\n      }\n      .expand-btn {\n        margin-right: 0;\n      }\n      .mdc-chip.area_id:not(.add) {\n        border: 2px solid #fed6a4;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.area_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.area_id.add {\n        background: #fed6a4;\n      }\n      .mdc-chip.device_id:not(.add) {\n        border: 2px solid #a8e1fb;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.device_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.device_id.add {\n        background: #a8e1fb;\n      }\n      .mdc-chip.entity_id:not(.add) {\n        border: 2px solid #d2e7b9;\n        background: var(--card-background-color);\n      }\n      .mdc-chip.entity_id:not(.add) .mdc-chip__icon--leading,\n      .mdc-chip.entity_id.add {\n        background: #d2e7b9;\n      }\n      .mdc-chip:hover {\n        z-index: 5;\n      }\n      paper-tooltip.expand {\n        min-width: 200px;\n      }\n      :host([disabled]) .mdc-chip {\n        opacity: var(--light-disabled-opacity);\n        pointer-events: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-target-picker\": HaTargetPicker;\n  }\n}\n","import { mdiFilterRemove, mdiRefresh } from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport {\n  addDays,\n  endOfToday,\n  endOfWeek,\n  endOfYesterday,\n  startOfToday,\n  startOfWeek,\n  startOfYesterday,\n} from \"date-fns/esm\";\nimport {\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket/dist/types\";\nimport { css, html, LitElement, PropertyValues } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { LocalStorage } from \"../../common/decorators/local-storage\";\nimport { ensureArray } from \"../../common/ensure-array\";\nimport { navigate } from \"../../common/navigate\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n} from \"../../common/url/search-params\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../../components/chart/state-history-charts\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-date-range-picker\";\nimport type { DateRangePickerRanges } from \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-target-picker\";\nimport {\n  AreaDeviceLookup,\n  AreaEntityLookup,\n  getAreaDeviceLookup,\n  getAreaEntityLookup,\n} from \"../../data/area_registry\";\nimport {\n  DeviceEntityLookup,\n  getDeviceEntityLookup,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport { subscribeEntityRegistry } from \"../../data/entity_registry\";\nimport { computeHistory, fetchDateWS } from \"../../data/history\";\nimport \"../../layouts/ha-app-layout\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\nclass HaPanelHistory extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) hass!: HomeAssistant;\n\n  @property({ reflect: true, type: Boolean }) narrow!: boolean;\n\n  @property({ reflect: true, type: Boolean }) rtl = false;\n\n  @state() private _startDate: Date;\n\n  @state() private _endDate: Date;\n\n  @LocalStorage(\"historyPickedValue\", true, false)\n  private _targetPickerValue?: HassServiceTarget;\n\n  @state() private _isLoading = false;\n\n  @state() private _stateHistory?;\n\n  @state() private _ranges?: DateRangePickerRanges;\n\n  @state() private _deviceEntityLookup?: DeviceEntityLookup;\n\n  @state() private _areaEntityLookup?: AreaEntityLookup;\n\n  @state() private _areaDeviceLookup?: AreaDeviceLookup;\n\n  public constructor() {\n    super();\n\n    const start = new Date();\n    start.setHours(start.getHours() - 2, 0, 0, 0);\n    this._startDate = start;\n\n    const end = new Date();\n    end.setHours(end.getHours() + 1, 0, 0, 0);\n    this._endDate = end;\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._deviceEntityLookup = getDeviceEntityLookup(entities);\n        this._areaEntityLookup = getAreaEntityLookup(entities);\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._areaDeviceLookup = getAreaDeviceLookup(devices);\n      }),\n    ];\n  }\n\n  protected render() {\n    return html`\n      <ha-app-layout>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.history\")}</div>\n            ${this._targetPickerValue\n              ? html`\n                  <ha-icon-button\n                    @click=${this._removeAll}\n                    .disabled=${this._isLoading}\n                    .path=${mdiFilterRemove}\n                    .label=${this.hass.localize(\"ui.panel.history.remove_all\")}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n            <ha-icon-button\n              @click=${this._getHistory}\n              .disabled=${this._isLoading || !this._targetPickerValue}\n              .path=${mdiRefresh}\n              .label=${this.hass.localize(\"ui.common.refresh\")}\n            ></ha-icon-button>\n          </app-toolbar>\n        </app-header>\n\n        <div class=\"flex content\">\n          <div class=\"filters flex layout horizontal narrow-wrap\">\n            <ha-date-range-picker\n              .hass=${this.hass}\n              ?disabled=${this._isLoading}\n              .startDate=${this._startDate}\n              .endDate=${this._endDate}\n              .ranges=${this._ranges}\n              @change=${this._dateRangeChanged}\n            ></ha-date-range-picker>\n            <ha-target-picker\n              .hass=${this.hass}\n              .value=${this._targetPickerValue}\n              .disabled=${this._isLoading}\n              horizontal\n              @value-changed=${this._targetsChanged}\n            ></ha-target-picker>\n          </div>\n          ${this._isLoading\n            ? html`<div class=\"progress-wrapper\">\n                <ha-circular-progress\n                  active\n                  alt=${this.hass.localize(\"ui.common.loading\")}\n                ></ha-circular-progress>\n              </div>`\n            : !this._targetPickerValue\n            ? html`<div class=\"start-search\">\n                ${this.hass.localize(\"ui.panel.history.start_search\")}\n              </div>`\n            : html`\n                <state-history-charts\n                  .hass=${this.hass}\n                  .historyData=${this._stateHistory}\n                  .endTime=${this._endDate}\n                  no-single\n                >\n                </state-history-charts>\n              `}\n        </div>\n      </ha-app-layout>\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (this.hasUpdated) {\n      return;\n    }\n\n    const today = new Date();\n    const weekStart = startOfWeek(today);\n    const weekEnd = endOfWeek(today);\n\n    this._ranges = {\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.today\")]: [\n        startOfToday(),\n        endOfToday(),\n      ],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.yesterday\")]:\n        [startOfYesterday(), endOfYesterday()],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.this_week\")]:\n        [weekStart, weekEnd],\n      [this.hass.localize(\"ui.components.date-range-picker.ranges.last_week\")]:\n        [addDays(weekStart, -7), addDays(weekEnd, -7)],\n    };\n\n    const searchParams = extractSearchParamsObject();\n    const entityIds = searchParams.entity_id;\n    const deviceIds = searchParams.device_id;\n    const areaIds = searchParams.area_id;\n    if (entityIds || deviceIds || areaIds) {\n      this._targetPickerValue = {};\n    }\n    if (entityIds) {\n      const splitIds = entityIds.split(\",\");\n      this._targetPickerValue!.entity_id = splitIds;\n    }\n    if (deviceIds) {\n      const splitIds = deviceIds.split(\",\");\n      this._targetPickerValue!.device_id = splitIds;\n    }\n    if (areaIds) {\n      const splitIds = areaIds.split(\",\");\n      this._targetPickerValue!.area_id = splitIds;\n    }\n\n    const startDate = searchParams.start_date;\n    if (startDate) {\n      this._startDate = new Date(startDate);\n    }\n    const endDate = searchParams.end_date;\n    if (endDate) {\n      this._endDate = new Date(endDate);\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      this._targetPickerValue &&\n      (changedProps.has(\"_startDate\") ||\n        changedProps.has(\"_endDate\") ||\n        changedProps.has(\"_targetPickerValue\") ||\n        (!this._stateHistory &&\n          (changedProps.has(\"_deviceEntityLookup\") ||\n            changedProps.has(\"_areaEntityLookup\") ||\n            changedProps.has(\"_areaDeviceLookup\"))))\n    ) {\n      this._getHistory();\n    }\n\n    if (!changedProps.has(\"hass\") && !changedProps.has(\"_entities\")) {\n      return;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.language !== this.hass.language) {\n      this.rtl = computeRTL(this.hass);\n    }\n  }\n\n  private _removeAll() {\n    this._targetPickerValue = undefined;\n    this._updatePath();\n  }\n\n  private async _getHistory() {\n    if (!this._targetPickerValue) {\n      return;\n    }\n    this._isLoading = true;\n    const entityIds = this._getEntityIds();\n\n    if (entityIds === undefined) {\n      this._isLoading = false;\n      this._stateHistory = undefined;\n      return;\n    }\n\n    if (entityIds.length === 0) {\n      this._isLoading = false;\n      this._stateHistory = [];\n      return;\n    }\n    try {\n      const dateHistory = await fetchDateWS(\n        this.hass,\n        this._startDate,\n        this._endDate,\n        entityIds\n      );\n\n      this._stateHistory = computeHistory(\n        this.hass,\n        dateHistory,\n        this.hass.localize\n      );\n    } finally {\n      this._isLoading = false;\n    }\n  }\n\n  private _getEntityIds(): string[] | undefined {\n    if (\n      !this._targetPickerValue ||\n      this._deviceEntityLookup === undefined ||\n      this._areaEntityLookup === undefined ||\n      this._areaDeviceLookup === undefined\n    ) {\n      return undefined;\n    }\n\n    const entityIds = new Set<string>();\n    let {\n      area_id: searchingAreaId,\n      device_id: searchingDeviceId,\n      entity_id: searchingEntityId,\n    } = this._targetPickerValue;\n\n    if (searchingAreaId) {\n      searchingAreaId = ensureArray(searchingAreaId);\n      for (const singleSearchingAreaId of searchingAreaId) {\n        const foundEntities = this._areaEntityLookup[singleSearchingAreaId];\n        if (foundEntities?.length) {\n          for (const foundEntity of foundEntities) {\n            if (foundEntity.entity_category === null) {\n              entityIds.add(foundEntity.entity_id);\n            }\n          }\n        }\n\n        const foundDevices = this._areaDeviceLookup[singleSearchingAreaId];\n        if (!foundDevices?.length) {\n          continue;\n        }\n\n        for (const foundDevice of foundDevices) {\n          const foundDeviceEntities = this._deviceEntityLookup[foundDevice.id];\n          if (!foundDeviceEntities?.length) {\n            continue;\n          }\n\n          for (const foundDeviceEntity of foundDeviceEntities) {\n            if (\n              (!foundDeviceEntity.area_id ||\n                foundDeviceEntity.area_id === singleSearchingAreaId) &&\n              foundDeviceEntity.entity_category === null\n            ) {\n              entityIds.add(foundDeviceEntity.entity_id);\n            }\n          }\n        }\n      }\n    }\n\n    if (searchingDeviceId) {\n      searchingDeviceId = ensureArray(searchingDeviceId);\n      for (const singleSearchingDeviceId of searchingDeviceId) {\n        const foundEntities = this._deviceEntityLookup[singleSearchingDeviceId];\n        if (!foundEntities?.length) {\n          continue;\n        }\n\n        for (const foundEntity of foundEntities) {\n          if (foundEntity.entity_category === null) {\n            entityIds.add(foundEntity.entity_id);\n          }\n        }\n      }\n    }\n\n    if (searchingEntityId) {\n      searchingEntityId = ensureArray(searchingEntityId);\n      for (const singleSearchingEntityId of searchingEntityId) {\n        entityIds.add(singleSearchingEntityId);\n      }\n    }\n\n    return [...entityIds];\n  }\n\n  private _dateRangeChanged(ev) {\n    this._startDate = ev.detail.startDate;\n    const endDate = ev.detail.endDate;\n    if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n    }\n    this._endDate = endDate;\n\n    this._updatePath();\n  }\n\n  private _targetsChanged(ev) {\n    this._targetPickerValue = ev.detail.value;\n    this._updatePath();\n  }\n\n  private _updatePath() {\n    const params: Record<string, string> = {};\n\n    if (this._targetPickerValue) {\n      if (this._targetPickerValue.entity_id) {\n        params.entity_id = ensureArray(this._targetPickerValue.entity_id).join(\n          \",\"\n        );\n      }\n      if (this._targetPickerValue.area_id) {\n        params.area_id = ensureArray(this._targetPickerValue.area_id).join(\",\");\n      }\n      if (this._targetPickerValue.device_id) {\n        params.device_id = ensureArray(this._targetPickerValue.device_id).join(\n          \",\"\n        );\n      }\n    }\n\n    if (this._startDate) {\n      params.start_date = this._startDate.toISOString();\n    }\n\n    if (this._endDate) {\n      params.end_date = this._endDate.toISOString();\n    }\n\n    navigate(`/history?${createSearchParam(params)}`, { replace: true });\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 0 16px 16px;\n        }\n\n        state-history-charts {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) state-history-charts {\n          height: calc(100vh - 198px);\n        }\n\n        .progress-wrapper {\n          height: calc(100vh - 136px);\n        }\n\n        :host([narrow]) .progress-wrapper {\n          height: calc(100vh - 198px);\n        }\n\n        :host([virtualize]) {\n          height: 100%;\n        }\n\n        :host([narrow]) .narrow-wrap {\n          flex-wrap: wrap;\n        }\n\n        .horizontal {\n          align-items: center;\n        }\n\n        :host(:not([narrow])) .selector-padding {\n          padding-left: 32px;\n        }\n\n        .progress-wrapper {\n          position: relative;\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-start;\n          padding: 8px 16px 0;\n        }\n\n        :host([narrow]) .filters {\n          flex-wrap: wrap;\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          max-width: 100%;\n          direction: var(--direction);\n        }\n\n        :host([narrow]) ha-date-range-picker {\n          margin-right: 0;\n          margin-inline-end: 0;\n          margin-inline-start: initial;\n          direction: var(--direction);\n        }\n\n        ha-circular-progress {\n          position: absolute;\n          left: 50%;\n          top: 50%;\n          transform: translate(-50%, -50%);\n        }\n\n        ha-entity-picker {\n          display: inline-block;\n          flex-grow: 1;\n          max-width: 400px;\n        }\n\n        :host([narrow]) ha-entity-picker {\n          max-width: none;\n          width: 100%;\n        }\n\n        .start-search {\n          padding-top: 16px;\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-panel-history\", HaPanelHistory);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-history\": HaPanelHistory;\n  }\n}\n"],"names":[],"sourceRoot":""}