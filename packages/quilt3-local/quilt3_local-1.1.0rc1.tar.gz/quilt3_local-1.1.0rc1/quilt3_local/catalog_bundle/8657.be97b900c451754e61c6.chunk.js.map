{"version":3,"file":"8657.be97b900c451754e61c6.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/embed/Dir.js","webpack://quilt-navigator/./app/embed/getCrumbs.js"],"sourcesContent":["import { basename } from 'path'\n\nimport dedent from 'dedent'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport * as M from '@material-ui/core'\n\nimport { copyWithoutSpaces, render as renderCrumbs } from 'components/BreadCrumbs'\nimport * as AWS from 'utils/AWS'\nimport AsyncResult from 'utils/AsyncResult'\nimport * as Config from 'utils/Config'\nimport { useData } from 'utils/Data'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport parseSearch from 'utils/parseSearch'\nimport * as s3paths from 'utils/s3paths'\n\nimport Code from 'containers/Bucket/Code'\nimport * as FileView from 'containers/Bucket/FileView'\nimport { Listing, PrefixFilter } from 'containers/Bucket/Listing'\nimport Summary from 'containers/Bucket/Summary'\nimport { displayError } from 'containers/Bucket/errors'\nimport * as requests from 'containers/Bucket/requests'\n\nimport * as EmbedConfig from './EmbedConfig'\nimport getCrumbs from './getCrumbs'\n\nconst formatListing = ({ urls, scope }, r) => {\n  const dirs = r.dirs.map((name) => ({\n    type: 'dir',\n    name: s3paths.ensureNoSlash(s3paths.withoutPrefix(r.path, name)),\n    to: urls.bucketDir(r.bucket, name),\n  }))\n  const files = r.files.map(({ key, size, modified, archived }) => ({\n    type: 'file',\n    name: basename(key),\n    to: urls.bucketFile(r.bucket, key),\n    size,\n    modified,\n    archived,\n  }))\n  const items = [...dirs, ...files]\n  if (r.path !== '' && r.path !== scope && !r.prefix) {\n    items.unshift({\n      type: 'dir',\n      name: '..',\n      to: urls.bucketDir(r.bucket, s3paths.up(r.path)),\n    })\n  }\n  // filter-out files with same name as one of dirs\n  return R.uniqBy(R.prop('name'), items)\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  crumbs: {\n    ...t.typography.body1,\n    maxWidth: '100%',\n    overflowWrap: 'break-word',\n  },\n}))\n\nexport default function Dir({\n  match: {\n    params: { bucket, path: encodedPath = '' },\n  },\n  location: l,\n}) {\n  const cfg = EmbedConfig.use()\n  const { noDownload } = Config.use()\n  const classes = useStyles()\n  const { urls } = NamedRoutes.use()\n  const history = useHistory()\n  const s3 = AWS.S3.use()\n  const { prefix } = parseSearch(l.search)\n  const path = s3paths.decode(encodedPath)\n  const dest = path ? basename(path) : bucket\n\n  const code = React.useMemo(\n    () => [\n      {\n        label: 'Python',\n        hl: 'python',\n        contents: dedent`\n          import quilt3 as q3\n          b = q3.Bucket(\"s3://${bucket}\")\n          # list files\n          b.ls(\"${path}\")\n          # download\n          b.fetch(\"${path}\", \"./${dest}\")\n        `,\n      },\n      {\n        label: 'CLI',\n        hl: 'bash',\n        contents: dedent`\n          # list files\n          aws s3 ls \"s3://${bucket}/${path}\"\n          # download\n          aws s3 cp --recursive \"s3://${bucket}/${path}\" \"./${dest}\"\n        `,\n      },\n    ],\n    [bucket, path, dest],\n  )\n\n  const [prev, setPrev] = React.useState(null)\n\n  React.useLayoutEffect(() => {\n    // reset accumulated results when path and/or prefix change\n    setPrev(null)\n  }, [path, prefix])\n\n  const data = useData(requests.bucketListing, {\n    s3,\n    bucket,\n    path,\n    prefix,\n    prev,\n  })\n\n  const loadMore = React.useCallback(() => {\n    AsyncResult.case(\n      {\n        Ok: (res) => {\n          // this triggers a re-render and fetching of next page of results\n          if (res.continuationToken) setPrev(res)\n        },\n        _: () => {},\n      },\n      data.result,\n    )\n  }, [data.result, setPrev])\n\n  const setPrefix = React.useCallback(\n    (newPrefix) => {\n      history.push(urls.bucketDir(bucket, path, newPrefix))\n    },\n    [history, urls, bucket, path],\n  )\n\n  return (\n    <M.Box pt={2} pb={4}>\n      <M.Box display=\"flex\" alignItems=\"flex-start\" mb={2}>\n        <div className={classes.crumbs} onCopy={copyWithoutSpaces}>\n          {renderCrumbs(getCrumbs({ bucket, path, urls, scope: cfg.scope }))}\n        </div>\n        <M.Box flexGrow={1} />\n        {!noDownload && (\n          <FileView.ZipDownloadForm\n            suffix={`dir/${bucket}/${path}`}\n            label=\"Download directory\"\n            newTab\n          />\n        )}\n      </M.Box>\n\n      {!cfg.hideCode && <Code gutterBottom>{code}</Code>}\n\n      {data.case({\n        Err: displayError(),\n        Init: () => null,\n        _: (x) => {\n          const res = AsyncResult.getPrevResult(x)\n\n          if (!res) return <M.CircularProgress />\n\n          const items = formatListing({ urls, scope: cfg.scope }, res)\n\n          const locked = !AsyncResult.Ok.is(x)\n\n          return (\n            <>\n              <Listing\n                items={items}\n                locked={locked}\n                loadMore={loadMore}\n                truncated={res.truncated}\n                prefixFilter={res.prefix}\n                toolbarContents={\n                  <PrefixFilter\n                    key={`${res.bucket}/${res.path}`}\n                    prefix={res.prefix}\n                    setPrefix={setPrefix}\n                  />\n                }\n              />\n              <Summary files={res.files} path={path} />\n            </>\n          )\n        },\n      })}\n    </M.Box>\n  )\n}\n","import { basename } from 'path'\n\nimport * as R from 'ramda'\nimport * as React from 'react'\n\nimport { Crumb } from 'components/BreadCrumbs'\nimport * as s3paths from 'utils/s3paths'\n\nexport default ({ bucket, path, urls, scope, excludeBase = false }) => {\n  const scoped = scope && path.startsWith(scope)\n  const scopedPath = scoped ? path.substring(scope.length) : path\n  const root = { label: scoped ? basename(scope) : 'ROOT', path: '' }\n  const start = excludeBase ? s3paths.up(scopedPath) : scopedPath\n  const items = [root, ...s3paths.getBreadCrumbs(start)].map(({ label, path: segPath }) =>\n    Crumb.Segment({\n      label,\n      to:\n        segPath === scopedPath\n          ? undefined\n          : urls.bucketDir(bucket, `${scoped ? scope : ''}${segPath}`),\n    }),\n  )\n  const interspersed = R.intersperse(Crumb.Sep(<>&nbsp;/ </>), items)\n  return excludeBase ? [...interspersed, Crumb.Sep(<>&nbsp;/</>)] : interspersed\n}\n"],"names":["useStyles","t","crumbs","typography","body1","maxWidth","overflowWrap","Dir","params","bucket","path","encodedPath","l","cfg","noDownload","classes","urls","history","s3","prefix","search","dest","basename","code","label","hl","contents","prev","setPrev","data","loadMore","Ok","res","continuationToken","_","result","setPrefix","newPrefix","push","bucketDir","pt","pb","display","alignItems","mb","className","onCopy","scope","flexGrow","suffix","newTab","hideCode","gutterBottom","case","Err","Init","x","items","r","dirs","map","name","type","to","files","key","size","modified","archived","bucketFile","unshift","formatListing","locked","truncated","prefixFilter","toolbarContents","excludeBase","scoped","startsWith","scopedPath","substring","length","root","start","segPath","undefined","interspersed"],"sourceRoot":""}