# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.config.IdentityActionType import IdentityActionType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.IdentityMappingType import IdentityMappingType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class SmbIdentitiesMapping(object):
    """SmbIdentitiesMapping - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'mapping_type': 'files.v4.config.IdentityMappingType',
        'action_type': 'files.v4.config.IdentityActionType',
        'user_id': 'int',
        'group_id': 'int',
        'name': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'mapping_type': 'mappingType',
        'action_type': 'actionType',
        'user_id': 'userId',
        'group_id': 'groupId',
        'name': 'name',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, mapping_type=None, action_type=None, user_id=None, group_id=None, name=None, *args, **kwargs):  # noqa: E501
        """SmbIdentitiesMapping - a model defined in Swagger
            \nSMB mapping details
        """
        self.__mapping_type = None
        self.__action_type = None
        self.__user_id = None
        self.__group_id = None
        self.__name = None
        self.discriminator = None
        if mapping_type is not None:
            self.__mapping_type = mapping_type
        if action_type is not None:
            self.__action_type = action_type
        if user_id is not None:
            self.__user_id = user_id
        if group_id is not None:
            self.__group_id = group_id
        if name is not None:
            self.__name = name
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.SmbIdentitiesMapping'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.SmbIdentitiesMapping'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def mapping_type(self):
        """`{ files.v4.config.IdentityMappingType }`
            
        """ # noqa: E501
        return self.__mapping_type

    @mapping_type.setter
    def mapping_type(self, mapping_type):

        self.__mapping_type = mapping_type

    @property
    def action_type(self):
        """`{ files.v4.config.IdentityActionType }`
            
        """ # noqa: E501
        return self.__action_type

    @action_type.setter
    def action_type(self, action_type):

        self.__action_type = action_type

    @property
    def user_id(self):
        """`{ int }`
            \nSMB user Id
        """ # noqa: E501
        return self.__user_id

    @user_id.setter
    def user_id(self, user_id):

        self.__user_id = user_id

    @property
    def group_id(self):
        """`{ int }`
            \nSMB group Id
        """ # noqa: E501
        return self.__group_id

    @group_id.setter
    def group_id(self, group_id):

        self.__group_id = group_id

    @property
    def name(self):
        """`{ str }`
            \nSMB user name
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is not None and len(name) > 30:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `30`")  # noqa: E501

        self.__name = name

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmbIdentitiesMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmbIdentitiesMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

