# coding: utf-8

"""
    VIER Cognitive Voice Dialog API

    CVG dialog history  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class Entry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "type",
            "timestamp",
        }
        
        @staticmethod
        def discriminator():
            return {
                'type': {
                    'Answer': Answer,
                    'Bridge': Bridge,
                    'Custom': Custom,
                    'End': End,
                    'Forward': Forward,
                    'Inactivity': Inactivity,
                    'Playback': Playback,
                    'Prompt': Prompt,
                    'RecordingStart': RecordingStart,
                    'RecordingStop': RecordingStop,
                    'Start': Start,
                    'Synthesis': Synthesis,
                    'Tone': Tone,
                    'Transcription': Transcription,
                }
            }
        
        class properties:
            timestamp = schemas.Int64Schema
        
            @staticmethod
            def type() -> typing.Type['EntryType']:
                return EntryType
            __annotations__ = {
                "timestamp": timestamp,
                "type": type,
            }
    
    type: 'EntryType'
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'EntryType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> 'EntryType': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: 'EntryType',
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Entry':
        return super().__new__(
            cls,
            *args,
            type=type,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.answer import Answer
from cvg_sdk.model.bridge import Bridge
from cvg_sdk.model.custom import Custom
from cvg_sdk.model.end import End
from cvg_sdk.model.entry_type import EntryType
from cvg_sdk.model.forward import Forward
from cvg_sdk.model.inactivity import Inactivity
from cvg_sdk.model.playback import Playback
from cvg_sdk.model.prompt import Prompt
from cvg_sdk.model.recording_start import RecordingStart
from cvg_sdk.model.recording_stop import RecordingStop
from cvg_sdk.model.start import Start
from cvg_sdk.model.synthesis import Synthesis
from cvg_sdk.model.tone import Tone
from cvg_sdk.model.transcription import Transcription
