
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABORT ASSIGN AT AXIOM DEF DO ELSE END EPS EXAMPLE FALSE FLOAT_NUM ID IF IMPORT INIT INV LOAD MUL_EQ OPERATOR PROGRAM PROOF SAVE SCOPE SDP_PRECISION SETTING SHOW SILENT SKIP STRING THEN TRUE WHILE\n    scope   : cmd\n            | scope cmd\n    \n    cmd     : definition\n            | example\n            | axiom\n            | show\n            | setting\n            | save\n    \n    save    : SAVE var AT STRING END\n    \n    setting : SETTING EPS ASSIGN FLOAT_NUM END\n            | SETTING SDP_PRECISION ASSIGN FLOAT_NUM END\n            | SETTING SILENT ASSIGN TRUE END\n            | SETTING SILENT ASSIGN FALSE END\n    \n    show    : SHOW expression END\n    \n    definition  : DEF id ASSIGN expression END\n    \n    example : EXAMPLE ASSIGN expression END\n    \n    axiom   : AXIOM id ':' predicate PROGRAM qvar_ls predicate END\n    \n    type    : PROGRAM qvar_ls\n            | PROOF qvar_ls\n            | SCOPE\n            | OPERATOR\n    \n    expression  : expr_data\n                | var\n    \n    expr_data   : type ':' prog\n                | type ':' proof\n                | scope\n                | load\n                | import\n    \n    import  : IMPORT STRING\n    \n    load    : LOAD STRING\n    \n    qvar_ls : qvar_ls_pre ']'\n    \n    qvar_ls_pre : '[' id\n                | qvar_ls_pre id\n    \n    predicate   : predicate_pre '}'\n    \n    predicate_pre   : '{' var qvar_ls\n                    | predicate_pre var qvar_ls\n    \n    prog    : statement\n            | prog ';' statement\n    \n    statement : skip\n                | abort\n                | init\n                | unitary\n                | if\n                | while\n                | nondet\n                | var qvar_ls\n    \n    skip    : SKIP\n    \n    abort   : ABORT\n    \n    init    : id INIT\n            | qvar_ls INIT\n    \n    unitary : id MUL_EQ var\n            | qvar_ls MUL_EQ var\n    \n    if      : IF var qvar_ls THEN prog ELSE prog END\n    \n    while   : WHILE var qvar_ls DO prog END\n    \n    nondet  : nondet_pre '#' prog ')'\n    \n    nondet_pre  : '(' prog\n                | nondet_pre '#' prog\n    \n    proof   : predicate ';' proof_mid ';' predicate\n    \n    proof_mid   : proof_statement\n                | proof_mid ';' proof_statement\n    \n    proof_statement : var qvar_ls\n                    | skip\n                    | abort\n                    | init\n                    | unitary\n                    | if_proof\n                    | while_proof\n                    | nondet_proof\n                    | union_proof\n                    | predicate\n    \n    if_proof    : IF var qvar_ls THEN proof_mid ELSE proof_mid END\n    \n    while_proof : inv ';' WHILE var qvar_ls DO proof_mid END\n    \n    nondet_proof  : nondet_proof_pre '#' proof_mid ')'\n    \n    nondet_proof_pre    : '(' proof_mid\n                        | nondet_proof_pre '#' proof_mid\n    \n    union_proof : union_proof_pre ',' proof_mid ')'\n    \n    union_proof_pre : '(' proof_mid\n                    | union_proof_pre ',' proof_mid\n    \n    inv     : inv_pre '}'\n    \n    inv_pre : '{' INV ':' var qvar_ls\n            | inv_pre var qvar_ls\n    \n    var     : id\n            | var_pre id\n    \n    var_pre : id '.'\n            | var_pre id '.'\n    \n    id      : ID\n    "
    
_lr_action_items = {'DEF':([0,1,2,3,4,5,6,7,8,12,15,18,24,39,42,57,90,106,107,108,109,110,154,],[9,9,-1,-3,-4,-5,-6,-7,-8,9,-2,9,9,9,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'EXAMPLE':([0,1,2,3,4,5,6,7,8,12,15,18,24,39,42,57,90,106,107,108,109,110,154,],[10,10,-1,-3,-4,-5,-6,-7,-8,10,-2,10,10,10,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'AXIOM':([0,1,2,3,4,5,6,7,8,12,15,18,24,39,42,57,90,106,107,108,109,110,154,],[11,11,-1,-3,-4,-5,-6,-7,-8,11,-2,11,11,11,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'SHOW':([0,1,2,3,4,5,6,7,8,12,15,18,24,39,42,57,90,106,107,108,109,110,154,],[12,12,-1,-3,-4,-5,-6,-7,-8,12,-2,12,12,12,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'SETTING':([0,1,2,3,4,5,6,7,8,12,15,18,24,39,42,57,90,106,107,108,109,110,154,],[13,13,-1,-3,-4,-5,-6,-7,-8,13,-2,13,13,13,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'SAVE':([0,1,2,3,4,5,6,7,8,12,15,18,24,39,42,57,90,106,107,108,109,110,154,],[14,14,-1,-3,-4,-5,-6,-7,-8,14,-2,14,14,14,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'$end':([1,2,3,4,5,6,7,8,15,42,57,90,106,107,108,109,110,154,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-14,-16,-15,-10,-11,-12,-13,-9,-17,]),'END':([2,3,4,5,6,7,8,15,17,20,21,22,24,25,26,27,40,42,45,50,51,56,57,61,62,63,65,66,67,68,69,70,71,74,75,82,85,86,87,88,89,90,92,97,98,100,106,107,108,109,110,114,115,117,119,120,121,122,123,124,125,126,135,136,140,142,153,154,155,156,165,168,169,172,176,179,180,181,182,183,],[-1,-3,-4,-5,-6,-7,-8,-2,-86,42,-22,-23,-26,-27,-28,-82,57,-14,-83,-30,-29,90,-16,-24,-25,-37,-39,-40,-41,-42,-43,-44,-45,-47,-48,-31,106,107,108,109,110,-15,-34,-46,-50,-49,-10,-11,-12,-13,-9,-38,-70,-59,-62,-63,-64,-65,-66,-67,-68,-69,-52,-51,154,-61,-55,-17,-58,-60,172,-73,-76,-54,179,-53,182,183,-71,-72,]),'ID':([9,11,12,14,17,18,28,39,43,44,47,48,59,60,77,78,80,81,82,83,84,95,96,99,101,104,112,113,128,132,133,134,141,145,146,151,152,158,161,162,163,166,171,175,177,178,],[17,17,17,17,-86,17,17,17,17,-84,17,17,17,17,17,17,17,-85,-31,-33,-32,17,17,17,17,17,-36,-35,17,17,17,17,17,17,17,17,17,17,-81,17,17,17,17,-80,17,17,]),'ASSIGN':([10,16,17,35,36,37,],[18,39,-86,52,53,54,]),'PROGRAM':([12,18,39,58,92,],[29,29,29,91,-34,]),'PROOF':([12,18,39,],[30,30,30,]),'SCOPE':([12,18,39,],[31,31,31,]),'OPERATOR':([12,18,39,],[32,32,32,]),'LOAD':([12,18,39,],[33,33,33,]),'IMPORT':([12,18,39,],[34,34,34,]),'EPS':([13,],[35,]),'SDP_PRECISION':([13,],[36,]),'SILENT':([13,],[37,]),':':([17,19,23,31,32,46,49,82,150,],[-86,41,43,-20,-21,-18,-19,-31,163,]),'.':([17,27,45,76,127,],[-86,44,81,44,44,]),'AT':([17,27,38,45,],[-86,-82,55,-83,]),'[':([17,27,29,30,43,45,72,76,80,91,93,94,95,96,102,103,104,118,127,133,141,143,145,146,148,151,152,162,166,167,170,171,177,178,],[-86,-82,48,48,48,-83,48,-82,48,48,48,48,48,48,48,48,48,48,-82,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),';':([17,27,45,61,63,64,65,66,67,68,69,70,71,74,75,82,92,97,98,100,105,114,115,116,117,119,120,121,122,123,124,125,126,129,135,136,139,142,147,149,153,155,156,159,160,164,165,168,169,172,173,176,179,180,181,182,183,],[-86,-82,-83,95,-37,96,-39,-40,-41,-42,-43,-44,-45,-47,-48,-31,-34,-46,-50,-49,95,-38,-70,141,-59,-62,-63,-64,-65,-66,-67,-68,-69,144,-52,-51,95,-61,-79,162,-55,-70,-60,162,162,95,95,-73,-76,-54,162,95,-53,162,162,-71,-72,]),'#':([17,27,45,63,65,66,67,68,69,70,71,74,75,79,82,92,97,98,100,105,114,115,117,119,120,121,122,123,124,125,126,130,135,136,139,142,149,153,156,159,168,169,172,179,182,183,],[-86,-82,-83,-37,-39,-40,-41,-42,-43,-44,-45,-47,-48,104,-31,-34,-46,-50,-49,-56,-38,-70,-59,-62,-63,-64,-65,-66,-67,-68,-69,145,-52,-51,-57,-61,-74,-55,-60,-75,-73,-76,-54,-53,-71,-72,]),')':([17,27,45,63,65,66,67,68,69,70,71,74,75,82,92,97,98,100,114,115,117,119,120,121,122,123,124,125,126,135,136,139,142,153,156,159,160,168,169,172,179,182,183,],[-86,-82,-83,-37,-39,-40,-41,-42,-43,-44,-45,-47,-48,-31,-34,-46,-50,-49,-38,-70,-59,-62,-63,-64,-65,-66,-67,-68,-69,-52,-51,153,-61,-55,-60,168,169,-73,-76,-54,-53,-71,-72,]),'ELSE':([17,27,45,63,65,66,67,68,69,70,71,74,75,82,92,97,98,100,114,115,117,119,120,121,122,123,124,125,126,135,136,142,153,156,164,168,169,172,173,179,182,183,],[-86,-82,-83,-37,-39,-40,-41,-42,-43,-44,-45,-47,-48,-31,-34,-46,-50,-49,-38,-70,-59,-62,-63,-64,-65,-66,-67,-68,-69,-52,-51,-61,-55,-60,171,-73,-76,-54,177,-53,-71,-72,]),',':([17,27,45,74,75,82,92,98,100,115,117,119,120,121,122,123,124,125,126,131,135,136,142,149,156,160,168,169,182,183,],[-86,-82,-83,-47,-48,-31,-34,-50,-49,-70,-59,-62,-63,-64,-65,-66,-67,-68,-69,146,-52,-51,-61,-77,-60,-78,-73,-76,-71,-72,]),'INIT':([17,73,76,82,127,],[-86,98,100,-31,100,]),'MUL_EQ':([17,73,76,82,127,],[-86,99,101,-31,101,]),']':([17,47,83,84,],[-86,82,-33,-32,]),'STRING':([33,34,55,],[50,51,89,]),'{':([41,43,82,96,111,133,141,145,146,162,166,177,178,],[60,60,-31,134,60,134,134,134,134,134,134,134,134,]),'SKIP':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'ABORT':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'IF':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[77,77,77,128,77,128,128,128,128,77,77,128,128,77,128,128,]),'WHILE':([43,80,95,104,144,151,152,171,],[78,78,78,78,158,78,78,78,]),'(':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[80,80,80,133,80,133,133,133,133,80,80,133,133,80,133,133,]),'FLOAT_NUM':([52,53,],[85,86,]),'TRUE':([54,],[87,]),'FALSE':([54,],[88,]),'}':([59,82,112,113,132,161,175,],[92,-31,-36,-35,147,-81,-80,]),'THEN':([82,137,157,],[-31,151,166,]),'DO':([82,138,174,],[-31,152,178,]),'INV':([134,],[150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'scope':([0,12,18,39,],[1,24,24,24,]),'cmd':([0,1,12,18,24,39,],[2,15,2,2,15,2,]),'definition':([0,1,12,18,24,39,],[3,3,3,3,3,3,]),'example':([0,1,12,18,24,39,],[4,4,4,4,4,4,]),'axiom':([0,1,12,18,24,39,],[5,5,5,5,5,5,]),'show':([0,1,12,18,24,39,],[6,6,6,6,6,6,]),'setting':([0,1,12,18,24,39,],[7,7,7,7,7,7,]),'save':([0,1,12,18,24,39,],[8,8,8,8,8,8,]),'id':([9,11,12,14,18,28,39,43,47,48,59,60,77,78,80,95,96,99,101,104,128,132,133,134,141,145,146,151,152,158,162,163,166,171,177,178,],[16,19,27,27,27,45,27,76,83,84,27,27,27,27,76,76,127,27,27,76,27,27,127,27,127,127,127,76,76,27,127,27,127,76,127,127,]),'expression':([12,18,39,],[20,40,56,]),'expr_data':([12,18,39,],[21,21,21,]),'var':([12,14,18,39,43,59,60,77,78,80,95,96,99,101,104,128,132,133,134,141,145,146,151,152,158,162,163,166,171,177,178,],[22,38,22,22,72,93,94,102,103,72,72,118,135,136,72,143,148,118,94,118,118,118,72,72,167,118,170,118,72,118,118,]),'type':([12,18,39,],[23,23,23,]),'load':([12,18,39,],[25,25,25,]),'import':([12,18,39,],[26,26,26,]),'var_pre':([12,14,18,39,43,59,60,77,78,80,95,96,99,101,104,128,132,133,134,141,145,146,151,152,158,162,163,166,171,177,178,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'qvar_ls':([29,30,43,72,80,91,93,94,95,96,102,103,104,118,133,141,143,145,146,148,151,152,162,166,167,170,171,177,178,],[46,49,73,97,73,111,112,113,73,73,137,138,73,142,73,73,157,73,73,161,73,73,73,73,174,175,73,73,73,]),'qvar_ls_pre':([29,30,43,72,80,91,93,94,95,96,102,103,104,118,133,141,143,145,146,148,151,152,162,166,167,170,171,177,178,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'predicate':([41,43,96,111,133,141,145,146,162,166,177,178,],[58,64,115,140,115,155,115,115,115,115,115,115,]),'predicate_pre':([41,43,96,111,133,141,145,146,162,166,177,178,],[59,59,59,59,59,59,59,59,59,59,59,59,]),'prog':([43,80,104,151,152,171,],[61,105,139,164,165,176,]),'proof':([43,],[62,]),'statement':([43,80,95,104,151,152,171,],[63,63,114,63,63,63,63,]),'skip':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[65,65,65,119,65,119,119,119,119,65,65,119,119,65,119,119,]),'abort':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[66,66,66,120,66,120,120,120,120,66,66,120,120,66,120,120,]),'init':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[67,67,67,121,67,121,121,121,121,67,67,121,121,67,121,121,]),'unitary':([43,80,95,96,104,133,141,145,146,151,152,162,166,171,177,178,],[68,68,68,122,68,122,122,122,122,68,68,122,122,68,122,122,]),'if':([43,80,95,104,151,152,171,],[69,69,69,69,69,69,69,]),'while':([43,80,95,104,151,152,171,],[70,70,70,70,70,70,70,]),'nondet':([43,80,95,104,151,152,171,],[71,71,71,71,71,71,71,]),'nondet_pre':([43,80,95,104,151,152,171,],[79,79,79,79,79,79,79,]),'proof_mid':([96,133,145,146,166,177,178,],[116,149,159,160,173,180,181,]),'proof_statement':([96,133,141,145,146,162,166,177,178,],[117,117,156,117,117,156,117,117,117,]),'if_proof':([96,133,141,145,146,162,166,177,178,],[123,123,123,123,123,123,123,123,123,]),'while_proof':([96,133,141,145,146,162,166,177,178,],[124,124,124,124,124,124,124,124,124,]),'nondet_proof':([96,133,141,145,146,162,166,177,178,],[125,125,125,125,125,125,125,125,125,]),'union_proof':([96,133,141,145,146,162,166,177,178,],[126,126,126,126,126,126,126,126,126,]),'inv':([96,133,141,145,146,162,166,177,178,],[129,129,129,129,129,129,129,129,129,]),'nondet_proof_pre':([96,133,141,145,146,162,166,177,178,],[130,130,130,130,130,130,130,130,130,]),'union_proof_pre':([96,133,141,145,146,162,166,177,178,],[131,131,131,131,131,131,131,131,131,]),'inv_pre':([96,133,141,145,146,162,166,177,178,],[132,132,132,132,132,132,132,132,132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> scope","S'",1,None,None,None),
  ('scope -> cmd','scope',1,'p_scope','vparser.py',37),
  ('scope -> scope cmd','scope',2,'p_scope','vparser.py',38),
  ('cmd -> definition','cmd',1,'p_cmd','vparser.py',50),
  ('cmd -> example','cmd',1,'p_cmd','vparser.py',51),
  ('cmd -> axiom','cmd',1,'p_cmd','vparser.py',52),
  ('cmd -> show','cmd',1,'p_cmd','vparser.py',53),
  ('cmd -> setting','cmd',1,'p_cmd','vparser.py',54),
  ('cmd -> save','cmd',1,'p_cmd','vparser.py',55),
  ('save -> SAVE var AT STRING END','save',5,'p_save','vparser.py',64),
  ('setting -> SETTING EPS ASSIGN FLOAT_NUM END','setting',5,'p_setting','vparser.py',73),
  ('setting -> SETTING SDP_PRECISION ASSIGN FLOAT_NUM END','setting',5,'p_setting','vparser.py',74),
  ('setting -> SETTING SILENT ASSIGN TRUE END','setting',5,'p_setting','vparser.py',75),
  ('setting -> SETTING SILENT ASSIGN FALSE END','setting',5,'p_setting','vparser.py',76),
  ('show -> SHOW expression END','show',3,'p_show','vparser.py',98),
  ('definition -> DEF id ASSIGN expression END','definition',5,'p_definition','vparser.py',107),
  ('example -> EXAMPLE ASSIGN expression END','example',4,'p_example','vparser.py',116),
  ('axiom -> AXIOM id : predicate PROGRAM qvar_ls predicate END','axiom',8,'p_axiom','vparser.py',125),
  ('type -> PROGRAM qvar_ls','type',2,'p_type','vparser.py',134),
  ('type -> PROOF qvar_ls','type',2,'p_type','vparser.py',135),
  ('type -> SCOPE','type',1,'p_type','vparser.py',136),
  ('type -> OPERATOR','type',1,'p_type','vparser.py',137),
  ('expression -> expr_data','expression',1,'p_expression','vparser.py',154),
  ('expression -> var','expression',1,'p_expression','vparser.py',155),
  ('expr_data -> type : prog','expr_data',3,'p_expr_data','vparser.py',167),
  ('expr_data -> type : proof','expr_data',3,'p_expr_data','vparser.py',168),
  ('expr_data -> scope','expr_data',1,'p_expr_data','vparser.py',169),
  ('expr_data -> load','expr_data',1,'p_expr_data','vparser.py',170),
  ('expr_data -> import','expr_data',1,'p_expr_data','vparser.py',171),
  ('import -> IMPORT STRING','import',2,'p_import','vparser.py',186),
  ('load -> LOAD STRING','load',2,'p_load','vparser.py',196),
  ('qvar_ls -> qvar_ls_pre ]','qvar_ls',2,'p_qvar_ls','vparser.py',205),
  ('qvar_ls_pre -> [ id','qvar_ls_pre',2,'p_qvar_ls_pre','vparser.py',214),
  ('qvar_ls_pre -> qvar_ls_pre id','qvar_ls_pre',2,'p_qvar_ls_pre','vparser.py',215),
  ('predicate -> predicate_pre }','predicate',2,'p_predicate','vparser.py',227),
  ('predicate_pre -> { var qvar_ls','predicate_pre',3,'p_predicate_pre','vparser.py',236),
  ('predicate_pre -> predicate_pre var qvar_ls','predicate_pre',3,'p_predicate_pre','vparser.py',237),
  ('prog -> statement','prog',1,'p_prog','vparser.py',250),
  ('prog -> prog ; statement','prog',3,'p_prog','vparser.py',251),
  ('statement -> skip','statement',1,'p_statement','vparser.py',263),
  ('statement -> abort','statement',1,'p_statement','vparser.py',264),
  ('statement -> init','statement',1,'p_statement','vparser.py',265),
  ('statement -> unitary','statement',1,'p_statement','vparser.py',266),
  ('statement -> if','statement',1,'p_statement','vparser.py',267),
  ('statement -> while','statement',1,'p_statement','vparser.py',268),
  ('statement -> nondet','statement',1,'p_statement','vparser.py',269),
  ('statement -> var qvar_ls','statement',2,'p_statement','vparser.py',270),
  ('skip -> SKIP','skip',1,'p_skip','vparser.py',282),
  ('abort -> ABORT','abort',1,'p_abort','vparser.py',291),
  ('init -> id INIT','init',2,'p_init','vparser.py',300),
  ('init -> qvar_ls INIT','init',2,'p_init','vparser.py',301),
  ('unitary -> id MUL_EQ var','unitary',3,'p_unitary','vparser.py',314),
  ('unitary -> qvar_ls MUL_EQ var','unitary',3,'p_unitary','vparser.py',315),
  ('if -> IF var qvar_ls THEN prog ELSE prog END','if',8,'p_if','vparser.py',328),
  ('while -> WHILE var qvar_ls DO prog END','while',6,'p_while','vparser.py',337),
  ('nondet -> nondet_pre # prog )','nondet',4,'p_nondet','vparser.py',346),
  ('nondet_pre -> ( prog','nondet_pre',2,'p_nondet_pre','vparser.py',355),
  ('nondet_pre -> nondet_pre # prog','nondet_pre',3,'p_nondet_pre','vparser.py',356),
  ('proof -> predicate ; proof_mid ; predicate','proof',5,'p_proof','vparser.py',368),
  ('proof_mid -> proof_statement','proof_mid',1,'p_proof_mid','vparser.py',377),
  ('proof_mid -> proof_mid ; proof_statement','proof_mid',3,'p_proof_mid','vparser.py',378),
  ('proof_statement -> var qvar_ls','proof_statement',2,'p_proof_statement','vparser.py',390),
  ('proof_statement -> skip','proof_statement',1,'p_proof_statement','vparser.py',391),
  ('proof_statement -> abort','proof_statement',1,'p_proof_statement','vparser.py',392),
  ('proof_statement -> init','proof_statement',1,'p_proof_statement','vparser.py',393),
  ('proof_statement -> unitary','proof_statement',1,'p_proof_statement','vparser.py',394),
  ('proof_statement -> if_proof','proof_statement',1,'p_proof_statement','vparser.py',395),
  ('proof_statement -> while_proof','proof_statement',1,'p_proof_statement','vparser.py',396),
  ('proof_statement -> nondet_proof','proof_statement',1,'p_proof_statement','vparser.py',397),
  ('proof_statement -> union_proof','proof_statement',1,'p_proof_statement','vparser.py',398),
  ('proof_statement -> predicate','proof_statement',1,'p_proof_statement','vparser.py',399),
  ('if_proof -> IF var qvar_ls THEN proof_mid ELSE proof_mid END','if_proof',8,'p_if_proof','vparser.py',411),
  ('while_proof -> inv ; WHILE var qvar_ls DO proof_mid END','while_proof',8,'p_while_proof','vparser.py',420),
  ('nondet_proof -> nondet_proof_pre # proof_mid )','nondet_proof',4,'p_nondet_proof','vparser.py',429),
  ('nondet_proof_pre -> ( proof_mid','nondet_proof_pre',2,'p_nondet_proof_pre','vparser.py',438),
  ('nondet_proof_pre -> nondet_proof_pre # proof_mid','nondet_proof_pre',3,'p_nondet_proof_pre','vparser.py',439),
  ('union_proof -> union_proof_pre , proof_mid )','union_proof',4,'p_union_proof','vparser.py',451),
  ('union_proof_pre -> ( proof_mid','union_proof_pre',2,'p_union_proof_pre','vparser.py',460),
  ('union_proof_pre -> union_proof_pre , proof_mid','union_proof_pre',3,'p_union_proof_pre','vparser.py',461),
  ('inv -> inv_pre }','inv',2,'p_inv','vparser.py',474),
  ('inv_pre -> { INV : var qvar_ls','inv_pre',5,'p_inv_pre','vparser.py',483),
  ('inv_pre -> inv_pre var qvar_ls','inv_pre',3,'p_inv_pre','vparser.py',484),
  ('var -> id','var',1,'p_var','vparser.py',496),
  ('var -> var_pre id','var',2,'p_var','vparser.py',497),
  ('var_pre -> id .','var_pre',2,'p_var_pre','vparser.py',509),
  ('var_pre -> var_pre id .','var_pre',3,'p_var_pre','vparser.py',510),
  ('id -> ID','id',1,'p_id','vparser.py',522),
]
