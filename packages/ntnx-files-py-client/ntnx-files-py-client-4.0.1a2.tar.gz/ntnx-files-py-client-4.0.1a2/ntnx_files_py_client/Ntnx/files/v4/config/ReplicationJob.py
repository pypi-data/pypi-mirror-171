# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.JobStatus import JobStatus  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class ReplicationJob(ExternalizableAbstractModel):
    """ReplicationJob - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'policy_ext_id': 'str',
        'mount_target_ext_id': 'str',
        'status': 'files.v4.config.JobStatus',
        'start_time': 'str',
        'start_time_i_s_o8601': 'str',
        'end_time': 'str',
        'end_time_i_s_o8601': 'str',
        'duration': 'str',
        'duration_i_s_o8601': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'policy_ext_id': 'policyExtId',
        'mount_target_ext_id': 'mountTargetExtId',
        'status': 'status',
        'start_time': 'startTime',
        'start_time_i_s_o8601': 'startTimeISO8601',
        'end_time': 'endTime',
        'end_time_i_s_o8601': 'endTimeISO8601',
        'duration': 'duration',
        'duration_i_s_o8601': 'durationISO8601',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, policy_ext_id=None, mount_target_ext_id=None, status=None, start_time=None, start_time_i_s_o8601=None, end_time=None, end_time_i_s_o8601=None, duration=None, duration_i_s_o8601=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """ReplicationJob - a model defined in Swagger
            \nContains details of replicated job.
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__policy_ext_id = None
        self.__mount_target_ext_id = None
        self.__status = None
        self.__start_time = None
        self.__start_time_i_s_o8601 = None
        self.__end_time = None
        self.__end_time_i_s_o8601 = None
        self.__duration = None
        self.__duration_i_s_o8601 = None
        self.discriminator = None
        if policy_ext_id is not None:
            self.__policy_ext_id = policy_ext_id
        if mount_target_ext_id is not None:
            self.__mount_target_ext_id = mount_target_ext_id
        if status is not None:
            self.__status = status
        if start_time is not None:
            self.__start_time = start_time
        if start_time_i_s_o8601 is not None:
            self.__start_time_i_s_o8601 = start_time_i_s_o8601
        if end_time is not None:
            self.__end_time = end_time
        if end_time_i_s_o8601 is not None:
            self.__end_time_i_s_o8601 = end_time_i_s_o8601
        if duration is not None:
            self.__duration = duration
        if duration_i_s_o8601 is not None:
            self.__duration_i_s_o8601 = duration_i_s_o8601

    def _initialize_object_type(self):
        return 'files.v4.config.ReplicationJob'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.ReplicationJob'


    @property
    def policy_ext_id(self):
        """`{ str }`
            \nExtId of the policy.
        """ # noqa: E501
        return self.__policy_ext_id

    @policy_ext_id.setter
    def policy_ext_id(self, policy_ext_id):
        if policy_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', policy_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `policy_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__policy_ext_id = policy_ext_id

    @property
    def mount_target_ext_id(self):
        """`{ str }`
            \nThe {extId} of the mount target. Example:9c1e537d-6777-4c22-5d41-ddd0c3337aa9.
        """ # noqa: E501
        return self.__mount_target_ext_id

    @mount_target_ext_id.setter
    def mount_target_ext_id(self, mount_target_ext_id):
        if mount_target_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', mount_target_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `mount_target_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__mount_target_ext_id = mount_target_ext_id

    @property
    def status(self):
        """`{ files.v4.config.JobStatus }`
            
        """ # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    @property
    def start_time(self):
        """`{ str }`
            \nStart time for the replication job.
        """ # noqa: E501
        return self.__start_time

    @start_time.setter
    def start_time(self, start_time):
        if start_time is not None and not re.search('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', start_time):  # noqa: E501
            raise ValueError(r"Invalid value for `start_time`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/`")  # noqa: E501

        self.__start_time = start_time

    @property
    def start_time_i_s_o8601(self):
        """`{ str }`
            \nStart time for the replication job in ISO format.
        """ # noqa: E501
        return self.__start_time_i_s_o8601

    @start_time_i_s_o8601.setter
    def start_time_i_s_o8601(self, start_time_i_s_o8601):
        if start_time_i_s_o8601 is not None and not re.search('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', start_time_i_s_o8601):  # noqa: E501
            raise ValueError(r"Invalid value for `start_time_i_s_o8601`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/`")  # noqa: E501

        self.__start_time_i_s_o8601 = start_time_i_s_o8601

    @property
    def end_time(self):
        """`{ str }`
            \nEnd time for the replication job.
        """ # noqa: E501
        return self.__end_time

    @end_time.setter
    def end_time(self, end_time):
        if end_time is not None and not re.search('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', end_time):  # noqa: E501
            raise ValueError(r"Invalid value for `end_time`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/`")  # noqa: E501

        self.__end_time = end_time

    @property
    def end_time_i_s_o8601(self):
        """`{ str }`
            \nEnd time for the replication job in ISO format.
        """ # noqa: E501
        return self.__end_time_i_s_o8601

    @end_time_i_s_o8601.setter
    def end_time_i_s_o8601(self, end_time_i_s_o8601):
        if end_time_i_s_o8601 is not None and not re.search('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', end_time_i_s_o8601):  # noqa: E501
            raise ValueError(r"Invalid value for `end_time_i_s_o8601`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/`")  # noqa: E501

        self.__end_time_i_s_o8601 = end_time_i_s_o8601

    @property
    def duration(self):
        """`{ str }`
            \nThe time difference between the start and the end time of the job.
        """ # noqa: E501
        return self.__duration

    @duration.setter
    def duration(self, duration):
        if duration is not None and not re.search('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', duration):  # noqa: E501
            raise ValueError(r"Invalid value for `duration`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/`")  # noqa: E501

        self.__duration = duration

    @property
    def duration_i_s_o8601(self):
        """`{ str }`
            \nThe time difference between the start and the end time of the job in ISO format.
        """ # noqa: E501
        return self.__duration_i_s_o8601

    @duration_i_s_o8601.setter
    def duration_i_s_o8601(self, duration_i_s_o8601):
        if duration_i_s_o8601 is not None and not re.search('^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$', duration_i_s_o8601):  # noqa: E501
            raise ValueError(r"Invalid value for `duration_i_s_o8601`, must be a follow pattern or equal to `/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(([+-]\\d\\d:\\d\\d)|Z)?$/`")  # noqa: E501

        self.__duration_i_s_o8601 = duration_i_s_o8601

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReplicationJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReplicationJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

