# coding: utf-8

"""
    VIER Cognitive Voice Health API

    CVG health  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@vier.ai
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from cvg_sdk import schemas  # noqa: F401


class SpeechServiceFailedProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "configuration",
            "errorCode",
        }
        
        class properties:
        
            @staticmethod
            def configuration() -> typing.Type['SpeechServiceConfiguration']:
                return SpeechServiceConfiguration
            errorCode = schemas.StrSchema
            __annotations__ = {
                "configuration": configuration,
                "errorCode": errorCode,
            }
    
    configuration: 'SpeechServiceConfiguration'
    errorCode: MetaOapg.properties.errorCode
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configuration"]) -> 'SpeechServiceConfiguration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["configuration", "errorCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configuration"]) -> 'SpeechServiceConfiguration': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["configuration", "errorCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configuration: 'SpeechServiceConfiguration',
        errorCode: typing.Union[MetaOapg.properties.errorCode, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpeechServiceFailedProperties':
        return super().__new__(
            cls,
            *args,
            configuration=configuration,
            errorCode=errorCode,
            _configuration=_configuration,
            **kwargs,
        )

from cvg_sdk.model.speech_service_configuration import SpeechServiceConfiguration
