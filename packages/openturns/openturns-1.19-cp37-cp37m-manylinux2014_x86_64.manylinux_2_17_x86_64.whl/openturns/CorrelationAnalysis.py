# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Correlation analysis."""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CorrelationAnalysis
else:
    import _CorrelationAnalysis

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _CorrelationAnalysis.delete_SwigPyIterator

    def value(self):
        return _CorrelationAnalysis.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _CorrelationAnalysis.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _CorrelationAnalysis.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _CorrelationAnalysis.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _CorrelationAnalysis.SwigPyIterator_equal(self, x)

    def copy(self):
        return _CorrelationAnalysis.SwigPyIterator_copy(self)

    def next(self):
        return _CorrelationAnalysis.SwigPyIterator_next(self)

    def __next__(self):
        return _CorrelationAnalysis.SwigPyIterator___next__(self)

    def previous(self):
        return _CorrelationAnalysis.SwigPyIterator_previous(self)

    def advance(self, n):
        return _CorrelationAnalysis.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _CorrelationAnalysis.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _CorrelationAnalysis.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _CorrelationAnalysis.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _CorrelationAnalysis.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _CorrelationAnalysis.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _CorrelationAnalysis.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _CorrelationAnalysis:
_CorrelationAnalysis.SwigPyIterator_swigregister(SwigPyIterator)

import openturns.base
import openturns.common
import openturns.typ
import openturns.statistics
import openturns.graph
import openturns.func
import openturns.geom
import openturns.iterative_statistics
import openturns.diff
import openturns.optim
import openturns.experiment
import openturns.solver
import openturns.algo

def PearsonCorrelation(inputSample, outputSample):
    r"""
    Correlation evaluation based on the Pearson correlation coefficient.

    Refer to :ref:`pearson_coefficient`.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The Pearson coefficients evaluated between the *sample2* and each coordinate of
        *sample1*.

    See Also
    --------
    CorrelationAnalysis.PCC, CorrelationAnalysis.SRC,
    CorrelationAnalysis.SpearmanCorrelation
    """
    return _CorrelationAnalysis.PearsonCorrelation(inputSample, outputSample)

def SpearmanCorrelation(inputSample, outputSample):
    r"""
    Correlation evaluation based on the Spearman correlation coefficient.

    Refer to :ref:`spearman_coefficient`.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The Spearman coefficients evaluated between the *sample2* and each coordinate of
        *sample1* (based on the rank values).

    See Also
    --------
    CorrelationAnalysis.PRCC, CorrelationAnalysis.SRRC,
    CorrelationAnalysis.PearsonCorrelation
    """
    return _CorrelationAnalysis.SpearmanCorrelation(inputSample, outputSample)

def SRC(inputSample, outputSample, normalize=False):
    r"""
    Correlation evaluation based on the Standard Regression Coefficient.

    Refer to :ref:`ranking_src`.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample, of dimension :math:`n \geq 1`.
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.
    normalize : bool
        if True, coefficients sum to one.
        Otherwise it includes noise variance
        Default value is false.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The SRC evaluated between the *sample2* and each coordinate of the *sample1*.

    See Also
    --------
    CorrelationAnalysis.PearsonCorrelation, CorrelationAnalysis.PCC,
    CorrelationAnalysis.SRRC
    """
    return _CorrelationAnalysis.SRC(inputSample, outputSample, normalize)

def SignedSRC(inputSample, outputSample):
    r"""
    Correlation evaluation based on the Signed Standard Rank Regression Coefficient.

    It takes into account the linear coefficient sign.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample, of dimension :math:`n \geq 1`.
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The SRC evaluated between the *sample2* and each coordinate of the
        *sample1* (based on the rank value).

    See Also
    --------
    CorrelationAnalysis.SpearmanCorrelation, CorrelationAnalysis.PRCC,
    CorrelationAnalysis.SRC, CorrelationAnalysis.SRRC
    """
    return _CorrelationAnalysis.SignedSRC(inputSample, outputSample)

def PCC(inputSample, outputSample):
    r"""
    Correlation evaluation based on the Partial Correlation Coefficient.

    Refer to :ref:`ranking_pcc`.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample, of dimension :math:`n \geq 2`.
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The PCC coefficients evaluated between the *sample2* and each coordinate of
        *sample1*.

    See Also
    --------
    CorrelationAnalysis.PearsonCorrelation, CorrelationAnalysis.SRC, 
    CorrelationAnalysis.PRCC
    """
    return _CorrelationAnalysis.PCC(inputSample, outputSample)

def SRRC(inputSample, outputSample, normalize=False):
    r"""
    Correlation evaluation based on the Standard Rank Regression Coefficient.

    Similar as SRC evaluated on the ranked samples.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample, of dimension :math:`n \geq 1`.
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.
    normalize : bool
        if True, coefficients sum to one.
        Otherwise it includes noise variance
        Default value is false.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The SRRC evaluated between the *sample2* and each coordinate of the
        *sample1* (based on the rank value).

    See Also
    --------
    CorrelationAnalysis.SpearmanCorrelation, CorrelationAnalysis.PRCC,
    CorrelationAnalysis.SRC
    """
    return _CorrelationAnalysis.SRRC(inputSample, outputSample, normalize)

def PRCC(inputSample, outputSample):
    r"""
    Correlation evaluation based on the Partial Rank Correlation Coefficient.

    Refer to :ref:`ranking_prcc`.

    Parameters
    ----------
    sample1 : 2-d sequence of float
        First sample, of dimension :math:`n \geq 2`.
    sample2 : 2-d sequence of float
        Second sample, of dimension = 1.

    Returns
    -------
    coef : :class:`~openturns.Point`
        The PRCC coefficients evaluated between the *sample2* and each coordinate of
        *sample1* (based on the rank values).

    See Also
    --------
    CorrelationAnalysis.SpearmanCorrelation, CorrelationAnalysis.SRRC,
    CorrelationAnalysis.PCC
    """
    return _CorrelationAnalysis.PRCC(inputSample, outputSample)


