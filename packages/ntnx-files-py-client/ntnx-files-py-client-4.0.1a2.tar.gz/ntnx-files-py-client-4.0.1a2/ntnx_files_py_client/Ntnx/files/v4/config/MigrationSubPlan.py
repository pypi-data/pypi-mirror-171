# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.MigrationPair import MigrationPair  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.NfsOptions import NfsOptions  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.SourceShareProtocolType import SourceShareProtocolType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class MigrationSubPlan(ExternalizableAbstractModel):
    """MigrationSubPlan - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'name': 'str',
        'migration_pair': 'files.v4.config.MigrationPair',
        'protocol': 'files.v4.config.SourceShareProtocolType',
        'is_sync_type_mirror': 'bool',
        'nfs_options': 'files.v4.config.NfsOptions',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'name': 'name',
        'migration_pair': 'migrationPair',
        'protocol': 'protocol',
        'is_sync_type_mirror': 'isSyncTypeMirror',
        'nfs_options': 'nfsOptions',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, name=None, migration_pair=None, protocol=None, is_sync_type_mirror=False, nfs_options=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """MigrationSubPlan - a model defined in Swagger
            \nMigration sub plan details
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__name = None
        self.__migration_pair = None
        self.__protocol = None
        self.__is_sync_type_mirror = None
        self.__nfs_options = None
        self.discriminator = None
        if name is not None:
            self.__name = name
        self.__migration_pair = migration_pair
        self.__protocol = protocol
        if is_sync_type_mirror is not None:
            self.__is_sync_type_mirror = is_sync_type_mirror
        if nfs_options is not None:
            self.__nfs_options = nfs_options

    def _initialize_object_type(self):
        return 'files.v4.config.MigrationSubPlan'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.MigrationSubPlan'


    @property
    def name(self):
        """`{ str }`
            \nMigration sub plan name
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def migration_pair(self):
        """`{ files.v4.config.MigrationPair }`
            
        """ # noqa: E501
        return self.__migration_pair

    @migration_pair.setter
    def migration_pair(self, migration_pair):
        if migration_pair is None:
            raise ValueError("Invalid value for `migration_pair`, must not be `None`")  # noqa: E501

        self.__migration_pair = migration_pair

    @property
    def protocol(self):
        """`{ files.v4.config.SourceShareProtocolType }`
            
        """ # noqa: E501
        return self.__protocol

    @protocol.setter
    def protocol(self, protocol):
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self.__protocol = protocol

    @property
    def is_sync_type_mirror(self):
        """`{ bool }`
            \nFlag for sync type. If it is false, then source will be only synced. If it is true, then source will be mirrored on target.
        """ # noqa: E501
        return self.__is_sync_type_mirror

    @is_sync_type_mirror.setter
    def is_sync_type_mirror(self, is_sync_type_mirror):

        self.__is_sync_type_mirror = is_sync_type_mirror

    @property
    def nfs_options(self):
        """`{ files.v4.config.NfsOptions }`
            
        """ # noqa: E501
        return self.__nfs_options

    @nfs_options.setter
    def nfs_options(self, nfs_options):

        self.__nfs_options = nfs_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationSubPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationSubPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

