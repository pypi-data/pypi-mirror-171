# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.config.ProtocolType import ProtocolType  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.TLSReqCertStatus import TLSReqCertStatus  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class Ldap(object):
    """Ldap - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'uri': 'str',
        'base': 'str',
        'binddn': 'str',
        'bindpw': 'str',
        'tls_req_cert': 'files.v4.config.TLSReqCertStatus',
        'tls_cacert_content': 'str',
        'protocol_type': 'files.v4.config.ProtocolType',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'uri': 'uri',
        'base': 'base',
        'binddn': 'binddn',
        'bindpw': 'bindpw',
        'tls_req_cert': 'tlsReqCert',
        'tls_cacert_content': 'tlsCacertContent',
        'protocol_type': 'protocolType',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, uri=None, base=None, binddn=None, bindpw=None, tls_req_cert=None, tls_cacert_content=None, protocol_type=None, *args, **kwargs):  # noqa: E501
        """Ldap - a model defined in Swagger
            \nLDAP domain associated with the file server.
        """
        self.__uri = None
        self.__base = None
        self.__binddn = None
        self.__bindpw = None
        self.__tls_req_cert = None
        self.__tls_cacert_content = None
        self.__protocol_type = None
        self.discriminator = None
        if uri is not None:
            self.__uri = uri
        if base is not None:
            self.__base = base
        if binddn is not None:
            self.__binddn = binddn
        if bindpw is not None:
            self.__bindpw = bindpw
        if tls_req_cert is not None:
            self.__tls_req_cert = tls_req_cert
        if tls_cacert_content is not None:
            self.__tls_cacert_content = tls_cacert_content
        self.__protocol_type = protocol_type
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.Ldap'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.Ldap'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def uri(self):
        """`{ str }`
            \nURI of the ldap domain.
        """ # noqa: E501
        return self.__uri

    @uri.setter
    def uri(self, uri):

        self.__uri = uri

    @property
    def base(self):
        """`{ str }`
            \nBase DN
        """ # noqa: E501
        return self.__base

    @base.setter
    def base(self, base):

        self.__base = base

    @property
    def binddn(self):
        """`{ str }`
            \nBind DN
        """ # noqa: E501
        return self.__binddn

    @binddn.setter
    def binddn(self, binddn):

        self.__binddn = binddn

    @property
    def bindpw(self):
        """`{ str }`
            \nLDAP password
        """ # noqa: E501
        return self.__bindpw

    @bindpw.setter
    def bindpw(self, bindpw):

        self.__bindpw = bindpw

    @property
    def tls_req_cert(self):
        """`{ files.v4.config.TLSReqCertStatus }`
            
        """ # noqa: E501
        return self.__tls_req_cert

    @tls_req_cert.setter
    def tls_req_cert(self, tls_req_cert):

        self.__tls_req_cert = tls_req_cert

    @property
    def tls_cacert_content(self):
        """`{ str }`
            \nLDAP SSH certificate key
        """ # noqa: E501
        return self.__tls_cacert_content

    @tls_cacert_content.setter
    def tls_cacert_content(self, tls_cacert_content):

        self.__tls_cacert_content = tls_cacert_content

    @property
    def protocol_type(self):
        """`{ files.v4.config.ProtocolType }`
            
        """ # noqa: E501
        return self.__protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        if protocol_type is None:
            raise ValueError("Invalid value for `protocol_type`, must not be `None`")  # noqa: E501

        self.__protocol_type = protocol_type

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ldap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ldap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

