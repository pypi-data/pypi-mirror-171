Metadata-Version: 2.1
Name: pyvdl
Version: 0.0.5
Summary: vectors draw lib, update: add fast render & Refactor code
Author-email: Kolya142 <trim.fears_0k@icloud.com>
License: MIT License
        
        Copyright (c) 2022 Kolya
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/Kolya142/vectors-draw-lib
Project-URL: Bug Tracker, https://github.com/Kolya142/vectors-draw-lib/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# vectors-draw-lib or pyvdl
## request
matplotlib

Pillow

numpy

cv2
## Docs
install:
```shell
pip install pyvdl matplotlib opencv-python numpy
```
init:
```python
import pyvdl as vl
print(f'install pyvdl: {vl.__version__}')
```
create_obj:
```python
class example(vl.obj):
    def __init__(self):
        self.color = (255, 255, 255)
    def render(self, x, y):
        return self.abs_(x, y) - 20 < 0
```
create_animation:
```python
class p(vl.animation):
    def __init__(self):
        self.size = (500, 500)
        self.form = lambda x : x
        self.t = 5
        self.obj_ = example()
```
render:
```python
# obj
obj = example()
r = vl.render(obj)
vl.show(r)  # show render-obj: r, only works on pykernel
vl.save("test.png", r)  # save render-obj: r as "test.png"
# animation
animate = p()
animate.render()
animate.video("animation.avi")  # filename.avi
```
Fast-mode:
```python
# create
def rend(x, y):
    i = x if x > 0 else -x
    j = y if y > 0 else -y
    return (i+j)//2
r = vl.fastRender(f, 250, 250)() # syntax: vl.fastRender(func, width, heigth, x=0, y=0)()
r = vl.toRgb(r)
vl.show(r) # show render-obj: r, only works on pykernel
vl.save("test.png", r)  # save render-obj: r as "test.png"
```
