# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from th2_grpc_crawler_data_processor import crawler_processor_pb2 as th2__grpc__crawler__data__processor_dot_crawler__processor__pb2


class ProcessorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMessage = channel.stream_stream(
                '/th2.crawler.dataprocessor.Processor/ProcessMessage',
                request_serializer=th2__grpc__crawler__data__processor_dot_crawler__processor__pb2.CrawlerRequest.SerializeToString,
                response_deserializer=th2__grpc__crawler__data__processor_dot_crawler__processor__pb2.ProcessorResponse.FromString,
                )


class ProcessorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessMessage(self, request_iterator, context):
        """rpc ProcessEvent(stream CrawlerRequest) returns (stream ProcessorResponse); TODO:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMessage': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessMessage,
                    request_deserializer=th2__grpc__crawler__data__processor_dot_crawler__processor__pb2.CrawlerRequest.FromString,
                    response_serializer=th2__grpc__crawler__data__processor_dot_crawler__processor__pb2.ProcessorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'th2.crawler.dataprocessor.Processor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Processor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessMessage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/th2.crawler.dataprocessor.Processor/ProcessMessage',
            th2__grpc__crawler__data__processor_dot_crawler__processor__pb2.CrawlerRequest.SerializeToString,
            th2__grpc__crawler__data__processor_dot_crawler__processor__pb2.ProcessorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
