# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.config.ActionStatus import ActionStatus  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.BaseProtectedFileServerPair import BaseProtectedFileServerPair  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.FileServerState import FileServerState  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class ProtectedFileServerPair(BaseProtectedFileServerPair):
    """ProtectedFileServerPair - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'owning_file_server_ext_id': 'str',
        'policy_ext_ids': 'list[str]',
        'file_server_state': 'files.v4.config.FileServerState',
        'status': 'files.v4.config.ActionStatus',
        'primary_file_server_ext_id': 'str',
        'target_file_server_ext_id': 'str',
        'primary_ad_credential': 'files.v4.config.Credential',
        'primary_dns': 'files.v4.config.Dns',
        'primary_ad_preferred_domain_controller': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'owning_file_server_ext_id': 'owningFileServerExtId',
        'policy_ext_ids': 'policyExtIds',
        'file_server_state': 'fileServerState',
        'status': 'status',
        'primary_file_server_ext_id': 'primaryFileServerExtId',
        'target_file_server_ext_id': 'targetFileServerExtId',
        'primary_ad_credential': 'primaryAdCredential',
        'primary_dns': 'primaryDns',
        'primary_ad_preferred_domain_controller': 'primaryAdPreferredDomainController',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, owning_file_server_ext_id=None, policy_ext_ids=None, file_server_state=None, status=None, primary_file_server_ext_id=None, target_file_server_ext_id=None, primary_ad_credential=None, primary_dns=None, primary_ad_preferred_domain_controller=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """ProtectedFileServerPair - a model defined in Swagger
            \nProtected file server pair model.
        """
        BaseProtectedFileServerPair.__init__(self, primary_file_server_ext_id, target_file_server_ext_id, primary_ad_credential, primary_dns, primary_ad_preferred_domain_controller, ext_id, links, tenant_id, *args, **kwargs)
        self.__owning_file_server_ext_id = None
        self.__policy_ext_ids = None
        self.__file_server_state = None
        self.__status = None
        self.discriminator = None
        if owning_file_server_ext_id is not None:
            self.__owning_file_server_ext_id = owning_file_server_ext_id
        if policy_ext_ids is not None:
            self.__policy_ext_ids = policy_ext_ids
        if file_server_state is not None:
            self.__file_server_state = file_server_state
        if status is not None:
            self.__status = status

    def _initialize_object_type(self):
        return 'files.v4.config.ProtectedFileServerPair'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.ProtectedFileServerPair'


    @property
    def owning_file_server_ext_id(self):
        """`{ str }`
            \nThe {extId} of the owning file server. This is a read-only field
        """ # noqa: E501
        return self.__owning_file_server_ext_id

    @owning_file_server_ext_id.setter
    def owning_file_server_ext_id(self, owning_file_server_ext_id):
        if owning_file_server_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', owning_file_server_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `owning_file_server_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__owning_file_server_ext_id = owning_file_server_ext_id

    @property
    def policy_ext_ids(self):
        """`{ list[str] }`
            \nThe {extId} of the data protection policy.
        """ # noqa: E501
        return self.__policy_ext_ids

    @policy_ext_ids.setter
    def policy_ext_ids(self, policy_ext_ids):

        self.__policy_ext_ids = policy_ext_ids

    @property
    def file_server_state(self):
        """`{ files.v4.config.FileServerState }`
            
        """ # noqa: E501
        return self.__file_server_state

    @file_server_state.setter
    def file_server_state(self, file_server_state):

        self.__file_server_state = file_server_state

    @property
    def status(self):
        """`{ files.v4.config.ActionStatus }`
            
        """ # noqa: E501
        return self.__status

    @status.setter
    def status(self, status):

        self.__status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProtectedFileServerPair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProtectedFileServerPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

