{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "sampledb/v1"
    },
    {
      "name": "sampledb/v2"
    }
  ],
  "paths": {
    "/sampledb/v1/sample/{sha256}/children": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Get sample children submissions with search defined by query params (PUBLIC)",
        "description": "",
        "operationId": "getSampleChildren",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify parent sample",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Search by customer IDs",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Submission-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch sample info identified by SHA256. (PUBLIC)",
        "description": "",
        "operationId": "getSample",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample info",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sample-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/aggregated": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch sample aggregated info identified by SHA256. (PUBLIC)",
        "description": "",
        "operationId": "getSampleAggregated",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample aggregated info",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleAggregated-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/submission/{id}": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch submission info identified by id. (PUBLIC)",
        "description": "",
        "operationId": "getSubmissionByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Submission ID",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Submission-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/submission/search": {
      "post": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Search for submissions matching given search criteria (PUBLIC)",
        "description": "",
        "operationId": "searchMetaSubmissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubmissionMetaSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Submission-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/submission": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Search for submissions with defined by query params (PUBLIC)",
        "description": "",
        "operationId": "listSubmissionsBySampleID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample submissions",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Search by customer IDs",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Submission-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/tags": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch tags of sample which sample is identified by SHA256. (PUBLIC)",
        "description": "",
        "operationId": "getSampleTags",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample which tags belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleTag-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/sandbox": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch sandbox runs of sample which sample is identified by SHA256. (PUBLIC)",
        "description": "",
        "operationId": "getSandboxRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample which sandbox runs belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SandboxRun-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/download": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch and download sample by SHA256 (PUBLIC)",
        "description": "Download sample zip file by specified SHA256",
        "operationId": "getSampleDownload",
        "produces": [
          "application/zip",
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/sandbox/{runUUID}/procgraph": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch sandbox procgraph by sample SHA256 and id (PUBLIC)",
        "description": "Fetch sandbox procgraph by specified sample SHA256 and id",
        "operationId": "getSandboxProcgraph",
        "produces": [
          "image/*",
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample which sandbox procgraph belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "runUUID",
            "in": "path",
            "description": "Sandbox procgraph ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/{sha256}/sandbox/pcap": {
      "get": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Fetch and download sandbox pcap by sample SHA256 (PUBLIC)",
        "description": "Download sandbox pcap by specified sample SHA256",
        "operationId": "getSandboxPcap",
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "SHA256 to identify sample which sandbox pcap belongs to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample/search/evil": {
      "post": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Searches for evil samples. (PUBLIC)",
        "description": "",
        "operationId": "getEvilSamples",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EvilSampleSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Sample-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v1/sample": {
      "post": {
        "tags": [
          "sampledb/v1"
        ],
        "summary": "Submit a sample for analysis (PUBLIC)",
        "description": "",
        "operationId": "submit",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Sample submission request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SampleSubmissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Submission-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/analysis/{analysisID}": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetches the analysis for the sample with the given ID (DEV)",
        "description": "",
        "operationId": "getAnalysis",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to fetch the analysis from",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisID",
            "in": "path",
            "description": "ID of the analysis to fetch",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AnalysisResult-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/analysis": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Lists the analysis for the sample (DEV)",
        "description": "",
        "operationId": "listAnalysis",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to fetch the analysis from",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AnalysisResult-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Adds an analysis to a sample (DEV)",
        "description": "",
        "operationId": "addAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to add analysis result to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Add analysis request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnalysisAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AnalysisResult-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/analysis/{analysisID}/evidence": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Lists the evidence metadata for the analysis (DEV)",
        "description": "",
        "operationId": "listEvidence",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample the analysis is from",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisID",
            "in": "path",
            "description": "The ID of the analysis you want to list evidence from",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Evidence-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Adds evidence to an analysis (DEV)",
        "description": "",
        "operationId": "addEvidence",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample that holds the analysis",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisID",
            "in": "path",
            "description": "UUID of analysis to add evidence to",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Add evidence request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EvidenceAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Evidence-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/analysis/{analysisID}/evidence/{evidenceID}": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetches the evidence metadata for the analysis for the sample with the given ID (DEV)",
        "description": "",
        "operationId": "getEvidence",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to fetch the analysis from",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisID",
            "in": "path",
            "description": "ID of the analysis the evidence is for",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "evidenceID",
            "in": "path",
            "description": "ID of the evidence to fetch",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Evidence-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/analysis/{analysisID}/evidence/{evidenceID}/download": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Returns the evidence file. (DEV)",
        "description": "",
        "operationId": "getEvidenceData",
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample the analysis is from",
            "required": true,
            "type": "string"
          },
          {
            "name": "analysisID",
            "in": "path",
            "description": "The ID of the analysis you want to fetch evidence from",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "evidenceID",
            "in": "path",
            "description": "The ID of the evidence data you want to fetch",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/challenge": {
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Generate a new challenge for a sample. The solution of the challenge is SHA256(x) where x is 'length' bytes of data starting from 'offset' bytes into the sample file (INTERNAL)",
        "description": "",
        "operationId": "getUploadChallenge",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to get submission challenge for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleUploadChallengeResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The sample could not be found"
          },
          "412": {
            "description": "Validation error"
          },
          "422": {
            "description": "The sample file is too small. Upload the full sample and use the challenge token returned in that response as proof"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/classification": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetch all classifications for a sample (DEV)",
        "description": "",
        "operationId": "listClassifications",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of the sample",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of classifications to return",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The field on which to sort the classifications",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "-createdTimestamp"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-ClassificationResponse-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "An error occurred"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/job/{jobID}": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetch an analysis job (DEV)",
        "description": "",
        "operationId": "getJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "The ID of the job to fetch",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "put": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Update the state of an analysis job (DEV)",
        "description": "",
        "operationId": "updateJobState",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "The ID of the job to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update job request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "delete": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Request a job to be aborted (DEV)",
        "description": "",
        "operationId": "abortJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "The ID of the job to request to abort",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/job": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "List analysis jobs (DEV)",
        "description": "",
        "operationId": "listJobs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The fields to sort the results by. Prefix with '-' to sort descending",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "-enqueuedTimestamp",
              "enum": [
                "enqueuedTimestamp",
                "state",
                "startTimestamp",
                "endTimestamp",
                "-enqueuedTimestamp",
                "-state",
                "-startTimestamp",
                "-endTimestamp"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Only return jobs in either of the defined states",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "enqueued, executing",
              "enum": [
                "enqueued",
                "abortRequested",
                "aborted",
                "executing",
                "done",
                "timeout"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobResponse-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/job/{jobID}/task": {
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Register an analyzer task for a job (DEV)",
        "description": "",
        "operationId": "addJobTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "The ID of the job",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Job task request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobTaskAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobTaskResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/job/{jobID}/tasks": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "List analysis job tasks (DEV)",
        "description": "",
        "operationId": "listJobTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "The ID of the job to list tasks for",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The fields to sort the results by. Prefix with '-' to sort descending",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "analyzerName",
              "enum": [
                "analyzerName",
                "state",
                "enqueuedTimestamp",
                "startTimestamp",
                "endTimestamp",
                "-analyzerName",
                "-state",
                "-enqueuedTimestamp",
                "-startTimestamp",
                "-endTimestamp"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobTaskResponse-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/job/search": {
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Search for jobs matching the provided search criteria (DEV)",
        "description": "",
        "operationId": "searchJobs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Job search request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobResponse-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/job/{jobID}/task/{taskID}": {
      "put": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Update the state of an analysis task (DEV)",
        "description": "",
        "operationId": "updateJobTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobID",
            "in": "path",
            "description": "The ID of the job",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "The ID of the task",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Job task request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobTaskUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-JobTaskResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The job could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/link/{linkID}": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetches the link for the sample with the given ID (DEV)",
        "description": "",
        "operationId": "getLink",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to fetch the link from",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkID",
            "in": "path",
            "description": "ID of the link to fetch",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Link-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/link": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Lists the links for the sample (DEV)",
        "description": "",
        "operationId": "listLinks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to fetch the link from",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Link-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Adds an link to a sample (DEV)",
        "description": "",
        "operationId": "addLink",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to add link to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Add link request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LinkAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-Link-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Simple search for samples (DEV)",
        "description": "",
        "operationId": "simpleSearch",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "maximum": 10000,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "The fields to sort the results by. Prefix with '-' to sort descending",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "-sampleCreationTimestamp",
              "enum": [
                "sampleCreationTimestamp",
                "sampleSize",
                "sampleClassificationType",
                "lastUpdatedSubmission",
                "lastUpdatedAnalysis",
                "lastUpdatedLink"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "indexStartTimestamp",
            "in": "query",
            "description": "Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details",
            "required": false,
            "type": "string",
            "default": "now - 1 month"
          },
          {
            "name": "indexEndTimestamp",
            "in": "query",
            "description": "Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details",
            "required": false,
            "type": "string",
            "default": "now"
          },
          {
            "name": "keywords",
            "in": "query",
            "description": "A set of keywords to search for",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleMetaData-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Upload a new sample file (INTERNAL)",
        "description": "",
        "operationId": "addSample",
        "consumes": [
          "*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The sample file content",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleCompleteUploadResponse-single"
            }
          },
          "201": {
            "description": "The sample was created",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleCompleteUploadResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "An error occurred"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/search": {
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Advanced search for samples (DEV)",
        "description": "",
        "operationId": "advancedSearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The search critieras",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SampleSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleMetaData-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetch meta data about a sample file (INTERNAL)",
        "description": "",
        "operationId": "getSampleMetaData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of the sample",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SampleMetaData-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "An error occurred"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/raw": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Download a raw sample file. Warning: The file returned may be malicious. Take caution (INTERNAL)",
        "description": "",
        "operationId": "downloadRawSample",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of the sample",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "An error occurred"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/safe": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Download a zipped sample file, password protected with the password \"infected\". Warning: The zipped file may be malicious. Take caution (INTERNAL)",
        "description": "",
        "operationId": "downloadSafeSample",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of the sample",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "An error occurred"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/submission": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "List all the submissions for a sample (INTERNAL)",
        "description": "",
        "operationId": "listSubmissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of the sample to fetch submissions for",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of returned results",
            "required": false,
            "type": "integer",
            "default": 25,
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Skip a number of results",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SubmissionResponse-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The sample could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      },
      "post": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Add a new sample submission. Requires a challenge token. A challenge token is a solution to a challenge generated by the challenge endpoint (INTERNAL)",
        "description": "",
        "operationId": "addSubmission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of sample to add submission for",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Add submission request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubmissionAddRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SubmissionResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/sampledb/v2/sample/{sha256}/submission/{submissionID}": {
      "get": {
        "tags": [
          "sampledb/v2"
        ],
        "summary": "Fetch a submission for the sample with the given ID (INTERNAL)",
        "description": "",
        "operationId": "getSubmission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sha256",
            "in": "path",
            "description": "Sha256 of the sample the submission belongs to",
            "required": true,
            "type": "string"
          },
          {
            "name": "submissionID",
            "in": "path",
            "description": "The ID of the submission to fetch",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-SubmissionResponse-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "The sample could not be found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    }
  },
  "definitions": {
    "ChallengeTokenRequest": {
      "type": "object",
      "required": [
        "id",
        "sha256"
      ],
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The id of the challenge"
        },
        "sha256": {
          "type": "string",
          "position": 0,
          "description": "The challenge token"
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "ResultStash-Link-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "SampleUploadChallengeResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The id of the challenge"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The offset into the sample file from where to start calculating the hash"
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The number of bytes to process"
        }
      }
    },
    "SampleMetaData": {
      "type": "object",
      "properties": {
        "sha256": {
          "type": "string",
          "position": 0,
          "description": "The ID of the sample"
        },
        "sha1": {
          "type": "string",
          "position": 0,
          "description": "The SHA1 hash of the sample"
        },
        "md5": {
          "type": "string",
          "position": 0,
          "description": "The MD5 hash of the sample"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The size of the sample in bytes"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp when the sample was created"
        },
        "classification": {
          "position": 0,
          "description": "The latest classification for this sample",
          "$ref": "#/definitions/ClassificationResponse"
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "The flags set for this sample",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "exceededMaxSearchableSubmissions"
            ]
          }
        }
      }
    },
    "ResultStash-SandboxRun-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/SandboxRun"
          }
        }
      }
    },
    "AccessControl": {
      "type": "object",
      "properties": {
        "subject": {
          "position": 0,
          "description": "The subject that has been given explicit access",
          "$ref": "#/definitions/SubjectInfo"
        },
        "grantedByUser": {
          "position": 0,
          "description": "The user which granted the explicit access",
          "$ref": "#/definitions/UserInfo"
        },
        "grantedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The time at which the explicit access was granted"
        }
      }
    },
    "MetaDataSearchRequest": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "position": 0,
          "description": "The path (dot-notation) to the field to match the value against. May not contain spaces"
        },
        "value": {
          "type": "array",
          "position": 0,
          "description": "Values to match against the field pointed to by 'path'",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria should be excluded from search results"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria is a requirement"
        }
      }
    },
    "JobUpdateRequest": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "position": 0,
          "description": "The new state of the job",
          "enum": [
            "executing",
            "done",
            "aborted"
          ]
        }
      }
    },
    "JobTaskAddRequest": {
      "type": "object",
      "required": [
        "analyzerName"
      ],
      "properties": {
        "analyzerName": {
          "type": "string",
          "position": 0,
          "description": "The name of the analyzer => [a-zA-Z0-9_\\-\\.]*"
        },
        "state": {
          "type": "string",
          "position": 0,
          "description": "The initial state of the job task (default enqueued)",
          "enum": [
            "enqueued",
            "executing",
            "success",
            "failed"
          ]
        }
      }
    },
    "AnalysisDetectionRequest": {
      "type": "object",
      "required": [
        "assessment",
        "confidence",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the detection => [a-zA-Z0-9_\\-\\.]*"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "position": 0,
          "description": "An indicator for how confident the detection is in the assessment. A value from 0 to 1 (inclusive). The number is rounded to 3 fractional digits",
          "minimum": 0,
          "maximum": 1
        },
        "assessment": {
          "type": "string",
          "position": 0,
          "description": "An assessment of the sample according to this detection",
          "enum": [
            "benign",
            "unknown",
            "malicious"
          ]
        }
      }
    },
    "SandboxRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "sha256": {
          "type": "string",
          "position": 0,
          "description": "SHA256 of the sample"
        },
        "runUUID": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "Run UUID"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of start of the run"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestampl of end of the run"
        },
        "ip": {
          "type": "string",
          "position": 0,
          "description": "Client IP"
        },
        "version": {
          "type": "string",
          "position": 0,
          "description": "Version of the sandbox type"
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Duration of the run"
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "Type of the sandbox"
        },
        "result": {
          "type": "object",
          "position": 0,
          "description": "Result of sandbox run, data structure varies depends on type and version of sandbox, no fixed schema is assigned"
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "ID of the response object."
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the domain."
        }
      },
      "description": "SPI DomainInfo"
    },
    "ResultStash-SampleAggregated-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SampleAggregated"
        }
      }
    },
    "AnalysisDetectionResponse": {
      "type": "object",
      "required": [
        "assessment",
        "confidence",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the detection"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "position": 0,
          "description": "An indicator for how confident the detection is. A value from 0 to 1 (inclusive)"
        },
        "assessment": {
          "type": "string",
          "position": 0,
          "description": "An assessment of the sample according to this detection",
          "enum": [
            "benign",
            "unknown",
            "malicious"
          ]
        }
      }
    },
    "GroupInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/SubjectInfo"
        },
        {
          "type": "object",
          "properties": {},
          "description": "SPI GroupInfo"
        }
      ]
    },
    "ResultStash-SubmissionResponse-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/SubmissionResponse"
          }
        }
      }
    },
    "EvilSampleSearchCriteria": {
      "type": "object",
      "required": [
        "customerID",
        "tlp"
      ],
      "properties": {
        "customerID": {
          "type": "array",
          "position": 0,
          "description": "Set of customer IDs to limit samples result.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Set this value to set max number of results. (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Set this value to skip the first (offset) objects. By default, return result from first object. (default 0)",
          "minimum": 0,
          "default": 0
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Start of time search period for submission creation date. (default 24 hours before timestamp of request.)",
          "minimum": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "End of time search period for submission creation date. (default Timestamp of request.)",
          "minimum": 0
        },
        "tlp": {
          "type": "array",
          "position": 0,
          "description": "Set of TLPs to search for.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "WHITE",
              "GREEN",
              "AMBER",
              "RED"
            ]
          }
        }
      }
    },
    "ResultStash-Link-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Link"
        }
      }
    },
    "SubjectInfo": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object."
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "The subject's short name"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The subject's name"
        },
        "domain": {
          "position": 0,
          "description": "The subject's domain",
          "$ref": "#/definitions/DomainInfo"
        },
        "customer": {
          "position": 0,
          "description": "The customer the subject belongs to",
          "$ref": "#/definitions/CustomerInfo"
        }
      },
      "description": "SPI SubjectInfo"
    },
    "SampleSearchSubCriteriaRequest": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "A set of keywords to search for",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Restrict to search only in the selected keyword fields",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "all",
              "sha256",
              "submission",
              "analysis",
              "link",
              "classification"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Whether all or any (default) of the fields must match one or more of the keywords",
          "enum": [
            "all",
            "any"
          ]
        },
        "sha256": {
          "type": "array",
          "position": 0,
          "description": "Restrict to search only in the selected sample sha256 IDs",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "all",
              "sampleCreated",
              "classificationCreated",
              "submissionCreated",
              "submissionObserved",
              "analysisCreated",
              "linkCreated"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)",
          "enum": [
            "all",
            "any"
          ]
        },
        "classification": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for classifications",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ClassificationSearchRequest"
          }
        },
        "submission": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for submissions",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SubmissionSearchRequest"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Define what resources to apply the user criteria to. Defaults to 'all'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "all",
              "submittedByUser",
              "analysedByUser",
              "linkedByUser"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": " Whether all or any (default) of the fields must match the user criteria",
          "enum": [
            "all",
            "any"
          ]
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to samples containing submissions owned by certain customers",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "tlp": {
          "type": "array",
          "position": 0,
          "description": "A set of TLP criteria to apply to submissions, analyses, and links",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "white",
              "green",
              "amber",
              "red"
            ]
          }
        },
        "analysis": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for analysis",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AnalysisSearchRequest"
          }
        },
        "link": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for links",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/LinkSearchRequest"
          }
        },
        "verdict": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for verdicts",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/VerdictSearchRequest"
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Search sub criteria",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SampleSearchSubCriteriaRequest"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this sub-criteria should be excluded from search results. Defaults to false"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this sub-criteria is a requirement. Defaults to false"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details",
          "minimum": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details",
          "minimum": 0
        }
      }
    },
    "JobSearchRequest": {
      "type": "object",
      "properties": {
        "state": {
          "type": "array",
          "position": 0,
          "description": "Only return jobs in either of these states (default [enqueued, executing])",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "enqueued",
              "abortRequested",
              "aborted",
              "executing",
              "done",
              "timeout"
            ]
          }
        },
        "sampleSha256": {
          "type": "array",
          "position": 0,
          "description": "Only return jobs for these samples",
          "items": {
            "type": "string"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Only return jobs for these customers. Can be either customer shortname or ID",
          "items": {
            "type": "string"
          }
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "What time fields to use to limit the search",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "enqueuedTimestamp",
              "startTimestamp",
              "endTimestamp",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Whether all or any of the fields in timeFieldStrategy must fall within startTimestamp and endTimestamp",
          "enum": [
            "all",
            "any"
          ]
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Set this value to set max number of results. Setting limit to 0 means 'unlimited' (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Set this value to skip the first (offset) objects. By default, return result from first object. (default 0)",
          "minimum": 0,
          "default": 0
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "Specify sort ordering for returned jobs (default enqueuedTimestamp)",
          "items": {
            "type": "string",
            "enum": [
              "enqueuedTimestamp",
              "state",
              "startTimestamp",
              "endTimestamp",
              "-enqueuedTimestamp",
              "-state",
              "-startTimestamp",
              "-endTimestamp"
            ]
          }
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details"
        }
      }
    },
    "ResultStash-Sample-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Sample"
        }
      }
    },
    "ResultStash-JobTaskResponse-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/JobTaskResponse"
          }
        }
      }
    },
    "SampleAggregated": {
      "type": "object",
      "properties": {
        "sha256": {
          "type": "string"
        },
        "firstSubmittedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of the first submission"
        },
        "lastSubmittedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of the last submission"
        },
        "filenames": {
          "type": "array",
          "position": 0,
          "description": "Names of the files in the sample",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "parents": {
          "type": "array",
          "position": 0,
          "description": "Set of SHA256 found in PARENT_SHA256 metafield of submissions.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "totalSubmissions": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Total number of submissions for this sample"
        },
        "archives": {
          "type": "array",
          "position": 0,
          "description": "Set of SHA256 found in ARCHIVE metafield of submissions.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResultStash-SampleTag-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/SampleTag"
          }
        }
      }
    },
    "ResultStash-SubmissionResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SubmissionResponse"
        }
      }
    },
    "ResultStash-SampleCompleteUploadResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SampleCompleteUploadResponse"
        }
      }
    },
    "LinkAddRequest": {
      "type": "object",
      "required": [
        "reference",
        "tlp",
        "type",
        "userAgent"
      ],
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "The shortname or ID of customer the link belongs to"
        },
        "userAgent": {
          "position": 0,
          "description": "The user agent that created the link",
          "$ref": "#/definitions/UserAgentRequest"
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "The TLP level of the link",
          "enum": [
            "red",
            "amber",
            "green",
            "white"
          ]
        },
        "acl": {
          "type": "array",
          "position": 0,
          "description": "The shortname or IDs of users or groups that will be given explicit access",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "The nature of the link between the two samples",
          "enum": [
            "child",
            "downloads",
            "loads",
            "executes"
          ]
        },
        "reference": {
          "type": "string",
          "position": 0,
          "description": "The ID of the sample the link references"
        }
      }
    },
    "SubmissionSearchRequest": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to submissions with either of the file names defined",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "mimeType": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to submissions with either of the mime types defined",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "meta": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to submissions with either of the meta data properties defined",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetaDataSearchRequest"
          }
        },
        "userAgent": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to submissions with either of the user agents defined",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/UserAgent"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria should be excluded from search results. Defaults to false"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria is a requirement. Defaults to false"
        }
      }
    },
    "ResultStash-Submission-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Submission"
        }
      }
    },
    "SampleTag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "sha256": {
          "type": "string",
          "position": 0,
          "description": "SHA256 of associated sample"
        },
        "producer": {
          "type": "string",
          "position": 0,
          "description": "Antivirus vendor"
        },
        "producerMeta": {
          "type": "string",
          "position": 0,
          "description": "Engine and update version"
        },
        "value": {
          "type": "string",
          "position": 0,
          "description": "Antivirus signature"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of creation of the tag"
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object."
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the customer."
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Shortname of the customer."
        },
        "domain": {
          "position": 0,
          "description": "Domain that this customer belongs to.",
          "$ref": "#/definitions/DomainInfo"
        }
      },
      "description": "SPI CustomerInfo"
    },
    "ChallengeTokenResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The id of the challenge"
        },
        "sha256": {
          "type": "string",
          "position": 0,
          "description": "The challenge token"
        }
      }
    },
    "SubmissionResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "sampleSha256": {
          "type": "string",
          "position": 0,
          "description": "The sample this submission belongs to"
        },
        "fileName": {
          "type": "string",
          "position": 0,
          "description": "The filename of the sample"
        },
        "customer": {
          "position": 0,
          "description": "Information about the customer the submission belongs to",
          "$ref": "#/definitions/CustomerInfo"
        },
        "observedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp for when the sample was observed"
        },
        "submittedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp for when the submission was added"
        },
        "mimeType": {
          "type": "string",
          "position": 0,
          "description": "The sample mime type"
        },
        "metaData": {
          "type": "object",
          "position": 0,
          "description": "Meta data about the sample",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "TLP color of the submission",
          "enum": [
            "red",
            "amber",
            "green",
            "white"
          ]
        },
        "acl": {
          "type": "array",
          "position": 0,
          "description": "List of access controls that describe explicit access given to users or groups for this submission",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AccessControl"
          }
        },
        "userAgent": {
          "position": 0,
          "description": "User agent for the sample",
          "$ref": "#/definitions/UserAgent"
        }
      }
    },
    "ResultStash-SampleMetaData-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SampleMetaData"
        }
      }
    },
    "UserAgentRequest": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the user agent => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "version": {
          "type": "string",
          "position": 0,
          "description": "The version of the user agent, should be updated for each code or configuration change => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        }
      }
    },
    "SampleSearchRequest": {
      "type": "object",
      "properties": {
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "A set of keywords to search for",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Restrict to search only in the selected keyword fields",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "all",
              "sha256",
              "submission",
              "analysis",
              "link",
              "classification"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Whether all or any (default) of the fields must match one or more of the keywords",
          "enum": [
            "all",
            "any"
          ]
        },
        "sha256": {
          "type": "array",
          "position": 0,
          "description": "Restrict to search only in the selected sample sha256 IDs",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search by timestamp (indicated by startTimestamp and endTimestamp) to these fields. Default is 'all'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "all",
              "sampleCreated",
              "classificationCreated",
              "submissionCreated",
              "submissionObserved",
              "analysisCreated",
              "linkCreated"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Whether all or any (default) of the fields must match the time period (indicated by startTimestamp and endTimestamp)",
          "enum": [
            "all",
            "any"
          ]
        },
        "classification": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for classifications",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ClassificationSearchRequest"
          }
        },
        "submission": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for submissions",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SubmissionSearchRequest"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to samples containing resources (indicated by userFieldStrategy) submitted by users",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Define what resources to apply the user criteria to. Defaults to 'all'",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "all",
              "submittedByUser",
              "analysedByUser",
              "linkedByUser"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": " Whether all or any (default) of the fields must match the user criteria",
          "enum": [
            "all",
            "any"
          ]
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to samples containing submissions owned by certain customers",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "tlp": {
          "type": "array",
          "position": 0,
          "description": "A set of TLP criteria to apply to submissions, analyses, and links",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "white",
              "green",
              "amber",
              "red"
            ]
          }
        },
        "analysis": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for analysis",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AnalysisSearchRequest"
          }
        },
        "link": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for links",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/LinkSearchRequest"
          }
        },
        "verdict": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for verdicts",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/VerdictSearchRequest"
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Search sub criteria",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SampleSearchSubCriteriaRequest"
          }
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit the number of search results (default 25)",
          "default": 25
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "Specify sort ordering for returned samples (default -sampleCreationTimestamp)",
          "items": {
            "type": "string",
            "enum": [
              "sampleCreationTimestamp",
              "sampleSize",
              "sampleClassificationType",
              "lastAddedSubmission",
              "lastAddedAnalysis",
              "lastAddedLink",
              "weightedScore",
              "-sampleCreationTimestamp",
              "-sampleSize",
              "-sampleClassificationType",
              "-lastAddedSubmission",
              "-lastAddedAnalysis",
              "-lastAddedLink",
              "-weightedScore"
            ]
          }
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict the search to resources (indicated by timeFieldStrategy) timestamped after this timestamp. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details",
          "minimum": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict the search to resources (indicated by timeFieldStrategy) timestamped before this timestamp.Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details",
          "minimum": 0
        },
        "indexStartTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict search to data after this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details (default now - 1 month)",
          "minimum": 0
        },
        "indexEndTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict search to data before this time. Timestamps can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details (default now)",
          "minimum": 0
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "sampleID": {
          "type": "string",
          "position": 0,
          "description": "The ID of the sample this link belongs to"
        },
        "createdByUser": {
          "position": 0,
          "description": "The user that created the link",
          "$ref": "#/definitions/UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the link was created"
        },
        "customer": {
          "position": 0,
          "description": "The customer the link belongs to",
          "$ref": "#/definitions/CustomerInfo"
        },
        "userAgent": {
          "position": 0,
          "description": "The user agent that created the link",
          "$ref": "#/definitions/UserAgent"
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "The TLP level of the link",
          "enum": [
            "red",
            "amber",
            "green",
            "white"
          ]
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "The nature of the link between the two samples",
          "enum": [
            "child",
            "downloads",
            "loads",
            "executes"
          ]
        },
        "reference": {
          "position": 0,
          "description": "The ID of the sample the link references",
          "$ref": "#/definitions/SampleInfo"
        },
        "acl": {
          "type": "array",
          "position": 0,
          "description": "List of users given explicit access",
          "items": {
            "$ref": "#/definitions/AccessControl"
          }
        }
      }
    },
    "ResultStash-JobResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/JobResponse"
        }
      }
    },
    "EvidenceAddRequest": {
      "type": "object",
      "required": [
        "evidence",
        "mimeType",
        "name"
      ],
      "properties": {
        "evidence": {
          "type": "string",
          "position": 0,
          "description": "Base64 encoded evidence",
          "minLength": 1,
          "maxLength": 10000000
        },
        "mimeType": {
          "type": "string",
          "position": 0,
          "description": "The mimeType of the evidence"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name given to the evidence"
        }
      }
    },
    "ClassificationSearchRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "array",
          "position": 0,
          "description": "Criteria for the version field of a classification",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "array",
          "position": 0,
          "description": "Criteria for the type field of a classification",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "superType": {
          "type": "array",
          "position": 0,
          "description": "Criteria for the superType field of a classification",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "arch": {
          "type": "array",
          "position": 0,
          "description": "Criteria for the arch field of a classification",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "platform": {
          "type": "array",
          "position": 0,
          "description": "Criteria for the platform field of a classification",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "meta": {
          "type": "array",
          "position": 0,
          "description": "Criteria for the meta field of a classification",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetaDataSearchRequest"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria should be excluded from search results"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria is a requirement"
        }
      }
    },
    "JobResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "customer": {
          "position": 0,
          "description": "Information about the customer the job belongs to",
          "$ref": "#/definitions/CustomerInfo"
        },
        "analysedSample": {
          "position": 0,
          "description": "Information about the sample the job is targeting",
          "$ref": "#/definitions/SampleInfo"
        },
        "enqueuedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp for when the job was enqueued"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp for when the job was started"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp for when the job was ended"
        },
        "state": {
          "type": "string",
          "position": 0,
          "description": "The current state of the job",
          "enum": [
            "enqueued",
            "abortRequested",
            "aborted",
            "executing",
            "done",
            "timeout"
          ]
        }
      }
    },
    "UserInfo": {
      "allOf": [
        {
          "$ref": "#/definitions/SubjectInfo"
        },
        {
          "type": "object",
          "properties": {},
          "description": "SPI UserInfo"
        }
      ],
      "description": "SPI UserInfo"
    },
    "SubmissionAddRequest": {
      "type": "object",
      "required": [
        "challengeToken",
        "fileName",
        "userAgent"
      ],
      "properties": {
        "fileName": {
          "type": "string",
          "position": 0,
          "description": "The filename of the sample"
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "The shortname or ID of customer the submission belongs to. Default value is the currernt user's customer"
        },
        "observedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp of when the sample was observed. Defaults to the current time"
        },
        "mimeType": {
          "type": "string",
          "position": 0,
          "description": "The sample mime type (default application/octet-stream)"
        },
        "metaData": {
          "type": "object",
          "position": 0,
          "description": "Meta data about the sample",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "TLP color of the submission. Defaults to amber (default amber)",
          "enum": [
            "red",
            "amber",
            "green",
            "white"
          ]
        },
        "acl": {
          "type": "array",
          "position": 0,
          "description": "List of user IDs or shortnames that are given explicit access to the submission",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userAgent": {
          "position": 0,
          "description": "User agent for the sample",
          "$ref": "#/definitions/UserAgentRequest"
        },
        "challengeToken": {
          "position": 0,
          "description": "A solved challenge used to verify access to the sample. To obtain a challenge token calculate the sha256 hash of a part of the sample file. Offset, length and challenge id can be genereated in the challenge API endpoint.",
          "$ref": "#/definitions/ChallengeTokenRequest"
        }
      }
    },
    "SampleInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "position": 0,
          "description": "The ID of the sample"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The size of the sample in bytes"
        }
      }
    },
    "AnalysisAddRequest": {
      "type": "object",
      "required": [
        "analysisResult",
        "customer",
        "tlp",
        "userAgent"
      ],
      "properties": {
        "analysisResult": {
          "type": "object",
          "description": "The result of the analysis as a JSON object"
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "The shortname or ID of customer the analysis belongs to"
        },
        "userAgent": {
          "position": 0,
          "description": "The user agent that created the analysis",
          "$ref": "#/definitions/UserAgentRequest"
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "The TLP level of the analysis",
          "enum": [
            "red",
            "amber",
            "green",
            "white"
          ]
        },
        "acl": {
          "type": "array",
          "position": 0,
          "description": "The shortname or IDs of users or groups that will be given explicit access",
          "items": {
            "type": "string"
          }
        },
        "jobID": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The ID of the job that initiated the analysis"
        },
        "triggeredDetections": {
          "type": "array",
          "position": 0,
          "description": "The triggered detections for this analysis",
          "items": {
            "$ref": "#/definitions/AnalysisDetectionRequest"
          }
        },
        "possibleDetections": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The maximum number of possible detections"
        },
        "analyzerName": {
          "type": "string",
          "position": 0,
          "description": "Name of the analyzer that produced this result => [a-zA-Z0-9_\\-\\.]*"
        },
        "verdictStatusOverride": {
          "type": "string",
          "position": 0,
          "description": "Can be set to signify that the worker posting the analysis result is 100% certain that the sample is malicious or benign. The verdict engine will consider this field and use as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead",
          "enum": [
            "malicious",
            "benign"
          ]
        }
      }
    },
    "ResultStash-AnalysisResult-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/AnalysisResult"
        }
      }
    },
    "ResultStash-SampleUploadChallengeResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/SampleUploadChallengeResponse"
        }
      }
    },
    "ResultStash-SampleMetaData-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/SampleMetaData"
          }
        }
      }
    },
    "ResultStash-Sample-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Sample"
          }
        }
      }
    },
    "UserAgent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the user agent"
        },
        "version": {
          "type": "string",
          "position": 0,
          "description": "The version of the user agent"
        }
      }
    },
    "Evidence": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "createdByUser": {
          "position": 0,
          "description": "The user that created the evidence",
          "$ref": "#/definitions/UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the analysis was created"
        },
        "mimeType": {
          "type": "string",
          "position": 0,
          "description": "The MIME type of the evidence"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the evidence"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The size of the evidence in bytes"
        }
      }
    },
    "ClassificationResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "position": 0,
          "description": "The version of the classifier used to generate this classification"
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "The type of file for the sample"
        },
        "superType": {
          "type": "string",
          "position": 0,
          "description": "The super type of file for the sample"
        },
        "arch": {
          "type": "string",
          "position": 0,
          "description": "The architecture for the sample"
        },
        "platform": {
          "type": "string",
          "position": 0,
          "description": "The platform for the sample"
        },
        "meta": {
          "type": "object",
          "position": 0,
          "description": "Meta data for the sample",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "AnalysisInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "analyzerName": {
          "type": "string",
          "position": 0,
          "description": "Name of the analyzer that produced this result"
        }
      }
    },
    "SampleSubmissionRequest": {
      "type": "object",
      "required": [
        "customer",
        "data",
        "fileName",
        "tlp"
      ],
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "Customer ID or short name of the customer to register this sample to."
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "TLP level of the sample.",
          "enum": [
            "WHITE",
            "GREEN",
            "AMBER",
            "RED"
          ]
        },
        "data": {
          "type": "string",
          "position": 0,
          "description": "The sample data."
        },
        "enableSandboxAnalysis": {
          "type": "boolean",
          "position": 0,
          "description": "Enable sandbox analysis of sample. (default true)",
          "default": true
        },
        "allowSandboxInternetAccess": {
          "type": "boolean",
          "position": 0,
          "description": "Allow internet access to sandbox. (default false)",
          "default": false
        },
        "enableAntivirusScan": {
          "type": "boolean",
          "position": 0,
          "description": "Enable antivirus scan of sample. (default true)",
          "default": true
        },
        "clientName": {
          "type": "string",
          "position": 0,
          "description": "Name of client application. => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]\"\\'_/\\\\,\\*\\+\\#:@!?;=]*"
        },
        "fileName": {
          "type": "string",
          "position": 0,
          "description": "Name of submitted file. => Sanitize by regex [a-zA-Z0-9\u00c5\u00e5\u00d8\u00f8\u00c6\u00e6_\\-\\. ]*"
        }
      }
    },
    "ResultStash-Evidence-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/Evidence"
        }
      }
    },
    "Submission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "sha256": {
          "type": "string",
          "position": 0,
          "description": "SHA256 of the sample"
        },
        "customerInfo": {
          "position": 0,
          "description": "Customer owning the sample",
          "$ref": "#/definitions/CustomerInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of creation of the submission"
        },
        "owner": {
          "type": "string",
          "position": 0,
          "description": "Owner of the submission"
        },
        "properties": {
          "type": "object",
          "position": 0,
          "description": "Metadata of the submission",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "TLP color of the submission",
          "readOnly": true,
          "enum": [
            "WHITE",
            "GREEN",
            "AMBER",
            "RED"
          ]
        }
      }
    },
    "SubmissionMetaSearchCriteria": {
      "type": "object",
      "required": [
        "customerID",
        "keywords",
        "tlp"
      ],
      "properties": {
        "customerID": {
          "type": "array",
          "position": 0,
          "description": "Set of customer IDs containing submissions. If not specified, search will be performed against all accessible customers.",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "tlp": {
          "type": "array",
          "position": 0,
          "description": "Set of TLPs to search for. If not specified, search will be performed against all TLPs (WHITE, GREEN, AMBER, RED).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "WHITE",
              "GREEN",
              "AMBER",
              "RED"
            ]
          }
        },
        "includeAnonymousResults": {
          "type": "boolean",
          "position": 0,
          "description": "Whether include anonymous results (default true)",
          "default": true
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "A set of keywords matched against the metafields of the submission.",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 1
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Start of time search period for submission creation date. (default 7 days before timestamp of request.)",
          "minimum": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "End of time search period for submission creation date. (default Timestamp of request.)",
          "minimum": 0
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Set this value to set max number of results. (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Set this value to skip the first (offset) objects. By default, return result from first object. (default 0)",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "Sample": {
      "type": "object",
      "properties": {
        "sha256": {
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "position": 0,
          "description": "Mimetype of the sample"
        },
        "entropy": {
          "type": "number",
          "format": "double",
          "position": 0,
          "description": "Entropy of the sample"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Timestamp of creation of the sample"
        },
        "ssDeep": {
          "type": "string",
          "position": 0,
          "description": "ssDeep of the sample"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Size of the sample"
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "TLP color of the sample",
          "readOnly": true,
          "enum": [
            "WHITE",
            "GREEN",
            "AMBER",
            "RED"
          ]
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "Flags assigned to the object.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "EVIL",
              "SAFE"
            ]
          }
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "ResultStash-AnalysisResult-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/AnalysisResult"
          }
        }
      }
    },
    "ResultStash-Evidence-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Evidence"
          }
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResultStash-JobTaskResponse-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/JobTaskResponse"
        }
      }
    },
    "AnalysisResult": {
      "type": "object",
      "properties": {
        "analysisResult": {
          "type": "object",
          "description": "The result of the analysis"
        },
        "sampleID": {
          "type": "string",
          "position": 0,
          "description": "The ID of the sample the analysis is for"
        },
        "analysisID": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The ID of the analysis"
        },
        "createdByUser": {
          "position": 0,
          "description": "The user that created the analysis",
          "$ref": "#/definitions/UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the analysis was created"
        },
        "customer": {
          "position": 0,
          "description": "The customer the analysis belongs to",
          "$ref": "#/definitions/CustomerInfo"
        },
        "userAgent": {
          "position": 0,
          "description": "The user agent that created the analysis",
          "$ref": "#/definitions/UserAgent"
        },
        "tlp": {
          "type": "string",
          "position": 0,
          "description": "The TLP level of the analysis",
          "enum": [
            "red",
            "amber",
            "green",
            "white"
          ]
        },
        "acl": {
          "type": "array",
          "position": 0,
          "description": "List of users given explicit access",
          "items": {
            "$ref": "#/definitions/AccessControl"
          }
        },
        "jobID": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The ID of the job that initiated the analysis"
        },
        "triggeredDetections": {
          "type": "array",
          "position": 0,
          "description": "The triggered detections for this analysis",
          "items": {
            "$ref": "#/definitions/AnalysisDetectionResponse"
          }
        },
        "possibleDetections": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The maximum number of possible detections"
        },
        "analyzerName": {
          "type": "string",
          "position": 0,
          "description": "Name of the analyzer that produced this result"
        },
        "verdictStatusOverride": {
          "type": "string",
          "position": 0,
          "description": "Signifies that the worker posting the analysis result was 100% certain that the sample is malicious or benign. The verdict engine considers this field and uses it as an override for the verdict status. If there are contradicting overrides, the verdict engine will set the verdict status to 'unknown' instead",
          "enum": [
            "malicious",
            "benign"
          ]
        }
      }
    },
    "JobTaskUpdateRequest": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "analysisID": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "The ID of the analysis produced by this task. Must be set when updating the state to 'success'"
        },
        "state": {
          "type": "string",
          "position": 0,
          "description": "The new state of the job task",
          "enum": [
            "executing",
            "success",
            "failed"
          ]
        },
        "message": {
          "type": "string",
          "position": 0,
          "description": "A message related to the execution of the task"
        }
      }
    },
    "ResultStash-JobResponse-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/JobResponse"
          }
        }
      }
    },
    "LinkSearchRequest": {
      "type": "object",
      "properties": {
        "userAgent": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to link with either of the user agents defined",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/UserAgent"
          }
        },
        "linkType": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to links of a certain type",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "child",
              "downloads",
              "loads",
              "executes"
            ]
          }
        },
        "reference": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search by the sample sha256 ID a link is referencing",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria should be excluded from search results. Defaults to false"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria is a requirement. Defaults to false"
        }
      }
    },
    "VerdictSearchRequest": {
      "type": "object",
      "properties": {
        "status": {
          "type": "array",
          "position": 0,
          "description": "Search criteria for verdict statuses",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "unknown",
              "malicious",
              "benign",
              "noFindings"
            ]
          }
        },
        "minimumVerdictScore": {
          "type": "number",
          "format": "float",
          "position": 0,
          "description": "Restrict the search to samples where the verdict score is at least this big"
        },
        "maximumVerdictScore": {
          "type": "number",
          "format": "float",
          "position": 0,
          "description": "Restrict the search to samples where the verdict score is less than this value"
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria should be excluded from search results"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria is a requirement"
        }
      }
    },
    "ResultStash-ClassificationResponse-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/ClassificationResponse"
          }
        }
      }
    },
    "SampleCompleteUploadResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean",
          "position": 0,
          "description": "Whether the sample already existed"
        },
        "sample": {
          "position": 0,
          "description": "The sample which was uploaded",
          "$ref": "#/definitions/SampleInfo"
        },
        "challenge": {
          "position": 0,
          "description": "The sample challenge token for this upload",
          "$ref": "#/definitions/ChallengeTokenResponse"
        }
      }
    },
    "JobTaskResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "position": 0,
          "description": "ID of the response object."
        },
        "analyzerName": {
          "type": "string",
          "position": 0,
          "description": "The name of the analyzer"
        },
        "analysis": {
          "position": 0,
          "description": "The analysis produced by this task",
          "$ref": "#/definitions/AnalysisInfo"
        },
        "state": {
          "type": "string",
          "position": 0,
          "description": "The state the task is currently in",
          "enum": [
            "enqueued",
            "executing",
            "success",
            "failed"
          ]
        },
        "enqueuedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp when the task was enqueued"
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp when the task was started"
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The timestamp when the task was completed"
        },
        "message": {
          "type": "string",
          "position": 0,
          "description": "A message related to the execution of this task"
        }
      }
    },
    "AnalysisSearchRequest": {
      "type": "object",
      "properties": {
        "userAgent": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to analysis with either of the user agents defined",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/UserAgent"
          }
        },
        "analysisResult": {
          "type": "array",
          "position": 0,
          "description": "Restrict the search to analyses with either of the meta data properties defined",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MetaDataSearchRequest"
          }
        },
        "exclude": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria should be excluded from search results. Defaults to false"
        },
        "required": {
          "type": "boolean",
          "position": 0,
          "description": "Whether documents matching this criteria is a requirement. Defaults to false"
        }
      }
    },
    "ResultStash-Submission-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/Submission"
          }
        }
      }
    }
  }
}