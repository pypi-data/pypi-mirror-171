# coding: utf-8


"""
IGNORE:
    Nutanix Lcm Versioned APIs

    Manage Infrastructure, Software and Firmware Upgrades.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class LcmImageFile(object):
    """LcmImageFile - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'global_catalog_item_uuid': 'str',
        'name': 'str',
        'size_bytes': 'int',
        'nfs_path': 'str',
        'shasum': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'global_catalog_item_uuid': 'globalCatalogItemUuid',
        'name': 'name',
        'size_bytes': 'sizeBytes',
        'nfs_path': 'nfsPath',
        'shasum': 'shasum',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, global_catalog_item_uuid=None, name=None, size_bytes=None, nfs_path=None, shasum=None, *args, **kwargs):  # noqa: E501
        """LcmImageFile - a model defined in Swagger
            \nDescription of LCM image file
        """
        self.__global_catalog_item_uuid = None
        self.__name = None
        self.__size_bytes = None
        self.__nfs_path = None
        self.__shasum = None
        self.discriminator = None
        if global_catalog_item_uuid is not None:
            self.__global_catalog_item_uuid = global_catalog_item_uuid
        if name is not None:
            self.__name = name
        if size_bytes is not None:
            self.__size_bytes = size_bytes
        if nfs_path is not None:
            self.__nfs_path = nfs_path
        if shasum is not None:
            self.__shasum = shasum
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'lcm.v4.resources.LcmImageFile'

    def _initialize_fq_object_type(self):
        return 'lcm.v4.r0.a1.resources.LcmImageFile'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def global_catalog_item_uuid(self):
        """`{ str }`
            \nImage file global catalog item UUID.
        """ # noqa: E501
        return self.__global_catalog_item_uuid

    @global_catalog_item_uuid.setter
    def global_catalog_item_uuid(self, global_catalog_item_uuid):
        if global_catalog_item_uuid is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', global_catalog_item_uuid):  # noqa: E501
            raise ValueError(r"Invalid value for `global_catalog_item_uuid`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__global_catalog_item_uuid = global_catalog_item_uuid

    @property
    def name(self):
        """`{ str }`
            \nLCM image file name
        """ # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def size_bytes(self):
        """`{ int }`
            \nLCM image file size
        """ # noqa: E501
        return self.__size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):

        self.__size_bytes = size_bytes

    @property
    def nfs_path(self):
        """`{ str }`
            \nNFS path for the LCM image
        """ # noqa: E501
        return self.__nfs_path

    @nfs_path.setter
    def nfs_path(self, nfs_path):

        self.__nfs_path = nfs_path

    @property
    def shasum(self):
        """`{ str }`
            \nLCM image SHA
        """ # noqa: E501
        return self.__shasum

    @shasum.setter
    def shasum(self, shasum):

        self.__shasum = shasum

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LcmImageFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LcmImageFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

