Metadata-Version: 2.1
Name: pygwb
Version: 0.1.0
Summary: Lighweight python stochastic GWB analysis pipeline
Home-page: https://git.ligo.org/pygwb/pygwb
Author: Arianna Renzini, Sylvia Biscoveanu, Shivaraj Khandasamy, Kamiel Janssens, Max Lalleman, Katarina Martinovic, Andrew Matas, Patrick Meyers, Alba Romero, Colm Talbot, Leo Tsukada, Kevin Turbang
Author-email: arianna.renzini@ligo.org
License: MIT
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: matplotlib
Requires-Dist: scipy (==1.8.0)
Requires-Dist: bilby
Requires-Dist: gwpy
Requires-Dist: astropy
Requires-Dist: lalsuite
Requires-Dist: loguru
Requires-Dist: json5
Requires-Dist: jinja2 (==3.0.3)

[![pipeline status](https://git.ligo.org/pygwb/pygwb/badges/master/pipeline.svg)](https://git.ligo.org/pygwb/pygwb/-/pipelines)
[![coverage report](https://git.ligo.org/pygwb/pygwb/badges/master/coverage.svg)](https://git.ligo.org/pygwb/pygwb/-/commits/master)

# pygwb

[**Documentation**](https://pygwb.docs.ligo.org/pygwb/)

## Installation instructions

* Everything needed is in igwn conda environment
https://computing.docs.ligo.org/conda/

* More precisely what you need is
  * `numpy`
  * `scipy`
  * `matplotlib`
  * `corner`
  * `gwpy`
  * `bilby`

  ## Modules

  The code is currently structured into many small modules.

  * `pre-processing.py` applies initial data-conditioning steps (high-pass filter and downsampling) on data from individual detector. Also supports importing simualted data.
  * `spectral.py` calculated CSDs and PSDs for each segment in a job (a coincident time segment of a pair of detectors)
  * `postprocessing.py` combines the cross-correlation spectrograms into a final spectrum.
  * `pe.py` defines classes to perform pe with bilby for various models.
  * `constants.py` contains numerical values of constants used throughout the code.
     Constants should never be redefined elsewhere.
  * `util.py` contains miscellaneous useful classes and functionality.
