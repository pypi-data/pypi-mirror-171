# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.config.Ad import Ad  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.Ldap import Ldap  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.LocalDomain import LocalDomain  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.NfsVersion import NfsVersion  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class NameServiceSpec(object):
    """NameServiceSpec - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'ad_domain': 'files.v4.config.Ad',
        'ldap_domain': 'files.v4.config.Ldap',
        'local_domain': 'files.v4.config.LocalDomain',
        'nfs_version': 'files.v4.config.NfsVersion',
        'nfs_v4_domain': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ad_domain': 'adDomain',
        'ldap_domain': 'ldapDomain',
        'local_domain': 'localDomain',
        'nfs_version': 'nfsVersion',
        'nfs_v4_domain': 'nfsV4Domain',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ad_domain=None, ldap_domain=None, local_domain=None, nfs_version=None, nfs_v4_domain=None, *args, **kwargs):  # noqa: E501
        """NameServiceSpec - a model defined in Swagger
            \nConfigure the name services model.
        """
        self.__ad_domain = None
        self.__ldap_domain = None
        self.__local_domain = None
        self.__nfs_version = None
        self.__nfs_v4_domain = None
        self.discriminator = None
        if ad_domain is not None:
            self.__ad_domain = ad_domain
        if ldap_domain is not None:
            self.__ldap_domain = ldap_domain
        if local_domain is not None:
            self.__local_domain = local_domain
        if nfs_version is not None:
            self.__nfs_version = nfs_version
        if nfs_v4_domain is not None:
            self.__nfs_v4_domain = nfs_v4_domain
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.NameServiceSpec'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.NameServiceSpec'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ad_domain(self):
        """`{ files.v4.config.Ad }`
            
        """ # noqa: E501
        return self.__ad_domain

    @ad_domain.setter
    def ad_domain(self, ad_domain):

        self.__ad_domain = ad_domain

    @property
    def ldap_domain(self):
        """`{ files.v4.config.Ldap }`
            
        """ # noqa: E501
        return self.__ldap_domain

    @ldap_domain.setter
    def ldap_domain(self, ldap_domain):

        self.__ldap_domain = ldap_domain

    @property
    def local_domain(self):
        """`{ files.v4.config.LocalDomain }`
            
        """ # noqa: E501
        return self.__local_domain

    @local_domain.setter
    def local_domain(self, local_domain):

        self.__local_domain = local_domain

    @property
    def nfs_version(self):
        """`{ files.v4.config.NfsVersion }`
            
        """ # noqa: E501
        return self.__nfs_version

    @nfs_version.setter
    def nfs_version(self, nfs_version):

        self.__nfs_version = nfs_version

    @property
    def nfs_v4_domain(self):
        """`{ str }`
            \nNFS V4 domain associated with the file server.
        """ # noqa: E501
        return self.__nfs_v4_domain

    @nfs_v4_domain.setter
    def nfs_v4_domain(self, nfs_v4_domain):

        self.__nfs_v4_domain = nfs_v4_domain

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NameServiceSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NameServiceSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

