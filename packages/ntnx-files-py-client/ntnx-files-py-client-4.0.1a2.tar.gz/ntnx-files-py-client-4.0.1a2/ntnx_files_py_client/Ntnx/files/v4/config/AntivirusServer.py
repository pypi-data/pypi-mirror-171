# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.config.IPAddressOrFQDN import IPAddressOrFQDN  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.files.v4.config.ConnectionStatus import ConnectionStatus  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class AntivirusServer(ExternalizableAbstractModel):
    """AntivirusServer - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'description': 'str',
        'address': 'common.v1.config.IPAddressOrFQDN',
        'port': 'int',
        'connection_status': 'files.v4.config.ConnectionStatus',
        'enable': 'bool',
        'is_enable': 'bool',
        'partner': 'str',
        'icap_service_name': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'description': 'description',
        'address': 'address',
        'port': 'port',
        'connection_status': 'connectionStatus',
        'enable': 'enable',
        'is_enable': 'isEnable',
        'partner': 'partner',
        'icap_service_name': 'icapServiceName',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, description=None, address=None, port=None, connection_status=None, enable=None, is_enable=None, partner=None, icap_service_name=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        """AntivirusServer - a model defined in Swagger
            \nAntivirus server model
        """
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__description = None
        self.__address = None
        self.__port = None
        self.__connection_status = None
        self.__enable = None
        self.__is_enable = None
        self.__partner = None
        self.__icap_service_name = None
        self.discriminator = None
        if description is not None:
            self.__description = description
        self.__address = address
        self.__port = port
        if connection_status is not None:
            self.__connection_status = connection_status
        if enable is not None:
            self.__enable = enable
        if is_enable is not None:
            self.__is_enable = is_enable
        if partner is not None:
            self.__partner = partner
        if icap_service_name is not None:
            self.__icap_service_name = icap_service_name

    def _initialize_object_type(self):
        return 'files.v4.config.AntivirusServer'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.AntivirusServer'


    @property
    def description(self):
        """`{ str }`
            \nAntivirus server description
        """ # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 180:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `180`")  # noqa: E501

        self.__description = description

    @property
    def address(self):
        """`{ common.v1.config.IPAddressOrFQDN }`
            
        """ # noqa: E501
        return self.__address

    @address.setter
    def address(self, address):
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self.__address = address

    @property
    def port(self):
        """`{ int }`
            \nAntivirus server port
        """ # noqa: E501
        return self.__port

    @port.setter
    def port(self, port):
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501
        if port is not None and port < 0:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__port = port

    @property
    def connection_status(self):
        """`{ files.v4.config.ConnectionStatus }`
            
        """ # noqa: E501
        return self.__connection_status

    @connection_status.setter
    def connection_status(self, connection_status):

        self.__connection_status = connection_status

    @property
    def enable(self):
        """`{ bool }`
            \nThis field indicates if the antivirus server is enabled. This is a read-only field. This field will be deprecated.
        """ # noqa: E501
        return self.__enable

    @enable.setter
    def enable(self, enable):

        self.__enable = enable

    @property
    def is_enable(self):
        """`{ bool }`
            \nThis field indicates if the antivirus server is enabled. This is a read-only field.
        """ # noqa: E501
        return self.__is_enable

    @is_enable.setter
    def is_enable(self, is_enable):

        self.__is_enable = is_enable

    @property
    def partner(self):
        """`{ str }`
            \nPartner details of the antivirus server. This is a read-only field.
        """ # noqa: E501
        return self.__partner

    @partner.setter
    def partner(self, partner):

        self.__partner = partner

    @property
    def icap_service_name(self):
        """`{ str }`
            \nICAP service name
        """ # noqa: E501
        return self.__icap_service_name

    @icap_service_name.setter
    def icap_service_name(self, icap_service_name):

        self.__icap_service_name = icap_service_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AntivirusServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntivirusServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

