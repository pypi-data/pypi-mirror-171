# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.files.v4.config.ProtocolType import ProtocolType  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class Ad(object):
    """Ad - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'domain_name': 'str',
        'organization_unit': 'str',
        'overwrite_user_account': 'bool',
        'preferred_domain_controller': 'str',
        'add_user_as_fs_admin': 'bool',
        'protocol_type': 'files.v4.config.ProtocolType',
        'rfc2307_enabled': 'bool',
        'use_same_credentials_for_dns': 'bool',
        'force_leave_domain': 'bool',
        'validate_ad_credential': 'bool',
        'is_validate_ad_credential': 'bool',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'domain_name': 'domainName',
        'organization_unit': 'organizationUnit',
        'overwrite_user_account': 'overwriteUserAccount',
        'preferred_domain_controller': 'preferredDomainController',
        'add_user_as_fs_admin': 'addUserAsFsAdmin',
        'protocol_type': 'protocolType',
        'rfc2307_enabled': 'rfc2307Enabled',
        'use_same_credentials_for_dns': 'useSameCredentialsForDns',
        'force_leave_domain': 'forceLeaveDomain',
        'validate_ad_credential': 'ValidateAdCredential',
        'is_validate_ad_credential': 'isValidateAdCredential',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, username=None, password=None, domain_name=None, organization_unit=None, overwrite_user_account=False, preferred_domain_controller=None, add_user_as_fs_admin=False, protocol_type=None, rfc2307_enabled=False, use_same_credentials_for_dns=False, force_leave_domain=False, validate_ad_credential=False, is_validate_ad_credential=False, *args, **kwargs):  # noqa: E501
        """Ad - a model defined in Swagger
            \nAd domain associated with the file server.
        """
        self.__username = None
        self.__password = None
        self.__domain_name = None
        self.__organization_unit = None
        self.__overwrite_user_account = None
        self.__preferred_domain_controller = None
        self.__add_user_as_fs_admin = None
        self.__protocol_type = None
        self.__rfc2307_enabled = None
        self.__use_same_credentials_for_dns = None
        self.__force_leave_domain = None
        self.__validate_ad_credential = None
        self.__is_validate_ad_credential = None
        self.discriminator = None
        if username is not None:
            self.__username = username
        if password is not None:
            self.__password = password
        if domain_name is not None:
            self.__domain_name = domain_name
        if organization_unit is not None:
            self.__organization_unit = organization_unit
        if overwrite_user_account is not None:
            self.__overwrite_user_account = overwrite_user_account
        if preferred_domain_controller is not None:
            self.__preferred_domain_controller = preferred_domain_controller
        if add_user_as_fs_admin is not None:
            self.__add_user_as_fs_admin = add_user_as_fs_admin
        if protocol_type is not None:
            self.__protocol_type = protocol_type
        if rfc2307_enabled is not None:
            self.__rfc2307_enabled = rfc2307_enabled
        if use_same_credentials_for_dns is not None:
            self.__use_same_credentials_for_dns = use_same_credentials_for_dns
        if force_leave_domain is not None:
            self.__force_leave_domain = force_leave_domain
        if validate_ad_credential is not None:
            self.__validate_ad_credential = validate_ad_credential
        if is_validate_ad_credential is not None:
            self.__is_validate_ad_credential = is_validate_ad_credential
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'files.v4.config.Ad'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.Ad'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def username(self):
        """`{ str }`
            \nAd domain username associated with the file server.
        """ # noqa: E501
        return self.__username

    @username.setter
    def username(self, username):

        self.__username = username

    @property
    def password(self):
        """`{ str }`
            \nAd domain password associated with the file server.
        """ # noqa: E501
        return self.__password

    @password.setter
    def password(self, password):

        self.__password = password

    @property
    def domain_name(self):
        """`{ str }`
            \nAd domain name associated with the file server.
        """ # noqa: E501
        return self.__domain_name

    @domain_name.setter
    def domain_name(self, domain_name):

        self.__domain_name = domain_name

    @property
    def organization_unit(self):
        """`{ str }`
            \nAd domain organizational unit associated with the file server.
        """ # noqa: E501
        return self.__organization_unit

    @organization_unit.setter
    def organization_unit(self, organization_unit):

        self.__organization_unit = organization_unit

    @property
    def overwrite_user_account(self):
        """`{ bool }`
            \nIf a machine account with the same name as file server name is present on the Ad, then overwrite it during join-domain operation.
        """ # noqa: E501
        return self.__overwrite_user_account

    @overwrite_user_account.setter
    def overwrite_user_account(self, overwrite_user_account):

        self.__overwrite_user_account = overwrite_user_account

    @property
    def preferred_domain_controller(self):
        """`{ str }`
            \nUse a specific domain controller for the join-domain operation in a multi DC active directory setup. By default, AFS discovers a site local domain controller for join-domain operation. The preferred domain controller cannot be an IP address. It has to be FQDN (example: dc_name.dom.companyname.com)
        """ # noqa: E501
        return self.__preferred_domain_controller

    @preferred_domain_controller.setter
    def preferred_domain_controller(self, preferred_domain_controller):

        self.__preferred_domain_controller = preferred_domain_controller

    @property
    def add_user_as_fs_admin(self):
        """`{ bool }`
            \nAd user or group name as 'name' or 'NETBIOS\\name' format.
        """ # noqa: E501
        return self.__add_user_as_fs_admin

    @add_user_as_fs_admin.setter
    def add_user_as_fs_admin(self, add_user_as_fs_admin):

        self.__add_user_as_fs_admin = add_user_as_fs_admin

    @property
    def protocol_type(self):
        """`{ files.v4.config.ProtocolType }`
            
        """ # noqa: E501
        return self.__protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):

        self.__protocol_type = protocol_type

    @property
    def rfc2307_enabled(self):
        """`{ bool }`
            \nRFC 2307 ENABLED (true, false).
        """ # noqa: E501
        return self.__rfc2307_enabled

    @rfc2307_enabled.setter
    def rfc2307_enabled(self, rfc2307_enabled):

        self.__rfc2307_enabled = rfc2307_enabled

    @property
    def use_same_credentials_for_dns(self):
        """`{ bool }`
            \nUse the same Ad credential for DNS.
        """ # noqa: E501
        return self.__use_same_credentials_for_dns

    @use_same_credentials_for_dns.setter
    def use_same_credentials_for_dns(self, use_same_credentials_for_dns):

        self.__use_same_credentials_for_dns = use_same_credentials_for_dns

    @property
    def force_leave_domain(self):
        """`{ bool }`
            \nIf the joined active directory is down or not reachable, then use this option to leave the domain by bypassing all Ad interactions. Please ensure to remove the file server machine account manually afterwards.
        """ # noqa: E501
        return self.__force_leave_domain

    @force_leave_domain.setter
    def force_leave_domain(self, force_leave_domain):

        self.__force_leave_domain = force_leave_domain

    @property
    def validate_ad_credential(self):
        """`{ bool }`
            \nIndicates whether the Ad credentials will be validated or skipped. This field will be deferred.
        """ # noqa: E501
        return self.__validate_ad_credential

    @validate_ad_credential.setter
    def validate_ad_credential(self, validate_ad_credential):

        self.__validate_ad_credential = validate_ad_credential

    @property
    def is_validate_ad_credential(self):
        """`{ bool }`
            \nIndicates whether the Ad credentials will be validated or skipped.
        """ # noqa: E501
        return self.__is_validate_ad_credential

    @is_validate_ad_credential.setter
    def is_validate_ad_credential(self, is_validate_ad_credential):

        self.__is_validate_ad_credential = is_validate_ad_credential

    @property
    def _reserved(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """`{ str }`
            
        """ # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """`{ dict(str, object) }`
            
        """ # noqa: E501
        return self.__dollar_unknown_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ad, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

