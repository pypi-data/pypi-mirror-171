# coding: utf-8


"""
IGNORE:
    Nutanix Files Versioned APIs

    Manage virtual file servers, create and configure shares for client access, protect them using DR and sync policies, provision storage space and administer security controls.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_files_py_client.Ntnx.common.v1.config.Message import Message  # noqa: F401,E501
from ntnx_files_py_client.Ntnx.common.v1.config.MessageSeverity import MessageSeverity  # noqa: F401,E501

"""
IGNORE:
NOTE: This class is auto generated by the swagger code generator program.

Do not edit the class manually.
IGNORE
"""


class DisablePolicySpec(Message):
    """DisablePolicySpec - a model defined in Swagger"""
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """ # noqa: E501
    swagger_types = {
        'cancel_ongoing_jobs': 'bool',
        'code': 'str',
        'message': 'str',
        'locale': 'str',
        'severity': 'common.v1.config.MessageSeverity',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'cancel_ongoing_jobs': 'cancelOngoingJobs',
        'code': 'code',
        'message': 'message',
        'locale': 'locale',
        'severity': 'severity',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, cancel_ongoing_jobs=False, code=None, message=None, locale='en_US', severity=None, *args, **kwargs):  # noqa: E501
        """DisablePolicySpec - a model defined in Swagger
            \nDisables the policy with cancelOnGoingJobs as user given input, if the input is not provided then the default value is set to false.
        """
        Message.__init__(self, code, message, locale, severity, *args, **kwargs)
        self.__cancel_ongoing_jobs = None
        self.discriminator = None
        if cancel_ongoing_jobs is not None:
            self.__cancel_ongoing_jobs = cancel_ongoing_jobs

    def _initialize_object_type(self):
        return 'files.v4.config.DisablePolicySpec'

    def _initialize_fq_object_type(self):
        return 'files.v4.r0.a2.config.DisablePolicySpec'


    @property
    def cancel_ongoing_jobs(self):
        """`{ bool }`
            \nThis parameter indicates whether all the ongoing jobs needed to be cancelled during the disable policy operation. It is false by default. 
        """ # noqa: E501
        return self.__cancel_ongoing_jobs

    @cancel_ongoing_jobs.setter
    def cancel_ongoing_jobs(self, cancel_ongoing_jobs):

        self.__cancel_ongoing_jobs = cancel_ongoing_jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DisablePolicySpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DisablePolicySpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

